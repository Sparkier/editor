(self.webpackChunkvega_editor=self.webpackChunkvega_editor||[]).push([[478],{49472:e=>{"use strict";e.exports={i8:"5.1.0"}},24430:(e,t,i)=>{"use strict";i.d(t,{ae:()=>r,B5:()=>s,Oc:()=>l,Wp:()=>d,Ib:()=>c,X1:()=>h,y:()=>p,VP:()=>u});var n=i(48823),a=i(59159);const o={argmax:1,argmin:1,average:1,count:1,distinct:1,product:1,max:1,mean:1,median:1,min:1,missing:1,q1:1,q3:1,ci0:1,ci1:1,stderr:1,stdev:1,stdevp:1,sum:1,valid:1,values:1,variance:1,variancep:1},r={count:1,min:1,max:1};function s(e){return!!e&&!!e.argmin}function l(e){return!!e&&!!e.argmax}function d(e){return(0,n.HD)(e)&&!!o[e]}(0,a.XP)(o);const f=["count","valid","missing","distinct"];function c(e){return(0,n.HD)(e)&&(0,a.r3)(f,e)}function h(e){return(0,n.HD)(e)&&(0,a.r3)(["min","max"],e)}const p=["count","sum","distinct","valid","missing"],u=(0,n.Rg)(["mean","average","median","q1","q3","min","max"])},84151:(e,t,i)=>{"use strict";i.d(t,{MN:()=>a,JX:()=>o,qE:()=>r,Y2:()=>s,zn:()=>l,xK:()=>f,SW:()=>c});var n=i(59159);const a={labelAlign:{part:"labels",vgProp:"align"},labelBaseline:{part:"labels",vgProp:"baseline"},labelColor:{part:"labels",vgProp:"fill"},labelFont:{part:"labels",vgProp:"font"},labelFontSize:{part:"labels",vgProp:"fontSize"},labelFontStyle:{part:"labels",vgProp:"fontStyle"},labelFontWeight:{part:"labels",vgProp:"fontWeight"},labelOpacity:{part:"labels",vgProp:"opacity"},labelOffset:null,labelPadding:null,gridColor:{part:"grid",vgProp:"stroke"},gridDash:{part:"grid",vgProp:"strokeDash"},gridDashOffset:{part:"grid",vgProp:"strokeDashOffset"},gridOpacity:{part:"grid",vgProp:"opacity"},gridWidth:{part:"grid",vgProp:"strokeWidth"},tickColor:{part:"ticks",vgProp:"stroke"},tickDash:{part:"ticks",vgProp:"strokeDash"},tickDashOffset:{part:"ticks",vgProp:"strokeDashOffset"},tickOpacity:{part:"ticks",vgProp:"opacity"},tickSize:null,tickWidth:{part:"ticks",vgProp:"strokeWidth"}};function o(e){return e&&e.condition}const r=["domain","grid","labels","ticks","title"],s={grid:"grid",gridCap:"grid",gridColor:"grid",gridDash:"grid",gridDashOffset:"grid",gridOpacity:"grid",gridScale:"grid",gridWidth:"grid",orient:"main",bandPosition:"both",aria:"main",description:"main",domain:"main",domainCap:"main",domainColor:"main",domainDash:"main",domainDashOffset:"main",domainOpacity:"main",domainWidth:"main",format:"main",formatType:"main",labelAlign:"main",labelAngle:"main",labelBaseline:"main",labelBound:"main",labelColor:"main",labelFlush:"main",labelFlushOffset:"main",labelFont:"main",labelFontSize:"main",labelFontStyle:"main",labelFontWeight:"main",labelLimit:"main",labelLineHeight:"main",labelOffset:"main",labelOpacity:"main",labelOverlap:"main",labelPadding:"main",labels:"main",labelSeparation:"main",maxExtent:"main",minExtent:"main",offset:"both",position:"main",tickCap:"main",tickColor:"main",tickDash:"main",tickDashOffset:"main",tickMinStep:"both",tickOffset:"both",tickOpacity:"main",tickRound:"both",ticks:"main",tickSize:"main",tickWidth:"both",title:"main",titleAlign:"main",titleAnchor:"main",titleAngle:"main",titleBaseline:"main",titleColor:"main",titleFont:"main",titleFontSize:"main",titleFontStyle:"main",titleFontWeight:"main",titleLimit:"main",titleLineHeight:"main",titleOpacity:"main",titlePadding:"main",titleX:"main",titleY:"main",encode:"both",scale:"both",tickBand:"both",tickCount:"both",tickExtra:"both",translate:"both",values:"both",zindex:"both"},l={orient:1,aria:1,bandPosition:1,description:1,domain:1,domainCap:1,domainColor:1,domainDash:1,domainDashOffset:1,domainOpacity:1,domainWidth:1,format:1,formatType:1,grid:1,gridCap:1,gridColor:1,gridDash:1,gridDashOffset:1,gridOpacity:1,gridWidth:1,labelAlign:1,labelAngle:1,labelBaseline:1,labelBound:1,labelColor:1,labelFlush:1,labelFlushOffset:1,labelFont:1,labelFontSize:1,labelFontStyle:1,labelFontWeight:1,labelLimit:1,labelLineHeight:1,labelOffset:1,labelOpacity:1,labelOverlap:1,labelPadding:1,labels:1,labelSeparation:1,maxExtent:1,minExtent:1,offset:1,position:1,tickBand:1,tickCap:1,tickColor:1,tickCount:1,tickDash:1,tickDashOffset:1,tickExtra:1,tickMinStep:1,tickOffset:1,tickOpacity:1,tickRound:1,ticks:1,tickSize:1,tickWidth:1,title:1,titleAlign:1,titleAnchor:1,titleAngle:1,titleBaseline:1,titleColor:1,titleFont:1,titleFontSize:1,titleFontStyle:1,titleFontWeight:1,titleLimit:1,titleLineHeight:1,titleOpacity:1,titlePadding:1,titleX:1,titleY:1,translate:1,values:1,zindex:1},d={...l,style:1,labelExpr:1,encoding:1};function f(e){return!!d[e]}(0,n.XP)(d);const c=(0,n.XP)({axis:1,axisBand:1,axisBottom:1,axisDiscrete:1,axisLeft:1,axisPoint:1,axisQuantitative:1,axisRight:1,axisTemporal:1,axisTop:1,axisX:1,axisXBand:1,axisXDiscrete:1,axisXPoint:1,axisXQuantitative:1,axisXTemporal:1,axisY:1,axisYBand:1,axisYDiscrete:1,axisYPoint:1,axisYQuantitative:1,axisYTemporal:1})},35647:(e,t,i)=>{"use strict";i.d(t,{iT:()=>s,f$:()=>l,YK:()=>d,dt:()=>f,Sx:()=>c,TZ:()=>h});var n=i(48823),a=i(19387),o=i(7422),r=i(59159);function s(e){return(0,n.jn)(e)&&(e=(0,o.kC)(e,void 0)),"bin"+(0,r.XP)(e).map((t=>c(e[t])?(0,r.Xr)(`_${t}_${(0,r.qh)(e[t])}`):(0,r.Xr)(`_${t}_${e[t]}`))).join("")}function l(e){return!0===e||f(e)&&!e.binned}function d(e){return"binned"===e||f(e)&&!0===e.binned}function f(e){return(0,n.Kn)(e)}function c(e){return e?.param}function h(e){switch(e){case a.rn:case a.aC:case a.NO:case a.r$:case a.ur:case a.le:case a.KF:case a.JO:case a.I:case a.ky:case a.X3:return 6;case a.wg:return 4;default:return 10}}},19387:(e,t,i)=>{"use strict";i.d(t,{rn:()=>a,aC:()=>o,Qd:()=>r,X:()=>s,Y:()=>l,X2:()=>d,Y2:()=>f,OU:()=>c,pT:()=>h,uD:()=>p,vL:()=>u,y:()=>g,Xs:()=>m,VO:()=>b,NG:()=>y,r$:()=>v,ur:()=>_,le:()=>x,X3:()=>w,NO:()=>$,Ix:()=>k,JO:()=>T,I:()=>D,ky:()=>O,KF:()=>S,wg:()=>R,lD:()=>A,kl:()=>E,$Y:()=>F,Fn:()=>q,Li:()=>P,n2:()=>I,Jx:()=>j,dz:()=>C,q1:()=>U,xx:()=>V,E0:()=>L,bV:()=>W,tE:()=>B,tD:()=>G,pD:()=>Y,qZ:()=>ae,J6:()=>oe,K7:()=>re,Hv:()=>se,VY:()=>le,xd:()=>de,Hy:()=>fe,kq:()=>ce,HU:()=>he,SV:()=>De,Xb:()=>Oe,Kz:()=>Se,Zk:()=>Re,iM:()=>Ae,E5:()=>Ee,x1:()=>Fe,Kv:()=>Le,fF:()=>We,l0:()=>Me,cA:()=>He,rP:()=>Ge,id:()=>Xe,e6:()=>Ze});var n=i(59159);const a="row",o="column",r="facet",s="x",l="y",d="x2",f="y2",c="radius",h="radius2",p="theta",u="theta2",g="latitude",m="longitude",b="latitude2",y="longitude2",v="color",_="fill",x="stroke",w="shape",$="size",k="angle",T="opacity",D="fillOpacity",O="strokeOpacity",S="strokeWidth",R="strokeDash",A="text",E="order",F="detail",q="key",P="tooltip",I="href",j="url",C="description",z={theta:1,theta2:1,radius:1,radius2:1};function U(e){return e in z}const N={longitude:1,longitude2:1,latitude:1,latitude2:1};function V(e){switch(e){case g:return"y";case b:return"y2";case m:return"x";case y:return"x2"}}function L(e){return e in N}const W=(0,n.XP)(N),M={x:1,y:1,x2:1,y2:1,...z,...N,color:1,fill:1,stroke:1,opacity:1,fillOpacity:1,strokeOpacity:1,strokeWidth:1,strokeDash:1,size:1,angle:1,shape:1,order:1,text:1,detail:1,key:1,tooltip:1,href:1,url:1,description:1};function B(e){return e===v||e===_||e===x}const H={row:1,column:1,facet:1},G=(0,n.XP)(H),X={...M,...H},Y=(0,n.XP)(X),{order:J,detail:K,tooltip:Z,...Q}=X,{row:ee,column:te,facet:ie,...ne}=Q;function ae(e){return!!ne[e]}function oe(e){return!!X[e]}(0,n.XP)(Q),(0,n.XP)(ne);const re=[d,f,b,y,u,h];function se(e){return le(e)!==e}function le(e){switch(e){case d:return s;case f:return l;case b:return g;case y:return m;case u:return p;case h:return c}return e}function de(e){if(U(e))switch(e){case p:return"startAngle";case u:return"endAngle";case c:return"outerRadius";case h:return"innerRadius"}return e}function fe(e){switch(e){case s:return d;case l:return f;case g:return b;case m:return y;case p:return u;case c:return h}}function ce(e){switch(e){case s:case d:return"width";case l:case f:return"height"}}function he(e){switch(e){case s:return"xOffset";case l:return"yOffset";case d:return"x2Offset";case f:return"y2Offset";case p:return"thetaOffset";case c:return"radiusOffset";case u:return"theta2Offset";case h:return"radius2Offset"}}(0,n.XP)(M);const{x:pe,y:ue,x2:ge,y2:me,latitude:be,longitude:ye,latitude2:ve,longitude2:_e,theta:xe,theta2:we,radius:$e,radius2:ke,...Te}=M,De=(0,n.XP)(Te),Oe={x:1,y:1},Se=(0,n.XP)(Oe);function Re(e){return e in Oe}const Ae={theta:1,radius:1},Ee=(0,n.XP)(Ae);function Fe(e){return"width"===e?s:l}const{text:qe,tooltip:Pe,href:Ie,url:je,description:Ce,detail:ze,key:Ue,order:Ne,...Ve}=Te,Le=(0,n.XP)(Ve);function We(e){return!!Te[e]}function Me(e){switch(e){case v:case _:case x:case $:case w:case T:case S:case R:return!0;case D:case O:case k:return!1}}const Be={...Oe,...Ae,...Ve},He=(0,n.XP)(Be);function Ge(e){return!!Be[e]}function Xe(e,t){return function(e){switch(e){case v:case _:case x:case C:case F:case q:case P:case I:case E:case T:case D:case O:case S:case r:case a:case o:return Ye;case s:case l:case g:case m:return Ke;case d:case f:case b:case y:return{area:"always",bar:"always",image:"always",rect:"always",rule:"always",circle:"binned",point:"binned",square:"binned",tick:"binned",line:"binned",trail:"binned"};case $:return{point:"always",tick:"always",rule:"always",circle:"always",square:"always",bar:"always",text:"always",line:"always",trail:"always"};case R:return{line:"always",point:"always",tick:"always",rule:"always",circle:"always",square:"always",bar:"always",geoshape:"always"};case w:return{point:"always",geoshape:"always"};case A:return{text:"always"};case k:return{point:"always",square:"always",text:"always"};case j:return{image:"always"};case p:case c:return{text:"always",arc:"always"};case u:case h:return{arc:"always"}}}(e)[t]}const Ye={arc:"always",area:"always",bar:"always",circle:"always",geoshape:"always",image:"always",line:"always",rule:"always",point:"always",rect:"always",square:"always",trail:"always",text:"always",tick:"always"},{geoshape:Je,...Ke}=Ye;function Ze(e){switch(e){case s:case l:case p:case c:case $:case k:case S:case T:case D:case O:case d:case f:case u:case h:return;case r:case a:case o:case w:case R:case A:case P:case I:case j:case C:return"discrete";case v:case _:case x:return"flexible";case g:case m:case b:case y:case F:case q:case E:return}}},7422:(e,t,i)=>{"use strict";i.d(t,{Ql:()=>_,Ze:()=>x,be:()=>w,hQ:()=>$,hK:()=>k,sp:()=>T,wl:()=>D,dB:()=>O,Xi:()=>S,wb:()=>R,$Z:()=>A,VQ:()=>E,$v:()=>F,Iu:()=>q,OV:()=>P,vA:()=>I,v3:()=>j,tV:()=>C,kJ:()=>z,oH:()=>U,ny:()=>N,uE:()=>W,jd:()=>M,lK:()=>B,aD:()=>X,n7:()=>Y,TN:()=>J,q6:()=>K,oc:()=>Z,o7:()=>Q,Vm:()=>ee,EA:()=>te,q1:()=>ie,xe:()=>ae,kC:()=>oe,vc:()=>se,He:()=>le,pq:()=>de,Wd:()=>fe});var n=i(48823),a=i(24430),o=i(35647),r=i(19387),s=i(62334),l=i(20705),d=i(62343),f=i(77125),c=i(56997),h=i(78666),p=i(49272),u=i(50579),g=i(41681),m=i(31021),b=i(46689),y=i(59159),v=i(99185);function _(e){return e.param}function x(e){return e&&!(0,n.HD)(e)&&"repeat"in e}function w(e){const{field:t,timeUnit:i,bin:n,aggregate:a}=e;return{...i?{timeUnit:i}:{},...n?{bin:n}:{},...a?{aggregate:a}:{},field:t}}function $(e){return"sort"in e}function k({fieldDef:e,fieldDef2:t,markDef:i,config:n}){if(j(e)&&void 0!==e.bandPosition)return e.bandPosition;if(E(e)){const{timeUnit:a,bin:r}=e;if(a&&!t)return(0,h.io)(i.type)?0:(0,s.Kt)("timeUnitBandPosition",i,n);if((0,o.f$)(r))return.5}}function T({channel:e,fieldDef:t,fieldDef2:i,markDef:n,config:a,scaleType:l,useVlSizeChannel:d}){const f=(0,r.kq)(e),c=(0,s.is)(d?"size":f,n,a,{vgChannel:f});if(void 0!==c)return c;if(E(t)){const{timeUnit:e,bin:r}=t;if(e&&!i)return{band:(0,s.Kt)("timeUnitBandSize",n,a)};if((0,o.f$)(r)&&!(0,p.eO)(l))return{band:1}}return(0,h.io)(n.type)?l?(0,p.eO)(l)?a[n.type]?.discreteBandSize||{band:1}:a[n.type]?.continuousBandSize:a[n.type]?.discreteBandSize:void 0}function D(e,t,i,n){return!!((0,o.f$)(e.bin)||e.timeUnit&&C(e)&&"temporal"===e.type)&&void 0!==k({fieldDef:e,fieldDef2:t,markDef:i,config:n})}function O(e){return!!e&&"condition"in e}function S(e){const t=e&&e.condition;return!!t&&!(0,n.kJ)(t)&&E(t)}function R(e){const t=e&&e.condition;return!!t&&!(0,n.kJ)(t)&&j(t)}function A(e){const t=e&&e.condition;return!!t&&((0,n.kJ)(t)||z(t))}function E(e){return!(!e||!e.field&&"count"!==e.aggregate)}function F(e){return e&&e.type}function q(e){return!!e&&"datum"in e}function P(e){return C(e)&&!B(e)||I(e)}function I(e){return q(e)&&(0,n.hj)(e.datum)}function j(e){return E(e)||q(e)}function C(e){return!!e&&("field"in e||"count"===e.aggregate)&&"type"in e}function z(e){return e&&"value"in e&&"value"in e}function U(e){return!!e&&("scale"in e||"sort"in e)}function N(e){return e&&("axis"in e||"stack"in e||"impute"in e)}function V(e){return!!e&&"legend"in e}function L(e){return!!e&&("format"in e||"formatType"in e)}function W(e){return(0,y.CE)(e,["legend","axis","header","scale"])}function M(e,t={}){let i=e.field;const n=t.prefix;let r=t.suffix,s="";if(function(e){return"count"===e.aggregate}(e))i=(0,y.iw)("count");else{let n;if(!t.nofn)if(function(e){return"op"in e}(e))n=e.op;else{const{bin:l,aggregate:d,timeUnit:f}=e;(0,o.f$)(l)?(n=(0,o.iT)(l),r=(t.binSuffix??"")+(t.suffix??"")):d?(0,a.Oc)(d)?(s=`["${i}"]`,i=`argmax_${d.argmax}`):(0,a.B5)(d)?(s=`["${i}"]`,i=`argmin_${d.argmin}`):n=String(d):f&&(n=(0,m.uF)(f),r=(!["range","mid"].includes(t.binSuffix)&&t.binSuffix||"")+(t.suffix??""))}n&&(i=i?`${n}_${i}`:n)}return r&&(i=`${i}_${r}`),n&&(i=`${n}_${i}`),t.forAs?(0,y.BX)(i):t.expr?(0,y.Io)(i,t.expr)+s:(0,y.qO)(i)+s}function B(e){switch(e.type){case"nominal":case"ordinal":case"geojson":return!0;case"quantitative":return E(e)&&!!e.bin;case"temporal":return!1}throw new Error(c.yw.invalidFieldType(e.type))}const H=(e,t)=>{switch(t.fieldTitle){case"plain":return e.field;case"functional":return function(e){const{aggregate:t,bin:i,timeUnit:n,field:r}=e;if((0,a.Oc)(t))return`${r} for argmax(${t.argmax})`;if((0,a.B5)(t))return`${r} for argmin(${t.argmin})`;const s=(0,m.Q8)(n),l=t||s?.unit||s?.maxbins&&"timeunit"||(0,o.f$)(i)&&"bin";return l?`${l.toUpperCase()}(${r})`:r}(e);default:return function(e,t){const{field:i,bin:n,timeUnit:r,aggregate:s}=e;if("count"===s)return t.countTitle;if((0,o.f$)(n))return`${i} (binned)`;if(r){const e=(0,m.Q8)(r)?.unit;if(e)return`${i} (${(0,m.m9)(e).join("-")})`}else if(s)return(0,a.Oc)(s)?`${i} for max ${s.argmax}`:(0,a.B5)(s)?`${i} for min ${s.argmin}`:`${(0,y.Qs)(s)} of ${i}`;return i}(e,t)}};let G=H;function X(e){G=e}function Y(){X(H)}function J(e,t,{allowDisabling:i,includeDefault:n=!0}){const a=K(e)?.title;if(!E(e))return a;const o=e,r=n?Z(o,t):void 0;return i?(0,y.du)(a,o.title,r):a??o.title??r}function K(e){return N(e)&&e.axis?e.axis:V(e)&&e.legend?e.legend:(0,g.Fw)(e)&&e.header?e.header:void 0}function Z(e,t){return G(e,t)}function Q(e){if(L(e)){const{format:t,formatType:i}=e;return{format:t,formatType:i}}{const t=K(e)??{},{format:i,formatType:n}=t;return{format:i,formatType:n}}}function ee(e){return E(e)?e:S(e)?e.condition:void 0}function te(e){return j(e)?e:R(e)?e.condition:void 0}function ie(e,t,i,a={}){if((0,n.HD)(e)||(0,n.hj)(e)||(0,n.jn)(e)){const i=(0,n.HD)(e)?"string":(0,n.hj)(e)?"number":"boolean";return c.ZK(c.yw.primitiveChannelDef(t,i,e)),{value:e}}return j(e)?ne(e,t,i,a):R(e)?{...e,condition:ne(e.condition,t,i,a)}:e}function ne(e,t,i,a){if(L(e)){const{format:n,formatType:o,...r}=e;if((0,l.bt)(o)&&!i.customFormatTypes)return c.ZK(c.yw.customFormatTypeNotAllowed(t)),ne(r,t,i,a)}else{const n=N(e)?"axis":V(e)?"legend":(0,g.Fw)(e)?"header":null;if(n&&e[n]){const{format:o,formatType:r,...s}=e[n];if((0,l.bt)(r)&&!i.customFormatTypes)return c.ZK(c.yw.customFormatTypeNotAllowed(t)),ne({...e,[n]:s},t,i,a)}}return E(e)?ae(e,t,a):function(e){let t=e.type;if(t)return e;const{datum:i}=e;return t=(0,n.hj)(i)?"quantitative":(0,n.HD)(i)?"nominal":(0,d.v9)(i)?"temporal":void 0,{...e,type:t}}(e)}function ae(e,t,{compositeMark:i=!1}={}){const{aggregate:s,timeUnit:l,bin:d,field:f}=e,h={...e};if(i||!s||(0,a.Wp)(s)||(0,a.Oc)(s)||(0,a.B5)(s)||(c.ZK(c.yw.invalidAggregate(s)),delete h.aggregate),l&&(h.timeUnit=(0,m.Q8)(l)),f&&(h.field=`${f}`),(0,o.f$)(d)&&(h.bin=oe(d,t)),(0,o.YK)(d)&&!(0,r.Zk)(t)&&c.ZK(c.yw.channelShouldNotBeUsedForBinned(t)),C(h)){const{type:e}=h,t=(0,b.Pp)(e);e!==t&&(h.type=t),"quantitative"!==e&&(0,a.Ib)(s)&&(c.ZK(c.yw.invalidFieldTypeForCountAggregate(e,s)),h.type="quantitative")}else if(!(0,r.Hv)(t)){const e=function(e,t){switch(t){case"latitude":case"longitude":return"quantitative";case"row":case"column":case"facet":case"shape":case"strokeDash":return"nominal";case"order":return"ordinal"}if($(e)&&(0,n.kJ)(e.sort))return"ordinal";const{aggregate:i,bin:o,timeUnit:r}=e;if(r)return"temporal";if(o||i&&!(0,a.Oc)(i)&&!(0,a.B5)(i))return"quantitative";if(U(e)&&e.scale?.type)switch(p.Hy[e.scale.type]){case"numeric":case"discretizing":return"quantitative";case"time":return"temporal"}return"nominal"}(h,t);h.type=e}if(C(h)){const{compatible:e,warning:i}=function(e,t){const i=e.type;if("geojson"===i&&"shape"!==t)return{compatible:!1,warning:`Channel ${t} should not be used with a geojson data.`};switch(t){case r.rn:case r.aC:case r.Qd:return B(e)?re:{compatible:!1,warning:c.yw.channelShouldBeDiscrete(t)};case r.X:case r.Y:case r.r$:case r.ur:case r.le:case r.lD:case r.$Y:case r.Fn:case r.Li:case r.n2:case r.Jx:case r.Ix:case r.uD:case r.OU:case r.dz:return re;case r.Xs:case r.NG:case r.y:case r.VO:return i!==b.ql?{compatible:!1,warning:`Channel ${t} should be used with a quantitative field only, not ${e.type} field.`}:re;case r.JO:case r.I:case r.ky:case r.KF:case r.NO:case r.vL:case r.pT:case r.X2:case r.Y2:return"nominal"!==i||e.sort?re:{compatible:!1,warning:`Channel ${t} should not be used with an unsorted discrete field.`};case r.X3:case r.wg:return B(e)||U(n=e)&&(0,p.Qe)(n.scale?.type)?re:{compatible:!1,warning:c.yw.channelShouldBeDiscreteOrDiscretizing(t)};case r.kl:return"nominal"!==e.type||"sort"in e?re:{compatible:!1,warning:"Channel order is inappropriate for nominal field, which has no inherent order."}}var n}(h,t)||{};!1===e&&c.ZK(i)}if($(h)&&(0,n.HD)(h.sort)){const{sort:e}=h;if((0,u.Xy)(e))return{...h,sort:{encoding:e}};const t=e.substr(1);if("-"===e.charAt(0)&&(0,u.Xy)(t))return{...h,sort:{encoding:t,order:"descending"}}}if((0,g.Fw)(h)){const{header:e}=h;if(e){const{orient:t,...i}=e;if(t)return{...h,header:{...i,labelOrient:e.labelOrient||t,titleOrient:e.titleOrient||t}}}}return h}function oe(e,t){return(0,n.jn)(e)?{maxbins:(0,o.TZ)(t)}:"binned"===e?{binned:!0}:e.maxbins||e.step?e:{...e,maxbins:(0,o.TZ)(t)}}const re={compatible:!0};function se(e){const{formatType:t}=Q(e);return"time"===t||!t&&(i=e)&&("temporal"===i.type||E(i)&&!!i.timeUnit);var i}function le(e,{timeUnit:t,type:i,wrapTime:a,undefinedIfExprNotRequired:o}){const r=t&&(0,m.Q8)(t)?.unit;let s,l=r||"temporal"===i;return(0,f.T)(e)?s=e.expr:(0,v.Lo)(e)?s=e.signal:(0,d.v9)(e)?(l=!0,s=(0,d.vb)(e)):((0,n.HD)(e)||(0,n.hj)(e))&&l&&(s=`datetime(${(0,y.Pz)(e)})`,(0,m.L3)(r)&&((0,n.hj)(e)&&e<1e4||(0,n.HD)(e)&&isNaN(Date.parse(e)))&&(s=(0,d.vb)({[r]:e}))),s?a&&l?`time(${s})`:s:o?void 0:(0,y.Pz)(e)}function de(e,t){const{type:i}=e;return t.map((t=>{const n=le(t,{timeUnit:E(e)?e.timeUnit:void 0,type:i,undefinedIfExprNotRequired:!0});return void 0!==n?{signal:n}:t}))}function fe(e,t){return(0,o.f$)(e.bin)?(0,r.rP)(t)&&["ordinal","nominal"].includes(e.type):(console.warn("Only call this method for binned field defs."),!1)}},32424:(e,t,i)=>{"use strict";i.d(t,{XF:()=>p,Mt:()=>u,Fh:()=>g});var n=i(48823),a=i(84151),o=i(19387),r=i(7422),s=i(53918),l=i(59159),d=i(99185),f=i(62334),c=i(84879);function h(e,t,i,n){var a,o;e.encode??(e.encode={}),(a=e.encode)[t]??(a[t]={}),(o=e.encode[t]).update??(o.update={}),e.encode[t].update[i]=n}function p(e,t,i,o={header:!1}){const{disable:p,orient:u,scale:g,labelExpr:m,title:b,zindex:y,...v}=e.combine();if(!p){for(const e in v){const i=a.Y2[e],o=v[e];if(i&&i!==t&&"both"!==i)delete v[e];else if((0,a.JX)(o)){const{condition:t,...i}=o,r=(0,n.IX)(t),s=a.MN[e];if(s){const{vgProp:t,part:n}=s;h(v,n,t,[...r.map((e=>{const{test:t,...i}=e;return{test:(0,c.t)(null,t),...i}})),i]),delete v[e]}else if(null===s){const t={signal:r.map((e=>{const{test:t,...i}=e;return`${(0,c.t)(null,t)} ? ${(0,f.uz)(i)} : `})).join("")+(0,f.uz)(i)};v[e]=t}}else if((0,d.Lo)(o)){const t=a.MN[e];if(t){const{vgProp:i,part:n}=t;h(v,n,i,o),delete v[e]}}(0,l.r3)(["labelAlign","labelBaseline"],e)&&null===v[e]&&delete v[e]}if("grid"===t){if(!v.grid)return;if(v.encode){const{grid:e}=v.encode;v.encode={...e?{grid:e}:{}},(0,l.xb)(v.encode)&&delete v.encode}return{scale:g,orient:u,...v,domain:!1,labels:!1,aria:!1,maxExtent:0,minExtent:0,ticks:!1,zindex:(0,l.du)(y,0)}}{if(!o.header&&e.mainExtracted)return;if(void 0!==m){let e=m;v.encode?.labels?.update&&(0,d.Lo)(v.encode.labels.update.text)&&(e=(0,l.ko)(m,"datum.label",v.encode.labels.update.text.signal)),h(v,"labels","text",{signal:e})}if(null===v.labelAlign&&delete v.labelAlign,v.encode){for(const t of a.qE)e.hasAxisPart(t)||delete v.encode[t];(0,l.xb)(v.encode)&&delete v.encode}const t=function(e,t){if(e)return(0,n.kJ)(e)&&!(0,s.G)(e)?e.map((e=>(0,r.oc)(e,t))).join(", "):e}(b,i);return{scale:g,orient:u,grid:!1,...t?{title:t}:{},...v,...!1===i.aria?{aria:!1}:{},zindex:(0,l.du)(y,0)}}}}function u(e){const{axes:t}=e.component,i=[];for(const n of o.Kz)if(t[n])for(const a of t[n])if(!a.get("disable")&&!a.get("gridScale")){const t="x"===n?"height":"width",a=e.getSizeSignalRef(t).signal;t!==a&&i.push({name:t,update:a})}return i}function g(e,t){const{x:i=[],y:n=[]}=e;return[...i.map((e=>p(e,"grid",t))),...n.map((e=>p(e,"grid",t))),...i.map((e=>p(e,"main",t))),...n.map((e=>p(e,"main",t)))].filter((e=>e))}},94968:(e,t,i)=>{"use strict";i.d(t,{t:()=>l,k:()=>d});var n=i(84151),a=i(59159),o=i(99185),r=i(77719);const s={disable:1,gridScale:1,scale:1,...n.zn,labelExpr:1,encode:1},l=(0,a.XP)(s);class d extends r.P{constructor(e={},t={},i=!1){super(),this.explicit=e,this.implicit=t,this.mainExtracted=i}clone(){return new d((0,a.OM)(this.explicit),(0,a.OM)(this.implicit),this.mainExtracted)}hasAxisPart(e){return!("axis"!==e&&("grid"===e||"title"===e?!this.get(e):!1===(t=this.get(e))||null===t));var t}hasOrientSignalRef(){return(0,o.Lo)(this.explicit.orient)}}},47664:(e,t,i)=>{"use strict";i.d(t,{mz:()=>d,sT:()=>c});var n=i(48823),a=i(49272),o=i(59159),r=i(99185),s=i(62334);function l(e,t,i,n){return Object.assign.apply(null,[{},...e.map((e=>{if("axisOrient"===e){const e="x"===i?"bottom":"left",a=t["x"===i?"axisBottom":"axisLeft"]||{},r=t["x"===i?"axisTop":"axisRight"]||{},l=new Set([...(0,o.XP)(a),...(0,o.XP)(r)]),d={};for(const t of l.values())d[t]={signal:`${n.signal} === "${e}" ? ${(0,s.t_)(a[t])} : ${(0,s.t_)(r[t])}`};return d}return t[e]}))])}function d(e,t,i,n){const s="band"===t?["axisDiscrete","axisBand"]:"point"===t?["axisDiscrete","axisPoint"]:(0,a.P6)(t)?["axisQuantitative"]:"time"===t||"utc"===t?["axisTemporal"]:[],d="x"===e?"axisX":"axisY",c=(0,r.Lo)(i)?"axisOrient":`axis${(0,o.Qs)(i)}`,h=[...s,...s.map((e=>d+e.substr(4)))],p=["axis",c,d];return{vlOnlyAxisConfig:l(h,n,e,i),vgAxisConfig:l(p,n,e,i),axisConfigStyle:f([...p,...h],n)}}function f(e,t){const i=[{}];for(const a of e){let e=t[a]?.style;if(e){e=(0,n.IX)(e);for(const n of e)i.push(t.style[n])}}return Object.assign.apply(null,i)}function c(e,t,i,n={}){const a=(0,s.v6)(e,i,t);if(void 0!==a)return{configFrom:"style",configValue:a};for(const t of["vlOnlyAxisConfig","vgAxisConfig","axisConfigStyle"])if(void 0!==n[t]?.[e])return{configFrom:t,configValue:n[t][e]};return{}}},4015:(e,t,i)=>{"use strict";i.d(t,{p:()=>r});var n=i(19387),a=i(7422),o=i(20705);function r(e,t,i){const{encoding:r,config:s}=e,l=(0,a.EA)(r[t])??(0,a.EA)(r[(0,n.Hy)(t)]),d=e.axis(t)||{},{format:f,formatType:c}=d;return(0,o.bt)(c)?{text:(0,o.Cd)({fieldOrDatumDef:l,field:"datum.value",format:f,formatType:c,config:s}),...i}:i}},40325:(e,t,i)=>{"use strict";i.d(t,{f:()=>m,z:()=>y});var n=i(84151),a=i(19387),o=i(7422),r=i(59159),s=i(99185),l=i(62334),d=i(87339),f=i(71693),c=i(77719),h=i(94968),p=i(47664),u=i(4015),g=i(23032);function m(e){return a.Kz.reduce(((t,i)=>(e.component.scales[i]&&(t[i]=[$(i,e)]),t)),{})}const b={bottom:"top",top:"bottom",left:"right",right:"left"};function y(e){const{axes:t,resolve:i}=e.component,n={top:0,bottom:0,right:0,left:0};for(const n of e.children){n.parseAxesAndHeaders();for(const a of(0,r.XP)(n.component.axes))i.axis[a]=(0,f.j)(e.component.resolve,a),"shared"===i.axis[a]&&(t[a]=v(t[a],n.component.axes[a]),t[a]||(i.axis[a]="independent",delete t[a]))}for(const o of a.Kz){for(const a of e.children)if(a.component.axes[o]){if("independent"===i.axis[o]){t[o]=(t[o]??[]).concat(a.component.axes[o]);for(const e of a.component.axes[o]){const{value:t,explicit:i}=e.getWithExplicit("orient");if(!(0,s.Lo)(t)){if(n[t]>0&&!i){const i=b[t];n[t]>n[i]&&e.set("orient",i,!1)}n[t]++}}}delete a.component.axes[o]}if("independent"===i.axis[o]&&t[o]&&t[o].length>1)for(const e of t[o])e.get("grid")&&!e.explicit.grid&&(e.implicit.grid=!1)}}function v(e,t){if(!e)return t.map((e=>e.clone()));{if(e.length!==t.length)return;const i=e.length;for(let n=0;n<i;n++){const i=e[n],a=t[n];if(!!i!=!!a)return;if(i&&a){const t=i.getWithExplicit("orient"),o=a.getWithExplicit("orient");if(t.explicit&&o.explicit&&t.value!==o.value)return;e[n]=_(i,a)}}}return e}function _(e,t){for(const i of h.t){const n=(0,c.fw)(e.getWithExplicit(i),t.getWithExplicit(i),i,"axis",((e,t)=>{switch(i){case"title":return(0,l.f)(e,t);case"gridScale":return{explicit:e.explicit,value:(0,r.du)(e.value,t.value)}}return(0,c.cT)(e,t,i,"axis")}));e.setWithExplicit(i,n)}return e}function x(e,t,i,n,a){if("disable"===t)return void 0!==i;switch(i=i||{},t){case"titleAngle":case"labelAngle":return e===((0,s.Lo)(i.labelAngle)?i.labelAngle:(0,r.LW)(i.labelAngle));case"values":return!!i.values;case"encode":return!!i.encoding||!!i.labelAngle;case"title":if(e===(0,g.Gq)(n,a))return!0}return e===i[t]}const w=new Set(["grid","translate","format","formatType","orient","labelExpr","tickCount","position","tickMinStep"]);function $(e,t){let i=t.axis(e);const a=new h.k,l=(0,o.EA)(t.encoding[e]),{mark:f,config:c}=t,m=i?.orient||c["x"===e?"axisX":"axisY"]?.orient||c.axis?.orient||(0,g.eh)(e),b=t.getScaleComponent(e).get("type"),y=(0,p.mz)(e,b,m,t.config),v=void 0!==i?!i:(0,p.sT)("disable",c.style,i?.style,y).configValue;if(a.set("disable",v,void 0!==i),v)return a;i=i||{};const _=(0,g.UI)(l,i,e,c.style,y),$={fieldOrDatumDef:l,axis:i,channel:e,model:t,scaleType:b,orient:m,labelAngle:_,mark:f,config:c};for(const o of h.t){const r=o in g.Dg?g.Dg[o]($):(0,n.xK)(o)?i[o]:void 0,l=void 0!==r,d=x(r,o,i,t,e);if(l&&d)a.set(o,r,d);else{const{configValue:e,configFrom:t}=(0,n.xK)(o)&&"values"!==o?(0,p.sT)(o,c.style,i.style,y):{},f=void 0!==e;l&&!f?a.set(o,r,d):("vgAxisConfig"!==t||w.has(o)&&f||(0,n.JX)(e)||(0,s.Lo)(e))&&a.set(o,e,!1)}}const k=i.encoding??{},T=n.qE.reduce(((i,n)=>{if(!a.hasAxisPart(n))return i;const o=(0,d.Q)(k[n]??{},t),s="labels"===n?u.p(t,e,o):o;return void 0===s||(0,r.xb)(s)||(i[n]={update:s}),i}),{});return(0,r.xb)(T)||a.set("encode",T,!!i.encoding||void 0!==i.labelAngle),a}},23032:(e,t,i)=>{"use strict";i.d(t,{Dg:()=>g,UI:()=>m,Fe:()=>y,hs:()=>v,eh:()=>_,Gq:()=>x});var n=i(48823),a=i(35647),o=i(19387),r=i(7422),s=i(49272),l=i(31021),d=i(46689),f=i(59159),c=i(99185),h=i(62334),p=i(20705),u=i(47664);const g={scale:({model:e,channel:t})=>e.scaleName(t),format:({fieldOrDatumDef:e,config:t,axis:i})=>{const{format:n,formatType:a}=i;return(0,p.Qc)(e,e.type,n,a,t,!0)},formatType:({axis:e,fieldOrDatumDef:t,scaleType:i})=>{const{formatType:n}=e;return(0,p.bH)(n,t,i)},grid:({fieldOrDatumDef:e,axis:t,scaleType:i})=>t.grid??function(e,t){return!(0,s.eO)(e)&&(0,r.VQ)(t)&&!(0,a.f$)(t?.bin)&&!(0,a.YK)(t?.bin)}(i,e),gridScale:({model:e,channel:t})=>function(e,t){const i="x"===t?"y":"x";if(e.getScaleComponent(i))return e.scaleName(i)}(e,t),labelAlign:({axis:e,labelAngle:t,orient:i,channel:n})=>e.labelAlign||v(t,i,n),labelAngle:({labelAngle:e})=>e,labelBaseline:({axis:e,labelAngle:t,orient:i,channel:n})=>e.labelBaseline||y(t,i,n),labelFlush:({axis:e,fieldOrDatumDef:t,channel:i})=>e.labelFlush??function(e,t){if("x"===t&&(0,f.r3)(["quantitative","temporal"],e))return!0}(t.type,i),labelOverlap:({axis:e,fieldOrDatumDef:t,scaleType:i})=>e.labelOverlap??function(e,t,i,a){if(i&&!(0,n.Kn)(a)||"nominal"!==e&&"ordinal"!==e)return"log"!==t&&"symlog"!==t||"greedy"}(t.type,i,(0,r.VQ)(t)&&!!t.timeUnit,(0,r.VQ)(t)?t.sort:void 0),orient:({orient:e})=>e,tickCount:({channel:e,model:t,axis:i,fieldOrDatumDef:n,scaleType:o})=>{const d="x"===e?"width":"y"===e?"height":void 0,c=d?t.getSizeSignalRef(d):void 0;return i.tickCount??function({fieldOrDatumDef:e,scaleType:t,size:i,values:n}){if(!n&&!(0,s.eO)(t)&&"log"!==t){if((0,r.VQ)(e)){if((0,a.f$)(e.bin))return{signal:`ceil(${i.signal}/10)`};if(e.timeUnit&&(0,f.r3)(["month","hours","day","quarter"],(0,l.Q8)(e.timeUnit)?.unit))return}return{signal:`ceil(${i.signal}/40)`}}}({fieldOrDatumDef:n,scaleType:o,size:c,values:i.values})},title:({axis:e,model:t,channel:i})=>{if(void 0!==e.title)return e.title;const n=x(t,i);if(void 0!==n)return n;const a=t.typedFieldDef(i),o="x"===i?"x2":"y2",s=t.fieldDef(o);return(0,h.tC)(a?[(0,r.be)(a)]:[],(0,r.VQ)(s)?[(0,r.be)(s)]:[])},values:({axis:e,fieldOrDatumDef:t})=>function(e,t){const i=e.values;return(0,n.kJ)(i)?(0,r.pq)(t,i):(0,c.Lo)(i)?i:void 0}(e,t),zindex:({axis:e,fieldOrDatumDef:t,mark:i})=>e.zindex??function(e,t){return"rect"===e&&(0,r.lK)(t)?1:0}(i,t)};function m(e,t,i,n,a){const s=t?.labelAngle;if(void 0!==s)return(0,c.Lo)(s)?s:(0,f.LW)(s);{const{configValue:s}=(0,u.sT)("labelAngle",n,t?.style,a);return void 0!==s?(0,f.LW)(s):i!==o.X||!(0,f.r3)([d.NI,d.z1],e.type)||(0,r.VQ)(e)&&e.timeUnit?void 0:270}}function b(e){return`(((${e.signal} % 360) + 360) % 360)`}function y(e,t,i,n){if(void 0!==e){if("x"===i){if((0,c.Lo)(e)){const i=b(e);return{signal:`(45 < ${i} && ${i} < 135) || (225 < ${i} && ${i} < 315) ? "middle" :(${i} <= 45 || 315 <= ${i}) === ${(0,c.Lo)(t)?`(${t.signal} === "top")`:"top"===t} ? "bottom" : "top"`}}if(45<e&&e<135||225<e&&e<315)return"middle";if((0,c.Lo)(t)){const i=e<=45||315<=e?"===":"!==";return{signal:`${t.signal} ${i} "top" ? "bottom" : "top"`}}return(e<=45||315<=e)==("top"===t)?"bottom":"top"}if((0,c.Lo)(e)){const i=b(e);return{signal:`${i} <= 45 || 315 <= ${i} || (135 <= ${i} && ${i} <= 225) ? ${n?'"middle"':"null"} : (45 <= ${i} && ${i} <= 135) === ${(0,c.Lo)(t)?`(${t.signal} === "left")`:"left"===t} ? "top" : "bottom"`}}if(e<=45||315<=e||135<=e&&e<=225)return n?"middle":null;if((0,c.Lo)(t)){const i=45<=e&&e<=135?"===":"!==";return{signal:`${t.signal} ${i} "left" ? "top" : "bottom"`}}return(45<=e&&e<=135)==("left"===t)?"top":"bottom"}}function v(e,t,i){if(void 0===e)return;const n="x"===i,a=n?0:90,o=n?"bottom":"left";if((0,c.Lo)(e)){const i=b(e);return{signal:`(${a?`(${i} + 90)`:i} % 180 === 0) ? ${n?null:'"center"'} :(${a} < ${i} && ${i} < ${180+a}) === ${(0,c.Lo)(t)?`(${t.signal} === "${o}")`:t===o} ? "left" : "right"`}}if((e+a)%180==0)return n?null:"center";if((0,c.Lo)(t)){const i=a<e&&e<180+a?"===":"!==";return{signal:`${t.signal} ${i} "${o}" ? "left" : "right"`}}return(a<e&&e<180+a)==(t===o)?"left":"right"}function _(e){return"x"===e?"bottom":"left"}function x(e,t){const i="x"===t?"x2":"y2",n=e.fieldDef(t),a=e.fieldDef(i),o=n?n.title:void 0,r=a?a.title:void 0;return o&&r?(0,h.BT)(o,r):o||r||(void 0!==o?o:void 0!==r?r:void 0)}},53031:(e,t,i)=>{"use strict";i.d(t,{F:()=>d});var n=i(56997),a=i(13586),o=i(43638),r=i(5846),s=i(82249),l=i(58694);function d(e,t,i,d,f){if((0,a.wf)(e))return new r.q(e,t,i,f);if((0,a.a3)(e))return new s.i(e,t,i,d,f);if((0,a.Gw)(e))return new l.g(e,t,i,d,f);if((0,a.o)(e))return new o.h(e,t,i,f);throw new Error(n.yw.invalidSpec(e))}},62334:(e,t,i)=>{"use strict";i.d(t,{fV:()=>d,cn:()=>f,vS:()=>h,uz:()=>p,t_:()=>u,f6:()=>g,Wi:()=>m,is:()=>b,Kt:()=>y,eq:()=>v,v6:()=>_,xJ:()=>x,tC:()=>w,BT:()=>$,f:()=>k});var n=i(48823),a=i(7422),o=i(77125),r=i(53918),s=i(59159),l=i(99185);function d(e){const t=(0,n.kJ)(e.condition)?e.condition.map(c):c(e.condition);return{...f(e),condition:t}}function f(e){if((0,o.T)(e)){const{expr:t,...i}=e;return{signal:t,...i}}return e}function c(e){if((0,o.T)(e)){const{expr:t,...i}=e;return{signal:t,...i}}return e}function h(e){if((0,o.T)(e)){const{expr:t,...i}=e;return{signal:t,...i}}return(0,l.Lo)(e)?e:void 0!==e?{value:e}:void 0}function p(e){return(0,l.Lo)(e)?e.signal:(0,n.m8)(e.value)}function u(e){return(0,l.Lo)(e)?e.signal:null==e?null:(0,n.m8)(e)}function g(e,t,i){for(const n of i){const i=y(n,t.markDef,t.config);void 0!==i&&(e[n]=h(i))}return e}function m(e){return[].concat(e.type,e.style??[])}function b(e,t,i,n={}){const{vgChannel:a,ignoreVgConfig:o}=n;return a&&void 0!==t[a]?t[a]:void 0!==t[e]?t[e]:!o||a&&a!==e?y(e,t,i,n):void 0}function y(e,t,i,{vgChannel:n}={}){return(0,s.du)(n?v(e,t,i.style):void 0,v(e,t,i.style),n?i[t.type][n]:void 0,i[t.type][e],n?i.mark[n]:i.mark[e])}function v(e,t,i){return _(e,m(t),i)}function _(e,t,i){let a;t=(0,n.IX)(t);for(const n of t){const t=i[n];t&&void 0!==t[e]&&(a=t[e])}return a}function x(e,t){return(0,n.IX)(e).reduce(((e,i)=>(e.field.push((0,a.jd)(i,t)),e.order.push(i.sort??"ascending"),e)),{field:[],order:[]})}function w(e,t){const i=[...e];return t.forEach((e=>{for(const t of i)if((0,s.vZ)(t,e))return;i.push(e)})),i}function $(e,t){return(0,s.vZ)(e,t)||!t?e:e?[...(0,n.IX)(e),...(0,n.IX)(t)].join(", "):t}function k(e,t){const i=e.value,n=t.value;if(null==i||null===n)return{explicit:e.explicit,value:null};if(((0,r.G)(i)||(0,l.Lo)(i))&&((0,r.G)(n)||(0,l.Lo)(n)))return{explicit:e.explicit,value:$(i,n)};if((0,r.G)(i)||(0,l.Lo)(i))return{explicit:e.explicit,value:i};if((0,r.G)(n)||(0,l.Lo)(n))return{explicit:e.explicit,value:n};if(!((0,r.G)(i)||(0,l.Lo)(i)||(0,r.G)(n)||(0,l.Lo)(n)))return{explicit:e.explicit,value:w(i,n)};throw new Error("It should never reach here")}},6376:(e,t,i)=>{"use strict";i.d(t,{M:()=>g});var n=i(48823),a=i(19387),o=i(7422),r=i(52262),s=i(56997),l=i(18819),d=i(60169),f=i(84028),c=i(59159),h=i(53031),p=i(25665),u=i(94380);function g(e,t={}){t.logger&&s.t8(t.logger),t.fieldTitle&&o.aD(t.fieldTitle);try{const i=(0,r.py)((0,n.fE)(t.config,e.config)),g=(0,l.F)(e,i),m=(0,h.F)(g,null,"",void 0,i);return m.parse(),(0,u.Ux)(m.component.data,m),{spec:function(e,t,i={},n){const a=e.config?(0,r.dC)(e.config):void 0,o=[].concat(e.assembleSelectionData([]),(0,p.U)(e.component.data,i)),s=e.assembleProjections(),l=e.assembleTitle(),f=e.assembleGroupStyle(),c=e.assembleGroupEncodeEntry(!0);let h=e.assembleLayoutSignals();h=h.filter((e=>"width"!==e.name&&"height"!==e.name||void 0===e.value||(t[e.name]=+e.value,!1)));const{params:u,...g}=t;return{$schema:"https://vega.github.io/schema/vega/v5.json",...e.description?{description:e.description}:{},...g,...l?{title:l}:{},...f?{style:f}:{},...c?{encode:{update:c}}:{},data:o,...s.length>0?{projections:s}:{},...e.assembleGroup([...h,...e.assembleSelectionTopLevelSignals([]),...(0,d.h)(u)]),...a?{config:a}:{},...n?{usermeta:n}:{}}}(m,function(e,t,i,o){const r=o.component.layoutSize.get("width"),l=o.component.layoutSize.get("height");if(void 0===t?(t={type:"pad"},o.hasAxisOrientSignalRef()&&(t.resize=!0)):(0,n.HD)(t)&&(t={type:t}),r&&l&&(0,f.pw)(t.type))if("step"===r&&"step"===l)s.ZK(s.yw.droppingFit()),t.type="pad";else if("step"===r||"step"===l){const e="step"===r?"width":"height";s.ZK(s.yw.droppingFit((0,a.x1)(e)));const i="width"===e?"height":"width";t.type=(0,f.pQ)(i)}return{...1===(0,c.XP)(t).length&&t.type?"pad"===t.type?{}:{autosize:t.type}:{autosize:t},...(0,f.Xf)(i,!1),...(0,f.Xf)(e,!0)}}(e,g.autosize,i,m),e.datasets,e.usermeta),normalized:g}}finally{t.logger&&s.mc(),t.fieldTitle&&o.n7()}}},43638:(e,t,i)=>{"use strict";i.d(t,{h:()=>c});var n=i(56997),a=i(13586),o=i(59159),r=i(53031),s=i(19796),l=i(37042),d=i(13922),f=i(3496);class c extends f.Hn{constructor(e,t,i,a){super(e,"concat",t,i,a,e.resolve),"shared"!==e.resolve?.axis?.x&&"shared"!==e.resolve?.axis?.y||n.ZK(n.yw.CONCAT_CANNOT_SHARE_AXIS),this.children=this.getChildren(e).map(((e,t)=>(0,r.F)(e,this,this.getName(`concat_${t}`),void 0,a)))}parseData(){this.component.data=(0,s.IR)(this);for(const e of this.children)e.parseData()}parseSelections(){this.component.selection={};for(const e of this.children){e.parseSelections();for(const t of(0,o.XP)(e.component.selection))this.component.selection[t]=e.component.selection[t]}}parseMarkGroup(){for(const e of this.children)e.parseMarkGroup()}parseAxesAndHeaders(){for(const e of this.children)e.parseAxesAndHeaders()}getChildren(e){return(0,a.z_)(e)?e.vconcat:(0,a.B)(e)?e.hconcat:e.concat}parseLayoutSize(){(0,d.RO)(this)}parseAxisGroup(){return null}assembleSelectionTopLevelSignals(e){return this.children.reduce(((e,t)=>t.assembleSelectionTopLevelSignals(e)),e)}assembleSignals(){return this.children.forEach((e=>e.assembleSignals())),[]}assembleLayoutSignals(){const e=(0,l.nh)(this);for(const t of this.children)e.push(...t.assembleLayoutSignals());return e}assembleSelectionData(e){return this.children.reduce(((e,t)=>t.assembleSelectionData(e)),e)}assembleMarks(){return this.children.map((e=>{const t=e.assembleTitle(),i=e.assembleGroupStyle(),n=e.assembleGroupEncodeEntry(!1);return{type:"group",name:e.getName("group"),...t?{title:t}:{},...i?{style:i}:{},...n?{encode:{update:n}}:{},...e.assembleGroup()}}))}assembleDefaultLayout(){const e=this.layout.columns;return{...null!=e?{columns:e}:{},bounds:"full",align:"each"}}}},64321:(e,t,i)=>{"use strict";i.d(t,{a:()=>f});var n=i(24430),a=i(19387),o=i(7422),r=i(56997),s=i(59159),l=i(3496),d=i(80004);class f extends d.M{constructor(e,t,i){super(e),this.dimensions=t,this.measures=i}clone(){return new f(null,new Set(this.dimensions),(0,s.OM)(this.measures))}get groupBy(){return this.dimensions}static makeFromEncoding(e,t){let i=!1;t.forEachFieldDef((e=>{e.aggregate&&(i=!0)}));const r={},d=new Set;return i?(t.forEachFieldDef(((e,i)=>{const{aggregate:s,field:f}=e;if(s)if("count"===s)r["*"]??(r["*"]={}),r["*"].count=new Set([(0,o.jd)(e,{forAs:!0})]);else{if((0,n.B5)(s)||(0,n.Oc)(s)){const e=(0,n.B5)(s)?"argmin":"argmax",t=s[e];r[t]??(r[t]={}),r[t][e]=new Set([(0,o.jd)({op:e,field:t},{forAs:!0})])}else r[f]??(r[f]={}),r[f][s]=new Set([(0,o.jd)(e,{forAs:!0})]);(0,a.rP)(i)&&"unaggregated"===t.scaleDomain(i)&&(r[f]??(r[f]={}),r[f].min=new Set([(0,o.jd)({field:f,aggregate:"min"},{forAs:!0})]),r[f].max=new Set([(0,o.jd)({field:f,aggregate:"max"},{forAs:!0})]))}else!function(e,t,i,n){const r=(0,l.gs)(n)?n.encoding[(0,a.Hy)(t)]:void 0;if((0,o.tV)(i)&&(0,l.gs)(n)&&(0,o.wl)(i,r,n.markDef,n.config))e.add((0,o.jd)(i,{})),e.add((0,o.jd)(i,{suffix:"end"})),i.bin&&(0,o.Wd)(i,t)&&e.add((0,o.jd)(i,{binSuffix:"range"}));else if((0,a.E0)(t)){const i=(0,a.xx)(t);e.add(n.getName(i))}else e.add((0,o.jd)(i))}(d,i,e,t)})),d.size+(0,s.XP)(r).length===0?null:new f(e,d,r)):null}static makeFromTransform(e,t){const i=new Set,n={};for(const e of t.aggregate){const{op:t,field:i,as:a}=e;t&&("count"===t?(n["*"]??(n["*"]={}),n["*"].count=new Set([a||(0,o.jd)(e,{forAs:!0})])):(n[i]??(n[i]={}),n[i][t]=new Set([a||(0,o.jd)(e,{forAs:!0})])))}for(const e of t.groupby??[])i.add(e);return i.size+(0,s.XP)(n).length===0?null:new f(e,i,n)}merge(e){return(0,s.$x)(this.dimensions,e.dimensions)?(function(e,t){for(const i of(0,s.XP)(t)){const n=t[i];for(const t of(0,s.XP)(n))i in e?e[i][t]=new Set([...e[i][t]??[],...n[t]]):e[i]={[t]:n[t]}}}(this.measures,e.measures),!0):(r.fF("different dimensions, cannot merge"),!1)}addDimensions(e){e.forEach(this.dimensions.add,this.dimensions)}dependentFields(){return new Set([...this.dimensions,...(0,s.XP)(this.measures)])}producedFields(){const e=new Set;for(const t of(0,s.XP)(this.measures))for(const i of(0,s.XP)(this.measures[t])){const n=this.measures[t][i];0===n.size?e.add(`${i}_${t}`):n.forEach(e.add,e)}return e}hash(){return`Aggregate ${(0,s.vp)({dimensions:this.dimensions,measures:this.measures})}`}assemble(){const e=[],t=[],i=[];for(const n of(0,s.XP)(this.measures))for(const a of(0,s.XP)(this.measures[n]))for(const o of this.measures[n][a])i.push(o),e.push(a),t.push("*"===n?null:(0,s.qO)(n));return{type:"aggregate",groupby:[...this.dimensions].map(s.qO),ops:e,fields:t,as:i}}}},25665:(e,t,i)=>{"use strict";i.d(t,{L:()=>q,U:()=>P});var n=i(35594),a=i(64321),o=i(66203),r=i(40253),s=i(80004),l=i(49152),d=i(80377),f=i(4517),c=i(65006),h=i(78352),p=i(53663),u=i(99234),g=i(14223),m=i(20419),b=i(86235),y=i(14526),v=i(24735),_=i(74284),x=i(12081),w=i(72489),$=i(88234),k=i(12850),T=i(51448),D=i(21846),O=i(80223),S=i(36409),R=i(86552),A=i(54514),E=i(18147);function F(e){let t=0;return function i(F,q){if(F instanceof S.l&&!F.isGenerator&&!(0,n.F4)(F.data)&&(e.push(q),q={name:null,source:q.name,transform:[]}),F instanceof u.$Y&&(F.parent instanceof S.l&&!q.source?(q.format={...q.format??{},parse:F.assembleFormatParse()},q.transform.push(...F.assembleTransforms(!0))):q.transform.push(...F.assembleTransforms())),F instanceof d.v)return q.name||(q.name="data_"+t++),!q.source||q.transform.length>0?(e.push(q),F.data=q.name):F.data=q.source,void e.push(...F.assemble());switch((F instanceof b.E||F instanceof O.I||F instanceof c.R||F instanceof f.o||F instanceof r.P||F instanceof m.b||F instanceof a.a||F instanceof w.C||F instanceof E.I||F instanceof _.k||F instanceof p.t||F instanceof h.j||F instanceof l.h||F instanceof x.y||F instanceof $.g||F instanceof k.P||F instanceof y.T||F instanceof D.A||F instanceof T.X)&&q.transform.push(F.assemble()),(F instanceof o.k||F instanceof A.g||F instanceof v.Z||F instanceof R.F||F instanceof g.U)&&q.transform.push(...F.assemble()),F instanceof s.Z&&(q.source&&0===q.transform.length?F.setSource(q.source):F.parent instanceof s.Z?F.setSource(q.name):(q.name||(q.name="data_"+t++),F.setSource(q.name),1===F.numChildren()&&(e.push(q),q={name:null,source:q.name,transform:[]}))),F.numChildren()){case 0:F instanceof s.Z&&(!q.source||q.transform.length>0)&&e.push(q);break;case 1:i(F.children[0],q);break;default:{q.name||(q.name="data_"+t++);let n=q.name;!q.source||q.transform.length>0?e.push(q):n=q.source;for(const e of F.children)i(e,{name:null,source:n,transform:[]});break}}}}function q(e){const t=[],i=F(t);for(const t of e.children)i(t,{source:e.name,name:null,transform:[]});return t}function P(e,t){const i=[],n=F(i);let a=0;for(const t of e.sources){t.hasName()||(t.dataName="source_"+a++);const e=t.assemble();n(t,e)}for(const e of i)0===e.transform.length&&delete e.transform;let o=0;for(const[e,t]of i.entries())0!==(t.transform??[]).length||t.source||i.splice(o++,0,i.splice(e,1)[0]);for(const t of i)for(const i of t.transform??[])"lookup"===i.type&&(i.from=e.outputNodes[i.from].getSource());for(const e of i)e.name in t&&(e.values=t[e.name]);return i}},66203:(e,t,i)=>{"use strict";i.d(t,{Z:()=>p,k:()=>g});var n=i(48823),a=i(35647),o=i(7422),r=i(59159),s=i(20705),l=i(3496),d=i(77974),f=i(80004);function c(e,t,i,n){if((0,o.Wd)(t,i)){const a=(0,l.gs)(e)?e.axis(i)??e.legend(i)??{}:{},r=(0,o.jd)(t,{expr:"datum"}),d=(0,o.jd)(t,{expr:"datum",binSuffix:"end"});return{formulaAs:(0,o.jd)(t,{binSuffix:"range",forAs:!0}),formula:(0,s.w1)(r,d,a.format,a.formatType,n)}}return{}}function h(e,t){return`${(0,a.iT)(e)}_${t}`}function p(e,t,i){const n=h((0,o.kC)(i,void 0)??{},t);return e.getName(`${n}_bins`)}function u(e,t,i){let r,s;r=function(e){return"as"in e}(e)?(0,n.HD)(e.as)?[e.as,`${e.as}_end`]:[e.as[0],e.as[1]]:[(0,o.jd)(e,{forAs:!0}),(0,o.jd)(e,{binSuffix:"end",forAs:!0})];const l={...(0,o.kC)(t,void 0)},f=h(l,e.field),{signal:c,extentSignal:p}=function(e,t){return{signal:e.getName(`${t}_bins`),extentSignal:e.getName(`${t}_extent`)}}(i,f);if((0,a.Sx)(l.extent)){const e=l.extent;s=(0,d.zg)(i,e.param,e),delete l.extent}return{key:f,binComponent:{bin:l,field:e.field,as:[r],...c?{signal:c}:{},...p?{extentSignal:p}:{},...s?{span:s}:{}}}}class g extends f.M{constructor(e,t){super(e),this.bins=t}clone(){return new g(null,(0,r.OM)(this.bins))}static makeFromEncoding(e,t){const i=t.reduceFieldDef(((e,i,n)=>{if((0,o.tV)(i)&&(0,a.f$)(i.bin)){const{key:a,binComponent:o}=u(i,i.bin,t);e[a]={...o,...e[a],...c(t,i,n,t.config)}}return e}),{});return(0,r.xb)(i)?null:new g(e,i)}static makeFromTransform(e,t,i){const{key:n,binComponent:a}=u(t,t.bin,i);return new g(e,{[n]:a})}merge(e,t){for(const i of(0,r.XP)(e.bins))i in this.bins?(t(e.bins[i].signal,this.bins[i].signal),this.bins[i].as=(0,r.Tw)([...this.bins[i].as,...e.bins[i].as],r.vp)):this.bins[i]=e.bins[i];for(const t of e.children)e.removeChild(t),t.parent=this;e.remove()}producedFields(){return new Set((0,r.kd)(this.bins).map((e=>e.as)).flat(2))}dependentFields(){return new Set((0,r.kd)(this.bins).map((e=>e.field)))}hash(){return`Bin ${(0,r.vp)(this.bins)}`}assemble(){return(0,r.kd)(this.bins).flatMap((e=>{const t=[],[i,...n]=e.as,{extent:s,...l}=e.bin,d={type:"bin",field:(0,r.qO)(e.field),as:i,signal:e.signal,...(0,a.Sx)(s)?{extent:null}:{extent:s},...e.span?{span:{signal:`span(${e.span})`}}:{},...l};!s&&e.extentSignal&&(t.push({type:"extent",field:(0,r.qO)(e.field),signal:e.extentSignal}),d.extent={signal:e.extentSignal}),t.push(d);for(const e of n)for(let n=0;n<2;n++)t.push({type:"formula",expr:(0,o.jd)({field:i[n]},{expr:"datum"}),as:e[n]});return e.formula&&t.push({type:"formula",expr:e.formula,as:e.formulaAs}),t}))}}},40253:(e,t,i)=>{"use strict";i.d(t,{P:()=>d,m:()=>f});var n=i(7422),a=i(21066),o=i(50579),r=i(59159),s=i(80004),l=i(65752);class d extends s.M{constructor(e,t){super(e),this.transform=t,this._dependentFields=(0,l.u)(this.transform.calculate)}clone(){return new d(null,(0,r.OM)(this.transform))}static parseAllForSortIndex(e,t){return t.forEachFieldDef(((t,i)=>{if((0,n.oH)(t)&&(0,o.es)(t.sort)){const{field:n,timeUnit:o}=t,r=t.sort,s=r.map(((e,t)=>`${(0,a.Gn)({field:n,timeUnit:o,equal:e})} ? ${t} : `)).join("")+r.length;e=new d(e,{calculate:s,as:f(t,i,{forAs:!0})})}})),e}producedFields(){return new Set([this.transform.as])}dependentFields(){return this._dependentFields}assemble(){return{type:"formula",expr:this.transform.calculate,as:this.transform.as}}hash(){return`Calculate ${(0,r.vp)(this.transform)}`}}function f(e,t,i){return(0,n.jd)(e,{prefix:t,suffix:"sort_index",...i??{}})}},80004:(e,t,i)=>{"use strict";i.d(t,{M:()=>o,Z:()=>r});var n=i(56997),a=i(59159);class o{constructor(e,t){this.debugName=t,this._children=[],this._parent=null,e&&(this.parent=e)}clone(){throw new Error("Cannot clone node")}get parent(){return this._parent}set parent(e){this._parent=e,e&&e.addChild(this)}get children(){return this._children}numChildren(){return this._children.length}addChild(e,t){this._children.includes(e)?n.ZK(n.yw.ADD_SAME_CHILD_TWICE):void 0!==t?this._children.splice(t,0,e):this._children.push(e)}removeChild(e){const t=this._children.indexOf(e);return this._children.splice(t,1),t}remove(){let e=this._parent.removeChild(this);for(const t of this._children)t._parent=this._parent,this._parent.addChild(t,e++)}insertAsParentOf(e){const t=e.parent;t.removeChild(this),this.parent=t,e.parent=this}swapWithParent(){const e=this._parent,t=e.parent;for(const t of this._children)t.parent=e;this._children=[],e.removeChild(this),e.parent.removeChild(e),this.parent=t,e.parent=this}}class r extends o{constructor(e,t,i,n){super(e,t),this.type=i,this.refCounts=n,this._source=this._name=t,this.refCounts&&!(this._name in this.refCounts)&&(this.refCounts[this._name]=0)}clone(){const e=new this.constructor;return e.debugName=`clone_${this.debugName}`,e._source=this._source,e._name=`clone_${this._name}`,e.type=this.type,e.refCounts=this.refCounts,e.refCounts[e._name]=0,e}dependentFields(){return new Set}producedFields(){return new Set}hash(){return void 0===this._hash&&(this._hash=`Output ${(0,a.EL)()}`),this._hash}getSource(){return this.refCounts[this._name]++,this._source}isRequired(){return!!this.refCounts[this._name]}setSource(e){this._source=e}}},49152:(e,t,i)=>{"use strict";i.d(t,{h:()=>o});var n=i(59159),a=i(80004);class o extends a.M{constructor(e,t){super(e),this.transform=t,this.transform=(0,n.OM)(t);const i=this.transform.as??[void 0,void 0];this.transform.as=[i[0]??"value",i[1]??"density"]}clone(){return new o(null,(0,n.OM)(this.transform))}dependentFields(){return new Set([this.transform.density,...this.transform.groupby??[]])}producedFields(){return new Set(this.transform.as)}hash(){return`DensityTransform ${(0,n.vp)(this.transform)}`}assemble(){const{density:e,...t}=this.transform;return{type:"kde",field:e,...t}}}},65752:(e,t,i)=>{"use strict";i.d(t,{u:()=>r});var n=i(25693);function a(e){const t=[];return"Identifier"===e.type?[e.name]:"Literal"===e.type?[e.value]:("MemberExpression"===e.type&&(t.push(...a(e.object)),t.push(...a(e.property))),t)}function o(e){return"MemberExpression"===e.object.type?o(e.object):"datum"===e.object.name}function r(e){const t=(0,n.Qc)(e),i=new Set;return t.visit((e=>{"MemberExpression"===e.type&&o(e)&&i.add(a(e).slice(1).join("."))})),i}},80377:(e,t,i)=>{"use strict";i.d(t,{v:()=>m});var n=i(48823),a=i(35647),o=i(19387),r=i(7422),s=i(56997),l=i(49272),d=i(50579),f=i(59159),c=i(99185),h=i(50429),p=i(53245),u=i(40253),g=i(80004);class m extends g.M{constructor(e,t,i,s){super(e),this.model=t,this.name=i,this.data=s;for(const e of o.tD){const i=t.facet[e];if(i){const{bin:o,sort:s}=i;this[e]={name:t.getName(`${e}_domain`),fields:[(0,r.jd)(i),...(0,a.f$)(o)?[(0,r.jd)(i,{binSuffix:"end"})]:[]],...(0,d.R_)(s)?{sortField:s}:(0,n.kJ)(s)?{sortIndexField:(0,u.m)(i,e)}:{}}}}this.childModel=t.child}hash(){let e="Facet";for(const t of o.tD)this[t]&&(e+=` ${t.charAt(0)}:${(0,f.vp)(this[t])}`);return e}get fields(){const e=[];for(const t of o.tD)this[t]?.fields&&e.push(...this[t].fields);return e}dependentFields(){const e=new Set(this.fields);for(const t of o.tD)this[t]&&(this[t].sortField&&e.add(this[t].sortField.field),this[t].sortIndexField&&e.add(this[t].sortIndexField));return e}producedFields(){return new Set}getSource(){return this.name}getChildIndependentFieldsWithStep(){const e={};for(const t of o.Kz){const i=this.childModel.component.scales[t];if(i&&!i.merged){const n=i.get("type"),a=i.get("range");if((0,l.eO)(n)&&(0,c.GC)(a)){const i=(0,p.Bd)(this.childModel,t),n=(0,p.Ue)(i);n?e[t]=n:s.ZK(s.yw.unknownField(t))}}}return e}assembleRowColumnHeaderData(e,t,i){const n={row:"y",column:"x",facet:void 0}[e],a=[],o=[],s=[];n&&i&&i[n]&&(t?(a.push(`distinct_${i[n]}`),o.push("max")):(a.push(i[n]),o.push("distinct")),s.push(`distinct_${i[n]}`));const{sortField:l,sortIndexField:f}=this[e];if(l){const{op:e=d.Az,field:t}=l;a.push(t),o.push(e),s.push((0,r.jd)(l,{forAs:!0}))}else f&&(a.push(f),o.push("max"),s.push(f));return{name:this[e].name,source:t??this.data,transform:[{type:"aggregate",groupby:this[e].fields,...a.length?{fields:a,ops:o,as:s}:{}}]}}assembleFacetHeaderData(e){const{columns:t}=this.model.layout,{layoutHeaders:i}=this.model.component,n=[],a={};for(const e of h.f){for(const t of h.z){const n=(i[e]&&i[e][t])??[];for(const t of n)if(t.axes?.length>0){a[e]=!0;break}}if(a[e]){const i=`length(data("${this.facet.name}"))`,a="row"===e?t?{signal:`ceil(${i} / ${t})`}:1:t?{signal:`min(${i}, ${t})`}:{signal:i};n.push({name:`${this.facet.name}_${e}`,transform:[{type:"sequence",start:0,stop:a}]})}}const{row:o,column:r}=a;return(o||r)&&n.unshift(this.assembleRowColumnHeaderData("facet",null,e)),n}assemble(){const e=[];let t=null;const i=this.getChildIndependentFieldsWithStep(),{column:n,row:a,facet:r}=this;if(n&&a&&(i.x||i.y)){t=`cross_${this.column.name}_${this.row.name}`;const n=[].concat(i.x??[],i.y??[]),a=n.map((()=>"distinct"));e.push({name:t,source:this.data,transform:[{type:"aggregate",groupby:this.fields,fields:n,ops:a}]})}for(const n of[o.aC,o.rn])this[n]&&e.push(this.assembleRowColumnHeaderData(n,t,i));if(r){const t=this.assembleFacetHeaderData(i);t&&e.push(...t)}return e}}},4517:(e,t,i)=>{"use strict";i.d(t,{o:()=>s});var n=i(59159),a=i(84879),o=i(80004),r=i(65752);class s extends o.M{constructor(e,t,i){super(e),this.model=t,this.filter=i,this.expr=(0,a.t)(this.model,this.filter,this),this._dependentFields=(0,r.u)(this.expr)}clone(){return new s(null,this.model,(0,n.OM)(this.filter))}dependentFields(){return this._dependentFields}producedFields(){return new Set}assemble(){return{type:"filter",expr:this.expr}}hash(){return`Filter ${this.expr}`}}},65006:(e,t,i)=>{"use strict";i.d(t,{R:()=>f});var n=i(19387),a=i(7422),o=i(78666),r=i(49272),s=i(59159),l=i(62334),d=i(80004);class f extends d.M{constructor(e,t){super(e),this.filter=t}clone(){return new f(null,{...this.filter})}static make(e,t){const{config:i,mark:a,markDef:d}=t;if("filter"!==(0,l.is)("invalid",d,i))return null;const c=t.reduceFieldDef(((e,i,s)=>{const l=(0,n.rP)(s)&&t.getScaleComponent(s);if(l){const t=l.get("type");(0,r.W8)(t)&&"count"!==i.aggregate&&!(0,o.hx)(a)&&(e[i.field]=i)}return e}),{});return(0,s.XP)(c).length?new f(e,c):null}dependentFields(){return new Set((0,s.XP)(this.filter))}producedFields(){return new Set}hash(){return`FilterInvalid ${(0,s.vp)(this.filter)}`}assemble(){const e=(0,s.XP)(this.filter).reduce(((e,t)=>{const i=this.filter[t],n=(0,a.jd)(i,{expr:"datum"});return null!==i&&("temporal"===i.type?e.push(`(isDate(${n}) || (isValid(${n}) && isFinite(+${n})))`):"quantitative"===i.type&&(e.push(`isValid(${n})`),e.push(`isFinite(+${n})`))),e}),[]);return e.length>0?{type:"filter",expr:e.join(" && ")}:null}}},78352:(e,t,i)=>{"use strict";i.d(t,{j:()=>o});var n=i(59159),a=i(80004);class o extends a.M{constructor(e,t){super(e),this.transform=t,this.transform=(0,n.OM)(t);const{flatten:i,as:a=[]}=this.transform;this.transform.as=i.map(((e,t)=>a[t]??e))}clone(){return new o(this.parent,(0,n.OM)(this.transform))}dependentFields(){return new Set(this.transform.flatten)}producedFields(){return new Set(this.transform.as)}hash(){return`FlattenTransform ${(0,n.vp)(this.transform)}`}assemble(){const{flatten:e,as:t}=this.transform;return{type:"flatten",fields:e,as:t}}}},53663:(e,t,i)=>{"use strict";i.d(t,{t:()=>o});var n=i(59159),a=i(80004);class o extends a.M{constructor(e,t){super(e),this.transform=t,this.transform=(0,n.OM)(t);const i=this.transform.as??[void 0,void 0];this.transform.as=[i[0]??"key",i[1]??"value"]}clone(){return new o(null,(0,n.OM)(this.transform))}dependentFields(){return new Set(this.transform.fold)}producedFields(){return new Set(this.transform.as)}hash(){return`FoldTransform ${(0,n.vp)(this.transform)}`}assemble(){const{fold:e,as:t}=this.transform;return{type:"fold",fields:e,as:t}}}},99234:(e,t,i)=>{"use strict";i.d(t,{Bz:()=>_,$v:()=>x,FZ:()=>w,$Y:()=>$});var n=i(48823),a=i(24430),o=i(19387),r=i(7422),s=i(35594),l=i(62343),d=i(56997),f=i(71644),c=i(78666),h=i(21066),p=i(50579),u=i(59159),g=i(62334),m=i(3496),b=i(77719),y=i(80004);function v(e){return"'"===e[0]&&"'"===e[e.length-1]||'"'===e[0]&&'"'===e[e.length-1]?e.slice(1,-1):e}function _(e){const t={};return(0,f.XM)(e.filter,(e=>{if((0,h.Ul)(e)){let i=null;(0,h.rC)(e)?i=(0,g.cn)(e.equal):(0,h.lk)(e)?i=(0,g.cn)(e.lte):(0,h.VM)(e)?i=(0,g.cn)(e.lt):(0,h.x3)(e)?i=(0,g.cn)(e.gt):(0,h.SR)(e)?i=(0,g.cn)(e.gte):(0,h.NM)(e)?i=e.range[0]:(0,h.Cy)(e)&&(i=(e.oneOf??e.in)[0]),i&&((0,l.v9)(i)?t[e.field]="date":(0,n.hj)(i)?t[e.field]="number":(0,n.HD)(i)&&(t[e.field]="string")),e.timeUnit&&(t[e.field]="date")}})),t}function x(e){const t={};function i(e){(0,r.vc)(e)?t[e.field]="date":"quantitative"===e.type&&(0,a.X1)(e.aggregate)?t[e.field]="number":(0,u.uD)(e.field)>1?e.field in t||(t[e.field]="flatten"):(0,r.oH)(e)&&(0,p.R_)(e.sort)&&(0,u.uD)(e.sort.field)>1&&(e.sort.field in t||(t[e.sort.field]="flatten"))}if(((0,m.gs)(e)||(0,m.hr)(e))&&e.forEachFieldDef(((t,n)=>{if((0,r.tV)(t))i(t);else{const a=(0,o.VY)(n),r=e.fieldDef(a);i({...t,type:r.type})}})),(0,m.gs)(e)){const{mark:i,markDef:n,encoding:a}=e;if((0,c.hx)(i)&&!e.encoding.order){const e=a["horizontal"===n.orient?"y":"x"];(0,r.VQ)(e)&&"quantitative"===e.type&&!(e.field in t)&&(t[e.field]="number")}}return t}function w(e){const t={};if((0,m.gs)(e)&&e.component.selection)for(const i of(0,u.XP)(e.component.selection)){const n=e.component.selection[i];for(const e of n.project.items)!e.channel&&(0,u.uD)(e.field)>1&&(t[e.field]="flatten")}return t}class $ extends y.M{constructor(e,t){super(e),this._parse=t}clone(){return new $(null,(0,u.OM)(this._parse))}hash(){return`Parse ${(0,u.vp)(this._parse)}`}static makeExplicit(e,t,i){let n={};const a=t.data;return!(0,s.xD)(a)&&a&&a.format&&a.format.parse&&(n=a.format.parse),this.makeWithAncestors(e,n,{},i)}static makeWithAncestors(e,t,i,n){for(const e of(0,u.XP)(i)){const t=n.getWithExplicit(e);void 0!==t.value&&(t.explicit||t.value===i[e]||"derived"===t.value||"flatten"===i[e]?delete i[e]:d.ZK(d.yw.differentParse(e,i[e],t.value)))}for(const e of(0,u.XP)(t)){const i=n.get(e);void 0!==i&&(i===t[e]?delete t[e]:d.ZK(d.yw.differentParse(e,t[e],i)))}const a=new b.P(t,i);n.copyAll(a);const o={};for(const e of(0,u.XP)(a.combine())){const t=a.get(e);null!==t&&(o[e]=t)}return 0===(0,u.XP)(o).length||n.parseNothing?null:new $(e,o)}get parse(){return this._parse}merge(e){this._parse={...this._parse,...e.parse},e.remove()}assembleFormatParse(){const e={};for(const t of(0,u.XP)(this._parse)){const i=this._parse[t];1===(0,u.uD)(t)&&(e[t]=i)}return e}producedFields(){return new Set((0,u.XP)(this._parse))}dependentFields(){return new Set((0,u.XP)(this._parse))}assembleTransforms(e=!1){return(0,u.XP)(this._parse).filter((t=>!e||(0,u.uD)(t)>1)).map((e=>{const t=function(e,t){const i=(0,u.br)(e);return"number"===t?`toNumber(${i})`:"boolean"===t?`toBoolean(${i})`:"string"===t?`toString(${i})`:"date"===t?`toDate(${i})`:"flatten"===t?i:t.startsWith("date:")?`timeParse(${i},'${v(t.slice(5,t.length))}')`:t.startsWith("utc:")?`utcParse(${i},'${v(t.slice(4,t.length))}')`:(d.ZK(d.yw.unrecognizedParse(t)),null)}(e,this._parse[e]);return t?{type:"formula",expr:t,as:(0,u.BX)(e)}:null})).filter((e=>null!==e))}}},14223:(e,t,i)=>{"use strict";i.d(t,{U:()=>d});var n=i(48823),a=i(19387),o=i(7422),r=i(46689),s=i(59159),l=i(80004);class d extends l.M{constructor(e,t,i,n){super(e),this.fields=t,this.geojson=i,this.signal=n}clone(){return new d(null,(0,s.OM)(this.fields),this.geojson,this.signal)}static parseAll(e,t){if(t.component.projection&&!t.component.projection.isFit)return e;let i=0;for(const n of[[a.Xs,a.y],[a.NG,a.VO]]){const a=n.map((e=>{const i=(0,o.EA)(t.encoding[e]);return(0,o.VQ)(i)?i.field:(0,o.Iu)(i)?{expr:`${i.datum}`}:(0,o.kJ)(i)?{expr:`${i.value}`}:void 0}));(a[0]||a[1])&&(e=new d(e,a,null,t.getName("geojson_"+i++)))}if(t.channelHasField(a.X3)){const n=t.typedFieldDef(a.X3);n.type===r.zb&&(e=new d(e,null,n.field,t.getName("geojson_"+i++)))}return e}dependentFields(){const e=(this.fields??[]).filter(n.HD);return new Set([...this.geojson?[this.geojson]:[],...e])}producedFields(){return new Set}hash(){return`GeoJSON ${this.geojson} ${this.signal} ${(0,s.vp)(this.fields)}`}assemble(){return[...this.geojson?[{type:"filter",expr:`isValid(datum["${this.geojson}"])`}]:[],{type:"geojson",...this.fields?{fields:this.fields}:{},...this.geojson?{geojson:this.geojson}:{},signal:this.signal}]}}},20419:(e,t,i)=>{"use strict";i.d(t,{b:()=>l});var n=i(48823),a=i(19387),o=i(7422),r=i(59159),s=i(80004);class l extends s.M{constructor(e,t,i,n){super(e),this.projection=t,this.fields=i,this.as=n}clone(){return new l(null,this.projection,(0,r.OM)(this.fields),(0,r.OM)(this.as))}static parseAll(e,t){if(!t.projectionName())return e;for(const i of[[a.Xs,a.y],[a.NG,a.VO]]){const n=i.map((e=>{const i=(0,o.EA)(t.encoding[e]);return(0,o.VQ)(i)?i.field:(0,o.Iu)(i)?{expr:`${i.datum}`}:(0,o.kJ)(i)?{expr:`${i.value}`}:void 0})),r=i[0]===a.NG?"2":"";(n[0]||n[1])&&(e=new l(e,t.projectionName(),n,[t.getName(`x${r}`),t.getName(`y${r}`)]))}return e}dependentFields(){return new Set(this.fields.filter(n.HD))}producedFields(){return new Set(this.as)}hash(){return`Geopoint ${this.projection} ${(0,r.vp)(this.fields)} ${(0,r.vp)(this.as)}`}assemble(){return{type:"geopoint",projection:this.projection,fields:this.fields,as:this.as}}}},86235:(e,t,i)=>{"use strict";i.d(t,{E:()=>o});var n=i(59159),a=i(80004);class o extends a.M{constructor(e,t){super(e),this.params=t}clone(){return new o(null,this.params)}dependentFields(){return new Set}producedFields(){}hash(){return`Graticule ${(0,n.vp)(this.params)}`}assemble(){return{type:"graticule",...!0===this.params?{}:this.params}}}},14526:(e,t,i)=>{"use strict";i.d(t,{T:()=>o});var n=i(98963),a=i(80004);class o extends a.M{clone(){return new o(null)}constructor(e){super(e)}dependentFields(){return new Set}producedFields(){return new Set([n.vV])}hash(){return"Identifier"}assemble(){return{type:"identifier",as:n.vV}}}},24735:(e,t,i)=>{"use strict";i.d(t,{Z:()=>l});var n=i(7422),a=i(20640),o=i(13261),r=i(59159),s=i(80004);class l extends s.M{constructor(e,t){super(e),this.transform=t}clone(){return new l(null,(0,r.OM)(this.transform))}dependentFields(){return new Set([this.transform.impute,this.transform.key,...this.transform.groupby??[]])}producedFields(){return new Set([this.transform.impute])}processSequence(e){const{start:t=0,stop:i,step:n}=e;return{signal:`sequence(${[t,i,...n?[n]:[]].join(",")})`}}static makeFromTransform(e,t){return new l(e,t)}static makeFromEncoding(e,t){const i=t.encoding,o=i.x,r=i.y;if((0,n.VQ)(o)&&(0,n.VQ)(r)){const n=o.impute?o:r.impute?r:void 0;if(void 0===n)return;const s=o.impute?r:r.impute?o:void 0,{method:d,value:f,frame:c,keyvals:h}=n.impute,p=(0,a.e8)(t.mark,i);return new l(e,{impute:n.field,key:s.field,...d?{method:d}:{},...void 0!==f?{value:f}:{},...c?{frame:c}:{},...void 0!==h?{keyvals:h}:{},...p.length?{groupby:p}:{}})}return null}hash(){return`Impute ${(0,r.vp)(this.transform)}`}assemble(){const{impute:e,key:t,keyvals:i,method:n,groupby:a,value:r,frame:s=[null,null]}=this.transform,l={type:"impute",field:e,key:t,...i?{keyvals:(0,o.MM)(i)?this.processSequence(i):i}:{},method:"value",...a?{groupby:a}:{},value:n&&"value"!==n?null:r};return n&&"value"!==n?[l,{type:"window",as:[`imputed_${e}_value`],ops:[n],fields:[e],frame:s,ignorePeers:!1,...a?{groupby:a}:{}},{type:"formula",expr:`datum.${e} === null ? datum.imputed_${e}_value : datum.${e}`,as:e}]:[l]}}},5410:(e,t,i)=>{"use strict";i.d(t,{_:()=>a});var n=i(77719);class a extends n.P{constructor(e={},t={},i=!1){super(e,t),this.explicit=e,this.implicit=t,this.parseNothing=i}clone(){const e=super.clone();return e.parseNothing=this.parseNothing,e}}},74284:(e,t,i)=>{"use strict";i.d(t,{k:()=>r});var n=i(7422),a=i(59159),o=i(80004);class r extends o.M{constructor(e,t){super(e),this.transform=t}clone(){return new r(null,(0,a.OM)(this.transform))}addDimensions(e){this.transform.groupby=(0,a.Tw)(this.transform.groupby.concat(e),(e=>e))}dependentFields(){const e=new Set;return this.transform.groupby&&this.transform.groupby.forEach(e.add,e),this.transform.joinaggregate.map((e=>e.field)).filter((e=>void 0!==e)).forEach(e.add,e),e}producedFields(){return new Set(this.transform.joinaggregate.map(this.getDefaultName))}getDefaultName(e){return e.as??(0,n.jd)(e)}hash(){return`JoinAggregateTransform ${(0,a.vp)(this.transform)}`}assemble(){const e=[],t=[],i=[];for(const n of this.transform.joinaggregate)t.push(n.op),i.push(this.getDefaultName(n)),e.push(void 0===n.field?null:n.field);const n=this.transform.groupby;return{type:"joinaggregate",as:i,ops:t,fields:e,...void 0!==n?{groupby:n}:{}}}}},45145:(e,t,i)=>{"use strict";i.d(t,{a:()=>s});var n=i(7422),a=i(50579),o=i(5846),r=i(74284);function s(e,t){const{row:i,column:s}=t;if(i&&s){let t=null;for(const l of[i,s])if((0,a.R_)(l.sort)){const{field:i,op:s=a.Az}=l.sort;e=t=new r.k(e,{joinaggregate:[{op:s,field:i,as:(0,o.K)(l,l.sort,{forAs:!0})}],groupby:[(0,n.jd)(l)]})}return t}return null}},12081:(e,t,i)=>{"use strict";i.d(t,{y:()=>o});var n=i(59159),a=i(80004);class o extends a.M{constructor(e,t){super(e),this.transform=t,this.transform=(0,n.OM)(t);const i=this.transform.as??[void 0,void 0];this.transform.as=[i[0]??t.on,i[1]??t.loess]}clone(){return new o(null,(0,n.OM)(this.transform))}dependentFields(){return new Set([this.transform.loess,this.transform.on,...this.transform.groupby??[]])}producedFields(){return new Set(this.transform.as)}hash(){return`LoessTransform ${(0,n.vp)(this.transform)}`}assemble(){const{loess:e,on:t,...i}=this.transform;return{type:"loess",x:t,y:e,...i}}}},72489:(e,t,i)=>{"use strict";i.d(t,{C:()=>c});var n=i(48823),a=i(56997),o=i(13261),r=i(59159),s=i(80004),l=i(19796),d=i(36409),f=i(35594);class c extends s.M{constructor(e,t,i){super(e),this.transform=t,this.secondary=i}clone(){return new c(null,(0,r.OM)(this.transform),this.secondary)}static make(e,t,i,n){const h=t.component.data.sources,{from:p}=i;let u=null;if((0,o.jV)(p)){let e=(0,l.UW)(p.data,h);e||(e=new d.l(p.data),h.push(e));const i=t.getName(`lookup_${n}`);u=new s.Z(e,i,f.ye.Lookup,t.component.data.outputNodeRefCounts),t.component.data.outputNodes[i]=u}else if((0,o.Aq)(p)){const e=p.param;let n;i={as:e,...i};try{n=t.getSelectionComponent((0,r.Xr)(e),e)}catch(t){throw new Error(a.yw.cannotLookupVariableParameter(e))}if(u=n.materialized,!u)throw new Error(a.yw.noSameUnitLookup(e))}return new c(e,i,u.getSource())}dependentFields(){return new Set([this.transform.lookup])}producedFields(){return new Set(this.transform.as?(0,n.IX)(this.transform.as):this.transform.from.fields)}hash(){return`Lookup ${(0,r.vp)({transform:this.transform,secondary:this.secondary})}`}assemble(){let e;if(this.transform.from.fields)e={values:this.transform.from.fields,...this.transform.as?{as:(0,n.IX)(this.transform.as)}:{}};else{let t=this.transform.as;(0,n.HD)(t)||(a.ZK(a.yw.NO_FIELDS_NEEDS_AS),t="_lookup"),e={as:[t]}}return{type:"lookup",from:this.secondary,key:this.transform.from.key,fields:[this.transform.lookup],...e,...this.transform.default?{default:this.transform.default}:{}}}}},94380:(e,t,i)=>{"use strict";i.d(t,{ff:()=>r,Ux:()=>f});var n=i(56997),a=i(34079),o=i(49868);const r="scale_";function s(e){for(const t of e){for(const e of t.children)if(e.parent!==t)return!1;if(!s(t.children))return!1}return!0}function l(e,t){let i=!1;for(const n of t)i=e.optimize(n)||i;return i}function d(e,t,i){let n=e.sources,o=!1;return o=l(new a.Hs,n)||o,o=l(new a.eY(t),n)||o,n=n.filter((e=>e.numChildren()>0)),o=l(new a.D8,n)||o,n=n.filter((e=>e.numChildren()>0)),i||(o=l(new a.Jq,n)||o,o=l(new a.BI(t),n)||o,o=l(new a.W$,n)||o,o=l(new a.a,n)||o,o=l(new a.v5,n)||o,o=l(new a.vf,n)||o,o=l(new a.Ox,n)||o,o=l(new a.$o,n)||o),e.sources=n,o}function f(e,t){s(e.sources);let i=0,a=0;for(let n=0;n<5&&d(e,t,!0);n++)i++;e.sources.map(o.D);for(let i=0;i<5&&d(e,t,!1);i++)a++;s(e.sources),5===Math.max(i,a)&&n.ZK("Maximum optimization runs(5) reached.")}},56201:(e,t,i)=>{"use strict";i.d(t,{QW:()=>l,g:()=>d,KJ:()=>f,lK:()=>c});var n,a=i(86235),o=i(80223),r=i(36409),s=function(e,t,i){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,i),i};function l(e){return e instanceof r.l||e instanceof a.E||e instanceof o.I}class d{constructor(){n.set(this,void 0),s(this,n,!1)}setModified(){s(this,n,!0)}get modifiedFlag(){return function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}(this,n)}}n=new WeakMap;class f extends d{getNodeDepths(e,t,i){i.set(e,t);for(const n of e.children)this.getNodeDepths(n,t+1,i);return i}optimize(e){const t=[...this.getNodeDepths(e,0,new Map).entries()].sort(((e,t)=>t[1]-e[1]));for(const e of t)this.run(e[0]);return this.modifiedFlag}}class c extends d{optimize(e){this.run(e);for(const t of e.children)this.optimize(t);return this.modifiedFlag}}},34079:(e,t,i)=>{"use strict";i.d(t,{Ox:()=>g,eY:()=>m,W$:()=>b,Hs:()=>y,Jq:()=>v,a:()=>_,D8:()=>x,vf:()=>w,v5:()=>$,BI:()=>k,$o:()=>T});var n=i(59159),a=i(59071),o=i(64321),r=i(66203),s=i(80004),l=i(80377),d=i(4517),f=i(99234),c=i(14526),h=i(56201),p=i(36409),u=i(54514);class g extends h.lK{mergeNodes(e,t){const i=t.shift();for(const n of t)e.removeChild(n),n.parent=i,n.remove()}run(e){const t=e.children.map((e=>e.hash())),i={};for(let n=0;n<t.length;n++)void 0===i[t[n]]?i[t[n]]=[e.children[n]]:i[t[n]].push(e.children[n]);for(const t of(0,n.XP)(i))i[t].length>1&&(this.setModified(),this.mergeNodes(e,i[t]))}}class m extends h.lK{constructor(e){super(),this.requiresSelectionId=e&&(0,a.t4)(e)}run(e){e instanceof c.T&&(this.requiresSelectionId&&((0,h.QW)(e.parent)||e.parent instanceof o.a||e.parent instanceof f.$Y)||(this.setModified(),e.remove()))}}class b extends h.g{optimize(e){return this.run(e,new Set),this.modifiedFlag}run(e,t){let i=new Set;e instanceof u.g&&(i=e.producedFields(),(0,n.dP)(i,t)&&(this.setModified(),e.removeFormulas(t),0===e.producedFields.length&&e.remove()));for(const n of e.children)this.run(n,new Set([...t,...i]))}}class y extends h.lK{constructor(){super()}run(e){e instanceof s.Z&&!e.isRequired()&&(this.setModified(),e.remove())}}class v extends h.KJ{run(e){if(!((0,h.QW)(e)||e.numChildren()>1))for(const t of e.children)if(t instanceof f.$Y)if(e instanceof f.$Y)this.setModified(),e.merge(t);else{if((0,n.Uz)(e.producedFields(),t.dependentFields()))continue;this.setModified(),t.swapWithParent()}}}class _ extends h.KJ{run(e){const t=[...e.children],i=e.children.filter((e=>e instanceof f.$Y));if(e.numChildren()>1&&i.length>=1){const a={},o=new Set;for(const e of i){const t=e.parse;for(const e of(0,n.XP)(t))e in a?a[e]!==t[e]&&o.add(e):a[e]=t[e]}for(const e of o)delete a[e];if(!(0,n.xb)(a)){this.setModified();const i=new f.$Y(e,a);for(const o of t){if(o instanceof f.$Y)for(const e of(0,n.XP)(a))delete o.parse[e];e.removeChild(o),o.parent=i,o instanceof f.$Y&&0===(0,n.XP)(o.parse).length&&o.remove()}}}}}class x extends h.KJ{run(e){e instanceof s.Z||e.numChildren()>0||e instanceof l.v||e instanceof p.l||(this.setModified(),e.remove())}}class w extends h.KJ{run(e){const t=e.children.filter((e=>e instanceof u.g)),i=t.pop();for(const e of t)this.setModified(),i.merge(e)}}class $ extends h.KJ{run(e){const t=e.children.filter((e=>e instanceof o.a)),i={};for(const e of t){const t=(0,n.vp)(e.groupBy);t in i||(i[t]=[]),i[t].push(e)}for(const t of(0,n.XP)(i)){const n=i[t];if(n.length>1){const t=n.pop();for(const i of n)t.merge(i)&&(e.removeChild(i),i.parent=t,i.remove(),this.setModified())}}}}class k extends h.KJ{constructor(e){super(),this.model=e}run(e){const t=!((0,h.QW)(e)||e instanceof d.o||e instanceof f.$Y||e instanceof c.T),i=[],a=[];for(const o of e.children)o instanceof r.k&&(t&&!(0,n.Uz)(e.producedFields(),o.dependentFields())?i.push(o):a.push(o));if(i.length>0){const t=i.pop();for(const e of i)t.merge(e,this.model.renameSignal.bind(this.model));this.setModified(),e instanceof r.k?e.merge(t,this.model.renameSignal.bind(this.model)):t.swapWithParent()}if(a.length>1){const e=a.pop();for(const t of a)e.merge(t,this.model.renameSignal.bind(this.model));this.setModified()}}}class T extends h.KJ{run(e){const t=[...e.children];if(!(0,n.G)(t,(e=>e instanceof s.Z))||e.numChildren()<=1)return;const i=[];let a;for(const n of t)if(n instanceof s.Z){let t=n;for(;1===t.numChildren();){const[e]=t.children;if(!(e instanceof s.Z))break;t=e}i.push(...t.children),a?(e.removeChild(n),n.parent=a.parent,a.parent.removeChild(a),a.parent=t,this.setModified()):a=t}else i.push(n);if(i.length){this.setModified();for(const e of i)e.parent.removeChild(e),e.parent=a}}}},19796:(e,t,i)=>{"use strict";i.d(t,{UW:()=>N,IR:()=>V});var n=i(5410),a=i(35594),o=i(56997),r=i(13261),s=i(59159),l=i(3496),d=i(59071),f=i(77974),c=i(64321),h=i(66203),p=i(40253),u=i(80004),g=i(49152),m=i(80377),b=i(4517),y=i(65006),v=i(78352),_=i(53663),x=i(99234),w=i(14223),$=i(20419),k=i(86235),T=i(14526),D=i(24735),O=i(74284),S=i(45145),R=i(12081),A=i(72489),E=i(51448),F=i(88234),q=i(12850),P=i(21846),I=i(80223),j=i(36409),C=i(86552),z=i(54514),U=i(18147);function N(e,t){for(const i of t){const t=i.data;if(e.name&&i.hasName()&&e.name!==i.dataName)continue;const n=e.format?.mesh,o=t.format?.feature;if(n&&o)continue;const r=e.format?.feature;if((r||o)&&r!==o)continue;const l=t.format?.mesh;if(!n&&!l||n===l)if((0,a.pW)(e)&&(0,a.pW)(t)){if((0,s.vZ)(e.values,t.values))return i}else if((0,a.F4)(e)&&(0,a.F4)(t)){if(e.url===t.url)return i}else if((0,a.tH)(e)&&e.name===i.dataName)return i}return null}function V(e){let t=function(e,t){if(e.data||!e.parent){if(null===e.data){const e=new j.l({values:[]});return t.push(e),e}const i=N(e.data,t);if(i)return(0,a.xD)(e.data)||(i.data.format=(0,s.Ee)({},e.data.format,i.data.format)),!i.hasName()&&e.data.name&&(i.dataName=e.data.name),i;{const i=new j.l(e.data);return t.push(i),i}}return e.parent.component.data.facetRoot?e.parent.component.data.facetRoot:e.parent.component.data.main}(e,e.component.data.sources);const{outputNodes:i,outputNodeRefCounts:V}=e.component.data,L=e.parent?e.parent.component.data.ancestorParse.clone():new n._,W=e.data;(0,a.xD)(W)?((0,a.TL)(W)?t=new I.I(t,W.sequence):(0,a.YJ)(W)&&(t=new k.E(t,W.graticule)),L.parseNothing=!0):null===W?.format?.parse&&(L.parseNothing=!0),t=x.$Y.makeExplicit(t,e,L)??t,t=new T.T(t);const M=e.parent&&(0,l.pQ)(e.parent);((0,l.gs)(e)||(0,l.hr)(e))&&M&&(t=h.k.makeFromEncoding(t,e)??t),e.transforms.length>0&&(t=function(e,t,i){let n=0;for(const a of t.transforms){let s,l;if((0,r.Es)(a))l=e=new p.P(e,a),s="derived";else if((0,r.nK)(a)){const n=(0,x.Bz)(a);l=e=x.$Y.makeWithAncestors(e,{},n,i)??e,e=new b.o(e,t,a.filter)}else if((0,r.K8)(a))l=e=h.k.makeFromTransform(e,a,t),s="number";else if((0,r.mb)(a))s="date",void 0===i.getWithExplicit(a.field).value&&(e=new x.$Y(e,{[a.field]:s}),i.set(a.field,s,!1)),l=e=z.g.makeFromTransform(e,a);else if((0,r.Oh)(a))l=e=c.a.makeFromTransform(e,a),s="number",(0,d.t4)(t)&&(e=new T.T(e));else if((0,r.Uh)(a))l=e=A.C.make(e,t,a,n++),s="derived";else if((0,r.FJ)(a))l=e=new U.I(e,a),s="number";else if((0,r.et)(a))l=e=new O.k(e,a),s="number";else if((0,r.V_)(a))l=e=C.F.makeFromTransform(e,a),s="derived";else if((0,r.vf)(a))l=e=new _.t(e,a),s="derived";else if((0,r.Qf)(a))l=e=new v.j(e,a),s="derived";else if((0,r.I8)(a))l=e=new E.X(e,a),s="derived";else if((0,r.rf)(a))e=new P.A(e,a);else if((0,r.wu)(a))l=e=D.Z.makeFromTransform(e,a),s="derived";else if((0,r.fj)(a))l=e=new g.h(e,a),s="derived";else if((0,r.W1)(a))l=e=new F.g(e,a),s="derived";else if((0,r.kj)(a))l=e=new q.P(e,a),s="derived";else{if(!(0,r.TB)(a)){o.ZK(o.yw.invalidTransformIgnored(a));continue}l=e=new R.y(e,a),s="derived"}if(l&&void 0!==s)for(const e of l.producedFields()??[])i.set(e,s,!1)}return e}(t,e,L));const B=(0,x.FZ)(e),H=(0,x.$v)(e);t=x.$Y.makeWithAncestors(t,{},{...B,...H},L)??t,(0,l.gs)(e)&&(t=w.U.parseAll(t,e),t=$.b.parseAll(t,e)),((0,l.gs)(e)||(0,l.hr)(e))&&(M||(t=h.k.makeFromEncoding(t,e)??t),t=z.g.makeFromEncoding(t,e)??t,t=p.P.parseAllForSortIndex(t,e));const G=e.getDataName(a.ye.Raw),X=new u.Z(t,G,a.ye.Raw,V);if(i[G]=X,t=X,(0,l.gs)(e)){const i=c.a.makeFromEncoding(t,e);i&&(t=i,(0,d.t4)(e)&&(t=new T.T(t))),t=D.Z.makeFromEncoding(t,e)??t,t=C.F.makeFromEncoding(t,e)??t}(0,l.gs)(e)&&(t=y.R.make(t,e)??t);const Y=e.getDataName(a.ye.Main),J=new u.Z(t,Y,a.ye.Main,V);i[Y]=J,t=J,(0,l.gs)(e)&&(0,f.Lg)(e,J);let K=null;if((0,l.hr)(e)){const n=e.getName("facet");t=(0,S.a)(t,e.facet)??t,K=new m.v(t,e,n,J.getSource()),i[n]=K}return{...e.component.data,outputNodes:i,outputNodeRefCounts:V,raw:X,main:J,facetRoot:K,ancestorParse:L}}},51448:(e,t,i)=>{"use strict";i.d(t,{X:()=>o});var n=i(59159),a=i(80004);class o extends a.M{constructor(e,t){super(e),this.transform=t}clone(){return new o(null,(0,n.OM)(this.transform))}addDimensions(e){this.transform.groupby=(0,n.Tw)((this.transform.groupby??[]).concat(e),(e=>e))}producedFields(){}dependentFields(){return new Set([this.transform.pivot,this.transform.value,...this.transform.groupby??[]])}hash(){return`PivotTransform ${(0,n.vp)(this.transform)}`}assemble(){const{pivot:e,value:t,groupby:i,limit:n,op:a}=this.transform;return{type:"pivot",field:e,value:t,...void 0!==n?{limit:n}:{},...void 0!==a?{op:a}:{},...void 0!==i?{groupby:i}:{}}}}},88234:(e,t,i)=>{"use strict";i.d(t,{g:()=>o});var n=i(59159),a=i(80004);class o extends a.M{constructor(e,t){super(e),this.transform=t,this.transform=(0,n.OM)(t);const i=this.transform.as??[void 0,void 0];this.transform.as=[i[0]??"prob",i[1]??"value"]}clone(){return new o(null,(0,n.OM)(this.transform))}dependentFields(){return new Set([this.transform.quantile,...this.transform.groupby??[]])}producedFields(){return new Set(this.transform.as)}hash(){return`QuantileTransform ${(0,n.vp)(this.transform)}`}assemble(){const{quantile:e,...t}=this.transform;return{type:"quantile",field:e,...t}}}},12850:(e,t,i)=>{"use strict";i.d(t,{P:()=>o});var n=i(59159),a=i(80004);class o extends a.M{constructor(e,t){super(e),this.transform=t,this.transform=(0,n.OM)(t);const i=this.transform.as??[void 0,void 0];this.transform.as=[i[0]??t.on,i[1]??t.regression]}clone(){return new o(null,(0,n.OM)(this.transform))}dependentFields(){return new Set([this.transform.regression,this.transform.on,...this.transform.groupby??[]])}producedFields(){return new Set(this.transform.as)}hash(){return`RegressionTransform ${(0,n.vp)(this.transform)}`}assemble(){const{regression:e,on:t,...i}=this.transform;return{type:"regression",x:t,y:e,...i}}}},21846:(e,t,i)=>{"use strict";i.d(t,{A:()=>o});var n=i(59159),a=i(80004);class o extends a.M{constructor(e,t){super(e),this.transform=t}clone(){return new o(null,(0,n.OM)(this.transform))}dependentFields(){return new Set}producedFields(){return new Set}hash(){return`SampleTransform ${(0,n.vp)(this.transform)}`}assemble(){return{type:"sample",size:this.transform.sample}}}},80223:(e,t,i)=>{"use strict";i.d(t,{I:()=>o});var n=i(59159),a=i(80004);class o extends a.M{constructor(e,t){super(e),this.params=t}clone(){return new o(null,this.params)}dependentFields(){return new Set}producedFields(){return new Set([this.params.as??"data"])}hash(){return`Hash ${(0,n.vp)(this.params)}`}assemble(){return{type:"sequence",...this.params}}}},36409:(e,t,i)=>{"use strict";i.d(t,{l:()=>r});var n=i(35594),a=i(59159),o=i(80004);class r extends o.M{constructor(e){let t;if(super(null),e??(e={name:"source"}),(0,n.xD)(e)||(t=e.format?{...(0,a.CE)(e.format,["parse"])}:{}),(0,n.pW)(e))this._data={values:e.values};else if((0,n.F4)(e)){if(this._data={url:e.url},!t.type){let i=/(?:\.([^.]+))?$/.exec(e.url)[1];(0,a.r3)(["json","csv","tsv","dsv","topojson"],i)||(i="json"),t.type=i}}else(0,n.gJ)(e)?this._data={values:[{type:"Sphere"}]}:((0,n.tH)(e)||(0,n.xD)(e))&&(this._data={});this._generator=(0,n.xD)(e),e.name&&(this._name=e.name),t&&!(0,a.xb)(t)&&(this._data.format=t)}dependentFields(){return new Set}producedFields(){}get data(){return this._data}hasName(){return!!this._name}get isGenerator(){return this._generator}get dataName(){return this._name}set dataName(e){this._name=e}set parent(e){throw new Error("Source nodes have to be roots.")}remove(){throw new Error("Source nodes are roots and cannot be removed.")}hash(){throw new Error("Cannot hash sources")}assemble(){return{name:this._name,...this._data,transform:[]}}}},86552:(e,t,i)=>{"use strict";i.d(t,{F:()=>l});var n=i(48823),a=i(7422),o=i(59159),r=i(62334),s=i(80004);class l extends s.M{constructor(e,t){super(e),this._stack=t}clone(){return new l(null,(0,o.OM)(this._stack))}static makeFromTransform(e,t){const{stack:i,groupby:a,as:r,offset:s="zero"}=t,d=[],f=[];if(void 0!==t.sort)for(const e of t.sort)d.push(e.field),f.push((0,o.du)(e.order,"ascending"));const c={field:d,order:f};let h;return h=function(e){return(0,n.kJ)(e)&&e.every((e=>(0,n.HD)(e)))&&e.length>1}(r)?r:(0,n.HD)(r)?[r,`${r}_end`]:[`${t.stack}_start`,`${t.stack}_end`],new l(e,{stackField:i,groupby:a,offset:s,sort:c,facetby:[],as:h})}static makeFromEncoding(e,t){const i=t.stack,{encoding:o}=t;if(!i)return null;const{groupbyChannel:s,fieldChannel:d,offset:f,impute:c}=i;let h;if(s){const e=o[s];h=(0,a.Vm)(e)}const p=function(e){return e.stack.stackBy.reduce(((e,t)=>{const i=t.fieldDef,n=(0,a.jd)(i);return n&&e.push(n),e}),[])}(t),u=t.encoding.order;let g;return g=(0,n.kJ)(u)||(0,a.VQ)(u)?(0,r.xJ)(u):p.reduce(((e,t)=>(e.field.push(t),e.order.push("y"===d?"descending":"ascending"),e)),{field:[],order:[]}),new l(e,{dimensionFieldDef:h,stackField:t.vgField(d),facetby:[],stackby:p,sort:g,offset:f,impute:c,as:[t.vgField(d,{suffix:"start",forAs:!0}),t.vgField(d,{suffix:"end",forAs:!0})]})}get stack(){return this._stack}addDimensions(e){this._stack.facetby.push(...e)}dependentFields(){const e=new Set;return e.add(this._stack.stackField),this.getGroupbyFields().forEach(e.add,e),this._stack.facetby.forEach(e.add,e),this._stack.sort.field.forEach(e.add,e),e}producedFields(){return new Set(this._stack.as)}hash(){return`Stack ${(0,o.vp)(this._stack)}`}getGroupbyFields(){const{dimensionFieldDef:e,impute:t,groupby:i}=this._stack;return e?e.bin?t?[(0,a.jd)(e,{binSuffix:"mid"})]:[(0,a.jd)(e,{}),(0,a.jd)(e,{binSuffix:"end"})]:[(0,a.jd)(e)]:i??[]}assemble(){const e=[],{facetby:t,dimensionFieldDef:i,stackField:n,stackby:o,sort:r,offset:s,impute:l,as:d}=this._stack;if(l&&i){const{bandPosition:r=.5,bin:s}=i;s&&e.push({type:"formula",expr:`${r}*`+(0,a.jd)(i,{expr:"datum"})+`+${1-r}*`+(0,a.jd)(i,{expr:"datum",binSuffix:"end"}),as:(0,a.jd)(i,{binSuffix:"mid",forAs:!0})}),e.push({type:"impute",field:n,groupby:[...o,...t],key:(0,a.jd)(i,{binSuffix:"mid"}),method:"value",value:0})}return e.push({type:"stack",groupby:[...this.getGroupbyFields(),...t],field:n,sort:r,as:d,offset:s}),e}}},49868:(e,t,i)=>{"use strict";i.d(t,{D:()=>c});var n=i(35594),a=i(64321),o=i(80004),r=i(80377),s=i(74284),l=i(94380),d=i(86552),f=i(18147);function c(e){if(e instanceof r.v)if(1!==e.numChildren()||e.children[0]instanceof o.Z){const i=e.model.component.data.main;h(i);const n=(t=e,function e(i){if(!(i instanceof r.v)){const n=i.clone();if(n instanceof o.Z){const e=l.ff+n.getSource();n.setSource(e),t.model.component.data.outputNodes[e]=n}else(n instanceof a.a||n instanceof d.F||n instanceof f.I||n instanceof s.k)&&n.addDimensions(t.fields);for(const t of i.children.flatMap(e))t.parent=n;return[n]}return i.children.flatMap(e)}),c=e.children.map(n).flat();for(const e of c)e.parent=i}else{const t=e.children[0];(t instanceof a.a||t instanceof d.F||t instanceof f.I||t instanceof s.k)&&t.addDimensions(e.fields),t.swapWithParent(),c(e)}else e.children.map(c);var t}function h(e){if(e instanceof o.Z&&e.type===n.ye.Main&&1===e.numChildren()){const t=e.children[0];t instanceof r.v||(t.swapWithParent(),h(e))}}},54514:(e,t,i)=>{"use strict";i.d(t,{g:()=>s});var n=i(7422),a=i(31021),o=i(59159),r=i(80004);class s extends r.M{constructor(e,t){super(e),this.formula=t}clone(){return new s(null,(0,o.OM)(this.formula))}static makeFromEncoding(e,t){const i=t.reduceFieldDef(((e,t)=>{const{field:i,timeUnit:a}=t;if(a){const r=(0,n.jd)(t,{forAs:!0});e[(0,o.vp)({as:r,field:i,timeUnit:a})]={as:r,field:i,timeUnit:a}}return e}),{});return(0,o.xb)(i)?null:new s(e,i)}static makeFromTransform(e,t){const{timeUnit:i,...n}={...t},r={...n,timeUnit:(0,a.Q8)(i)};return new s(e,{[(0,o.vp)(r)]:r})}merge(e){this.formula={...this.formula};for(const t in e.formula)this.formula[t]||(this.formula[t]=e.formula[t]);for(const t of e.children)e.removeChild(t),t.parent=this;e.remove()}removeFormulas(e){const t={};for(const[i,n]of(0,o.qh)(this.formula))e.has(n.as)||(t[i]=n);this.formula=t}producedFields(){return new Set((0,o.kd)(this.formula).map((e=>e.as)))}dependentFields(){return new Set((0,o.kd)(this.formula).map((e=>e.field)))}hash(){return`TimeUnit ${(0,o.vp)(this.formula)}`}assemble(){const e=[];for(const t of(0,o.kd)(this.formula)){const{field:i,as:n,timeUnit:r}=t,{unit:s,utc:l,...d}=(0,a.Q8)(r);e.push({field:(0,o.qO)(i),type:"timeunit",...s?{units:(0,a.m9)(s)}:{},...l?{timezone:"utc"}:{},...d,as:[n,`${n}_end`]})}return e}}},18147:(e,t,i)=>{"use strict";i.d(t,{I:()=>s});var n=i(24430),a=i(7422),o=i(59159),r=i(80004);class s extends r.M{constructor(e,t){super(e),this.transform=t}clone(){return new s(null,(0,o.OM)(this.transform))}addDimensions(e){this.transform.groupby=(0,o.Tw)(this.transform.groupby.concat(e),(e=>e))}dependentFields(){const e=new Set;return(this.transform.groupby??[]).forEach(e.add,e),(this.transform.sort??[]).forEach((t=>e.add(t.field))),this.transform.window.map((e=>e.field)).filter((e=>void 0!==e)).forEach(e.add,e),e}producedFields(){return new Set(this.transform.window.map(this.getDefaultName))}getDefaultName(e){return e.as??(0,a.jd)(e)}hash(){return`WindowTransform ${(0,o.vp)(this.transform)}`}assemble(){const e=[],t=[],i=[],a=[];for(const n of this.transform.window)t.push(n.op),i.push(this.getDefaultName(n)),a.push(void 0===n.param?null:n.param),e.push(void 0===n.field?null:n.field);const o=this.transform.frame,r=this.transform.groupby;if(o&&null===o[0]&&null===o[1]&&t.every((e=>(0,n.Wp)(e))))return{type:"joinaggregate",as:i,ops:t,fields:e,...void 0!==r?{groupby:r}:{}};const s=[],l=[];if(void 0!==this.transform.sort)for(const e of this.transform.sort)s.push(e.field),l.push(e.order??"ascending");const d={field:s,order:l},f=this.transform.ignorePeers;return{type:"window",params:a,as:i,ops:t,fields:e,sort:d,...void 0!==f?{ignorePeers:f}:{},...void 0!==r?{groupby:r}:{},...void 0!==o?{frame:o}:{}}}}},5846:(e,t,i)=>{"use strict";i.d(t,{K:()=>D,q:()=>O});var n=i(48823),a=i(35647),o=i(19387),r=i(7422),s=i(77125),l=i(56997),d=i(49272),f=i(50579),c=i(41681),h=i(59159),p=i(99185),u=i(53031),g=i(25665),m=i(40253),b=i(19796),y=i(73796),v=i(75045),_=i(50429),x=i(17621),w=i(13922),$=i(3496),k=i(53245),T=i(66151);function D(e,t,i){return(0,r.jd)(t,{suffix:`by_${(0,r.jd)(e)}`,...i??{}})}class O extends $.Ne{constructor(e,t,i,n){super(e,"facet",t,i,n,e.resolve),this.child=(0,u.F)(e.spec,this,this.getName("child"),void 0,n),this.children=[this.child],this.facet=this.initFacet(e.facet)}initFacet(e){if(!(0,c.NA)(e))return{facet:this.initFacetFieldDef(e,"facet")};const t=(0,h.XP)(e),i={};for(const n of t){if(![o.rn,o.aC].includes(n)){l.ZK(l.yw.incompatibleChannel(n,"facet"));break}const t=e[n];if(void 0===t.field){l.ZK(l.yw.emptyFieldDef(t,n));break}i[n]=this.initFacetFieldDef(t,n)}return i}initFacetFieldDef(e,t){const i=(0,r.xe)(e,t);return i.header?i.header=(0,s.K)(i.header):null===i.header&&(i.header=null),i}channelHasField(e){return!!this.facet[e]}fieldDef(e){return this.facet[e]}parseData(){this.component.data=(0,b.IR)(this),this.child.parseData()}parseLayoutSize(){(0,w.DW)(this)}parseSelections(){this.child.parseSelections(),this.component.selection=this.child.component.selection}parseMarkGroup(){this.child.parseMarkGroup()}parseAxesAndHeaders(){this.child.parseAxesAndHeaders(),(0,x.Y)(this)}assembleSelectionTopLevelSignals(e){return this.child.assembleSelectionTopLevelSignals(e)}assembleSignals(){return this.child.assembleSignals(),[]}assembleSelectionData(e){return this.child.assembleSelectionData(e)}getHeaderLayoutMixins(){const e={};for(const t of o.tD)for(const i of _.z){const n=this.component.layoutHeaders[t],a=n[i],{facetFieldDef:o}=n;if(o){const i=(0,v.ic)("titleOrient",o.header,this.config,t);if(["right","bottom"].includes(i)){const n=(0,v.xo)(t,i);e.titleAnchor??(e.titleAnchor={}),e.titleAnchor[n]="end"}}if(a?.[0]){const a="row"===t?"height":"width",o="header"===i?"headerBand":"footerBand";"facet"===t||this.child.component.layoutSize.get(a)||(e[o]??(e[o]={}),e[o][t]=.5),n.title&&(e.offset??(e.offset={}),e.offset["row"===t?"rowTitle":"columnTitle"]=10)}}return e}assembleDefaultLayout(){const{column:e,row:t}=this.facet,i=e?this.columnDistinctSignal():t?1:void 0;let n="all";return(t||"independent"!==this.component.resolve.scale.x)&&(e||"independent"!==this.component.resolve.scale.y)||(n="none"),{...this.getHeaderLayoutMixins(),...i?{columns:i}:{},bounds:"full",align:n}}assembleLayoutSignals(){return this.child.assembleLayoutSignals()}columnDistinctSignal(){if(!(this.parent&&this.parent instanceof O))return{signal:`length(data('${this.getName("column_domain")}'))`}}assembleGroup(e){return this.parent&&this.parent instanceof O?{...this.channelHasField("column")?{encode:{update:{columns:{field:(0,r.jd)(this.facet.column,{prefix:"distinct"})}}}}:{},...super.assembleGroup(e)}:super.assembleGroup(e)}getCardinalityAggregateForChild(){const e=[],t=[],i=[];if(this.child instanceof O){if(this.child.channelHasField("column")){const n=(0,r.jd)(this.child.facet.column);e.push(n),t.push("distinct"),i.push(`distinct_${n}`)}}else for(const n of o.Kz){const a=this.child.component.scales[n];if(a&&!a.merged){const o=a.get("type"),r=a.get("range");if((0,d.eO)(o)&&(0,p.GC)(r)){const a=(0,k.Bd)(this.child,n),o=(0,k.Ue)(a);o?(e.push(o),t.push("distinct"),i.push(`distinct_${o}`)):l.ZK(l.yw.unknownField(n))}}}return{fields:e,ops:t,as:i}}assembleFacet(){const{name:e,data:t}=this.component.data.facetRoot,{row:i,column:s}=this.facet,{fields:l,ops:d,as:c}=this.getCardinalityAggregateForChild(),h=[];for(const e of o.tD){const t=this.facet[e];if(t){h.push((0,r.jd)(t));const{bin:o,sort:p}=t;if((0,a.f$)(o)&&h.push((0,r.jd)(t,{binSuffix:"end"})),(0,f.R_)(p)){const{field:e,op:n=f.Az}=p,a=D(t,p);i&&s?(l.push(a),d.push("max"),c.push(a)):(l.push(e),d.push(n),c.push(a))}else if((0,n.kJ)(p)){const i=(0,m.m)(t,e);l.push(i),d.push("max"),c.push(i)}}}const p=!!i&&!!s;return{name:e,data:t,groupby:h,...p||l.length>0?{aggregate:{...p?{cross:p}:{},...l.length?{fields:l,ops:d,as:c}:{}}}:{}}}facetSortFields(e){const{facet:t}=this,i=t[e];return i?(0,f.R_)(i.sort)?[D(i,i.sort,{expr:"datum"})]:(0,n.kJ)(i.sort)?[(0,m.m)(i,e,{expr:"datum"})]:[(0,r.jd)(i,{expr:"datum"})]:[]}facetSortOrder(e){const{facet:t}=this,i=t[e];if(i){const{sort:e}=i;return[((0,f.R_)(e)?e.order:!(0,n.kJ)(e)&&e)||"ascending"]}return[]}assembleLabelTitle(){const{facet:e,config:t}=this;if(e.facet)return(0,y.IX)(e.facet,"facet",t);const i={row:["top","bottom"],column:["left","right"]};for(const n of _.f)if(e[n]){const a=(0,v.ic)("labelOrient",e[n]?.header,t,n);if(i[n].includes(a))return(0,y.IX)(e[n],n,t)}}assembleMarks(){const{child:e}=this,t=this.component.data.facetRoot,i=(0,g.L)(t),n=e.assembleGroupEncodeEntry(!1),a=this.assembleLabelTitle()||e.assembleTitle(),r=e.assembleGroupStyle();return[{name:this.getName("cell"),type:"group",...a?{title:a}:{},...r?{style:r}:{},from:{facet:this.assembleFacet()},sort:{field:o.tD.map((e=>this.facetSortFields(e))).flat(),order:o.tD.map((e=>this.facetSortOrder(e))).flat()},...i.length>0?{data:i}:{},...n?{encode:{update:n}}:{},...e.assembleGroup((0,T.gM)(this,[]))}]}getMapping(){return this.facet}}},20705:(e,t,i)=>{"use strict";i.d(t,{bt:()=>p,s0:()=>g,Cd:()=>b,Qc:()=>y,bH:()=>v,w1:()=>$});var n=i(48823),a=i(35647),o=i(7422),r=i(21066),s=i(49272),l=i(31021),d=i(46689),f=i(59159),c=i(99185),h=i(43507);function p(e){return e&&"number"!==e&&"time"!==e}function u(e,t,i){return`${e}(${t}${i?`, ${(0,f.Pz)(i)}`:""})`}function g({fieldOrDatumDef:e,format:t,formatType:i,expr:r,normalizeStack:d,config:f}){if(p(i))return b({fieldOrDatumDef:e,format:t,formatType:i,expr:r,config:f});const c=m(e,r,d);if((0,o.vc)(e)){const i=function(e,t,i,a,o){return!t||i?`${o?"utc":"time"}Format(${e}, '${i=(0,n.HD)(i)?i:a}')`:(0,l.i9)(t,e,o)}(c,(0,o.VQ)(e)?(0,l.Q8)(e.timeUnit)?.unit:void 0,t,f.timeFormat,(0,o.oH)(e)&&e.scale?.type===s.N3.UTC);return i?{signal:i}:void 0}return t=_((0,o.$v)(e),t,f),(0,o.VQ)(e)&&(0,a.f$)(e.bin)?{signal:$(c,(0,o.jd)(e,{expr:r,binSuffix:"end"}),t,i,f)}:t||"quantitative"===(0,o.$v)(e)?{signal:`${x(c,t)}`}:{signal:`isValid(${c}) ? ${c} : ""+${c}`}}function m(e,t,i){return(0,o.VQ)(e)?i?`${(0,o.jd)(e,{expr:t,suffix:"end"})}-${(0,o.jd)(e,{expr:t,suffix:"start"})}`:(0,o.jd)(e,{expr:t}):(0,h.Rc)(e)}function b({fieldOrDatumDef:e,format:t,formatType:i,expr:n,normalizeStack:r,config:s,field:l}){return l??(l=m(e,n,r)),(0,o.VQ)(e)&&(0,a.f$)(e.bin)?{signal:$(l,(0,o.jd)(e,{expr:n,binSuffix:"end"}),t,i,s)}:{signal:u(i,l,t)}}function y(e,t,i,n,a,r){if(!p(n))return(0,o.vc)(e)?function(e,t,i,n){return e||(t?{signal:(0,l.nj)(t)}:n?void 0:i.timeFormat)}(i,(0,o.VQ)(e)?(0,l.Q8)(e.timeUnit)?.unit:void 0,a,r):_(t,i,a)}function v(e,t,i){return e&&((0,c.Lo)(e)||"number"===e||"time"===e)?e:(0,o.vc)(t)&&"time"!==i&&"utc"!==i?"time":void 0}function _(e,t,i){return(0,n.HD)(t)?t:e===d.ql?i.numberFormat:void 0}function x(e,t){return`format(${e}, "${t||""}")`}function w(e,t,i,a){return p(i)?u(i,e,t):x(e,((0,n.HD)(t)?t:void 0)??a.numberFormat)}function $(e,t,i,n,a){const o=w(e,i,n,a),s=w(t,i,n,a);return`${(0,r.B3)(e,!1)} ? "null" : ${o} + " – " + ${s}`}},87339:(e,t,i)=>{"use strict";i.d(t,{Q:()=>r});var n=i(59159),a=i(62334),o=i(28668);function r(e,t){return(0,n.XP)(e).reduce(((i,n)=>{const r=e[n];return{...i,...(0,o.xc)(t,r,n,(e=>(0,a.vS)(e.value)))}}),{})}},73796:(e,t,i)=>{"use strict";i.d(t,{q4:()=>m,L:()=>v,IX:()=>x,A4:()=>T});var n=i(48823),a=i(19387),o=i(7422),r=i(24611),s=i(50579),l=i(41681),d=i(59159),f=i(23032),c=i(40253),h=i(20705),p=i(3496),u=i(75045),g=i(50429);function m(e,t){const i=e.component.layoutHeaders[t].title,n=e.config?e.config:void 0,a=e.component.layoutHeaders[t].facetFieldDef?e.component.layoutHeaders[t].facetFieldDef:void 0,{titleAnchor:o,titleAngle:s,titleOrient:l}=(0,u.EG)(["titleAnchor","titleAngle","titleOrient"],a.header,n,t),f=(0,u.xo)(t,l),c=(0,d.LW)(s);return{name:`${t}-title`,type:"group",role:`${f}-title`,title:{text:i,..."row"===t?{orient:"left"}:{},style:"guide-title",...y(c,f),...b(f,c,o),...D(n,a,t,r._f,r.sO)}}}function b(e,t,i="middle"){switch(i){case"start":return{align:"left"};case"end":return{align:"right"}}const n=(0,f.hs)(t,"row"===e?"left":"top","row"===e?"y":"x");return n?{align:n}:{}}function y(e,t){const i=(0,f.Fe)(e,"row"===t?"left":"top","row"===t?"y":"x",!0);return i?{baseline:i}:{}}function v(e,t){const i=e.component.layoutHeaders[t],n=[];for(const a of g.z)if(i[a])for(const o of i[a]){const r=w(e,t,a,i,o);null!=r&&n.push(r)}return n}function _(e,t){const{sort:i}=e;return(0,s.R_)(i)?{field:(0,o.jd)(i,{expr:"datum"}),order:i.order??"ascending"}:(0,n.kJ)(i)?{field:(0,c.m)(e,t,{expr:"datum"}),order:"ascending"}:{field:(0,o.jd)(e,{expr:"datum"}),order:i??"ascending"}}function x(e,t,i){const{format:n,formatType:a,labelAngle:s,labelAnchor:l,labelOrient:f,labelExpr:c}=(0,u.EG)(["format","formatType","labelAngle","labelAnchor","labelOrient","labelExpr"],e.header,i,t),p=(0,h.s0)({fieldOrDatumDef:e,format:n,formatType:a,expr:"parent",config:i}).signal,g=(0,u.xo)(t,f);return{text:{signal:c?(0,d.ko)((0,d.ko)(c,"datum.label",p),"datum.value",(0,o.jd)(e,{expr:"parent"})):p},..."row"===t?{orient:"left"}:{},style:"guide-label",frame:"group",...y(s,g),...b(g,s,l),...D(i,e,t,r.Bn,r.ft)}}function w(e,t,i,n,a){if(a){let o=null;const{facetFieldDef:r}=n,s=e.config?e.config:void 0;if(r&&a.labels){const{labelOrient:e}=(0,u.EG)(["labelOrient"],r.header,s,t);("row"===t&&!(0,d.r3)(["top","bottom"],e)||"column"===t&&!(0,d.r3)(["left","right"],e))&&(o=x(r,t,s))}const f=(0,p.hr)(e)&&!(0,l.NA)(e.facet),c=a.axes,h=c?.length>0;if(o||h){const s="row"===t?"height":"width";return{name:e.getName(`${t}_${i}`),type:"group",role:`${t}-${i}`,...n.facetFieldDef?{from:{data:e.getName(`${t}_domain`)},sort:_(r,t)}:{},...h&&f?{from:{data:e.getName(`facet_domain_${t}`)}}:{},...o?{title:o}:{},...a.sizeSignal?{encode:{update:{[s]:a.sizeSignal}}}:{},...h?{axes:c}:{}}}}return null}const $={column:{start:0,end:1},row:{start:1,end:0}};function k(e,t){return $[t][e]}function T(e,t){const i={};for(const n of a.tD){const a=e[n];if(a?.facetFieldDef){const{titleAnchor:e,titleOrient:o}=(0,u.EG)(["titleAnchor","titleOrient"],a.facetFieldDef.header,t,n),r=(0,u.xo)(n,o),s=k(e,r);void 0!==s&&(i[r]=s)}}return(0,d.xb)(i)?void 0:i}function D(e,t,i,n,a){const o={};for(const r of n){if(!a[r])continue;const n=(0,u.ic)(r,t?.header,e,i);void 0!==n&&(o[a[r]]=n)}return o}},75045:(e,t,i)=>{"use strict";i.d(t,{xo:()=>a,ic:()=>o,EG:()=>r});var n=i(59159);function a(e,t){return(0,n.r3)(["top","bottom"],t)?"column":(0,n.r3)(["left","right"],t)||"row"===e?"row":"column"}function o(e,t,i,a){const o="row"===a?i.headerRow:"column"===a?i.headerColumn:i.headerFacet;return(0,n.du)((t||{})[e],o[e],i.header[e])}function r(e,t,i,n){const a={};for(const r of e){const e=o(r,t||{},i,n);void 0!==e&&(a[r]=e)}return a}},50429:(e,t,i)=>{"use strict";i.d(t,{f:()=>n,z:()=>a});const n=["row","column"],a=["header","footer"]},17621:(e,t,i)=>{"use strict";i.d(t,{Y:()=>c});var n=i(48823),a=i(19387),o=i(7422),r=i(59159),s=i(99185),l=i(32424),d=i(71693),f=i(75045);function c(e){for(const t of a.tD)h(e,t);u(e,"x"),u(e,"y")}function h(e,t){const{facet:i,config:a,child:s,component:l}=e;if(e.channelHasField(t)){const d=i[t],c=(0,f.ic)("title",null,a,t);let h=(0,o.TN)(d,a,{allowDisabling:!0,includeDefault:void 0===c||!!c});s.component.layoutHeaders[t].title&&(h=(0,n.kJ)(h)?h.join(", "):h,h+=` / ${s.component.layoutHeaders[t].title}`,s.component.layoutHeaders[t].title=null);const u=(0,f.ic)("labelOrient",d.header,a,t),g=null!==d.header&&(0,r.du)(d.header?.labels,a.header.labels,!0),m=(0,r.r3)(["bottom","right"],u)?"footer":"header";l.layoutHeaders[t]={title:null!==d.header?h:null,facetFieldDef:d,[m]:"facet"===t?[]:[p(e,t,g)]}}}function p(e,t,i){const n="row"===t?"height":"width";return{labels:i,sizeSignal:e.child.component.layoutSize.get(n)?e.child.getSizeSignalRef(n):void 0,axes:[]}}function u(e,t){const{child:i}=e;if(i.component.axes[t]){const{layoutHeaders:a,resolve:o}=e.component;if(o.axis[t]=(0,d.j)(o,t),"shared"===o.axis[t]){const o="x"===t?"column":"row",r=a[o];for(const a of i.component.axes[t]){const t="top"===(n=a.get("orient"))||"left"===n||(0,s.Lo)(n)?"header":"footer";r[t]??(r[t]=[p(e,o,!1)]);const i=(0,l.XF)(a,"main",e.config,{header:!0});i&&r[t][0].axes.push(i),a.mainExtracted=!0}}}var n}},82249:(e,t,i)=>{"use strict";i.d(t,{i:()=>g});var n=i(56997),a=i(13586),o=i(59159),r=i(32424),s=i(40325),l=i(19796),d=i(37042),f=i(13922),c=i(39743),h=i(3496),p=i(66151),u=i(58694);class g extends h.Hn{constructor(e,t,i,o,r){super(e,"layer",t,i,r,e.resolve,e.view);const s={...o,...e.width?{width:e.width}:{},...e.height?{height:e.height}:{}};this.children=e.layer.map(((e,t)=>{if((0,a.a3)(e))return new g(e,this,this.getName(`layer_${t}`),s,r);if((0,a.Gw)(e))return new u.g(e,this,this.getName(`layer_${t}`),s,r);throw new Error(n.yw.invalidSpec(e))}))}parseData(){this.component.data=(0,l.IR)(this);for(const e of this.children)e.parseData()}parseLayoutSize(){(0,f.r4)(this)}parseSelections(){this.component.selection={};for(const e of this.children){e.parseSelections();for(const t of(0,o.XP)(e.component.selection))this.component.selection[t]=e.component.selection[t]}}parseMarkGroup(){for(const e of this.children)e.parseMarkGroup()}parseAxesAndHeaders(){(0,s.z)(this)}assembleSelectionTopLevelSignals(e){return this.children.reduce(((e,t)=>t.assembleSelectionTopLevelSignals(e)),e)}assembleSignals(){return this.children.reduce(((e,t)=>e.concat(t.assembleSignals())),(0,r.Mt)(this))}assembleLayoutSignals(){return this.children.reduce(((e,t)=>e.concat(t.assembleLayoutSignals())),(0,d.nh)(this))}assembleSelectionData(e){return this.children.reduce(((e,t)=>t.assembleSelectionData(e)),e)}assembleTitle(){let e=super.assembleTitle();if(e)return e;for(const t of this.children)if(e=t.assembleTitle(),e)return e}assembleLayout(){return null}assembleMarks(){return(0,p.EX)(this,this.children.flatMap((e=>e.assembleMarks())))}assembleLegends(){return this.children.reduce(((e,t)=>e.concat(t.assembleLegends())),(0,c.T)(this))}}},37042:(e,t,i)=>{"use strict";i.d(t,{nh:()=>d,PM:()=>h});var n=i(52262),a=i(49272),o=i(59159),r=i(99185),s=i(62334),l=i(3496);function d(e){return[...f(e,"width"),...f(e,"height"),...f(e,"childWidth"),...f(e,"childHeight")]}function f(e,t){const i="width"===t?"x":"y",o=e.component.layoutSize.get(t);if(!o||"merged"===o)return[];const s=e.getSizeSignalRef(t).signal;if("step"===o){const t=e.getScaleComponent(i);if(t){const n=t.get("type"),o=t.get("range");if((0,a.eO)(n)&&(0,r.GC)(o)){const n=e.scaleName(i);return(0,l.hr)(e.parent)&&"independent"===e.parent.component.resolve.scale[i]?[c(n,o)]:[c(n,o),{name:s,update:h(n,t,`domain('${n}').length`)}]}}throw new Error("layout size is step although width/height is not step.")}if("container"==o){const t=s.endsWith("width"),i=t?"containerSize()[0]":"containerSize()[1]",a=`isFinite(${i}) ? ${i} : ${(0,n.xy)(e.config.view,t?"width":"height")}`;return[{name:s,init:a,on:[{update:a,events:"window:resize"}]}]}return[{name:s,value:o}]}function c(e,t){return{name:`${e}_step`,value:t.step}}function h(e,t,i){const n=t.get("type"),a=t.get("padding"),r=(0,o.du)(t.get("paddingOuter"),a);let l=t.get("paddingInner");return l="band"===n?void 0!==l?l:a:1,`bandspace(${i}, ${(0,s.t_)(l)}, ${(0,s.t_)(r)}) * ${e}_step`}},81923:(e,t,i)=>{"use strict";function n(e){return"childWidth"===e?"width":"childHeight"===e?"height":e}i.d(t,{g:()=>n})},80745:(e,t,i)=>{"use strict";i.d(t,{x:()=>s});var n=i(19387),a=i(7422),o=i(56997),r=i(73651);function s({encoding:e,size:t}){for(const i of n.Kz){const s=(0,n.kq)(i);(0,r.Zz)(t[s])&&(0,a.OV)(e[i])&&(delete t[s],o.ZK(o.yw.stepDropped(s)))}return t}},13922:(e,t,i)=>{"use strict";i.d(t,{r4:()=>c,RO:()=>h,DW:()=>p,Xz:()=>g});var n=i(19387),a=i(52262),o=i(49272),r=i(73651),s=i(99185),l=i(71693),d=i(77719),f=i(81923);function c(e){p(e),u(e,"width"),u(e,"height")}function h(e){p(e);const t=1===e.layout.columns?"width":"childWidth",i=void 0===e.layout.columns?"height":"childHeight";u(e,t),u(e,i)}function p(e){for(const t of e.children)t.parseLayoutSize()}function u(e,t){const i=(0,f.g)(t),a=(0,n.x1)(i),o=e.component.resolve,r=e.component.layoutSize;let s;for(const t of e.children){const n=t.component.layoutSize.getWithExplicit(i),r=o.scale[a]??(0,l.P)(a,e);if("independent"===r&&"step"===n.value){s=void 0;break}if(s){if("independent"===r&&s.value!==n.value){s=void 0;break}s=(0,d.fw)(s,n,i,"")}else s=n}if(s){for(const n of e.children)e.renameSignal(n.getName(i),e.getName(t)),n.component.layoutSize.set(i,"merged",!1);r.setWithExplicit(t,s)}else r.setWithExplicit(t,{explicit:!1,value:void 0})}function g(e){const{size:t,component:i}=e;for(const a of n.Kz){const o=(0,n.kq)(a);if(t[o]){const e=t[o];i.layoutSize.set(o,(0,r.Zz)(e)?"step":e,!0)}else{const t=m(e,o);i.layoutSize.set(o,t,!1)}}}function m(e,t){const i="width"===t?"x":"y",n=e.config,l=e.getScaleComponent(i);if(l){const e=l.get("type"),i=l.get("range");if((0,o.eO)(e)){const e=(0,a.hb)(n.view,t);return(0,s.GC)(i)||(0,r.Zz)(e)?"step":e}return(0,a.xy)(n.view,t)}if(e.hasProjection||"arc"===e.mark)return(0,a.xy)(n.view,t);{const e=(0,a.hb)(n.view,t);return(0,r.Zz)(e)?e.step:e}}},39743:(e,t,i)=>{"use strict";i.d(t,{T:()=>s});var n=i(81213),a=i(59159),o=i(99185),r=i(73416);function s(e){const t=e.component.legends,i={};for(const n of(0,a.XP)(t)){const o=e.getScaleComponent(n),s=(0,a.Pz)(o.get("domains"));if(i[s])for(const e of i[s])(0,r.Np)(e,t[n])||i[s].push(t[n]);else i[s]=[t[n].clone()]}return(0,a.kd)(i).flat().map((t=>function(e,t){const{disable:i,labelExpr:r,selections:s,...l}=e.combine();if(!i){if(!1===t.aria&&null==l.aria&&(l.aria=!1),l.encode?.symbols){const e=l.encode.symbols.update;!e.fill||"transparent"===e.fill.value||e.stroke||l.stroke||(e.stroke={value:"transparent"});for(const t of n.gU)l[t]&&delete e[t]}if(l.title||delete l.title,void 0!==r){let e=r;l.encode?.labels?.update&&(0,o.Lo)(l.encode.labels.update.text)&&(e=(0,a.ko)(r,"datum.label",l.encode.labels.update.text.signal)),function(e,t,i,n){var a,o;e.encode??(e.encode={}),(a=e.encode)[t]??(a[t]={}),(o=e.encode[t]).update??(o.update={}),e.encode[t].update.text=n}(l,"labels",0,{signal:e})}return l}}(t,e.config))).filter((e=>void 0!==e))}},37712:(e,t,i)=>{"use strict";i.d(t,{K:()=>s,F:()=>l});var n=i(81213),a=i(59159),o=i(77719);const r={...n.J$,disable:1,labelExpr:1,selections:1,opacity:1,shape:1,stroke:1,fill:1,size:1,strokeWidth:1,strokeDash:1,encode:1},s=(0,a.XP)(r);class l extends o.P{}},90705:(e,t,i)=>{"use strict";i.d(t,{z2:()=>h,uJ:()=>u});var n=i(48823),a=i(19387),o=i(7422),r=i(78666),s=i(59159),l=i(62334),d=i(20705),f=i(28668),c=i(59071);const h={symbols:function(e,{fieldOrDatumDef:t,model:i,channel:d,legendCmpt:c,legendType:h}){if("symbol"!==h)return;const{markDef:g,encoding:b,config:y,mark:v}=i,_=g.filled&&"trail"!==v;let x={...(0,l.f6)({},i,r.ph),...f.$_(i,{filled:_})};const w=c.get("symbolOpacity")??y.legend.symbolOpacity,$=c.get("symbolFillColor")??y.legend.symbolFillColor,k=c.get("symbolStrokeColor")??y.legend.symbolStrokeColor,T=void 0===w?p(b.opacity)??g.opacity:void 0;if(x.fill)if("fill"===d||_&&d===a.r$)delete x.fill;else if(x.fill.field)$?delete x.fill:(x.fill=(0,l.vS)(y.legend.symbolBaseFillColor??"black"),x.fillOpacity=(0,l.vS)(T??1));else if((0,n.kJ)(x.fill)){const e=u(b.fill??b.color)??g.fill??(_&&g.color);e&&(x.fill=(0,l.vS)(e))}if(x.stroke)if("stroke"===d||!_&&d===a.r$)delete x.stroke;else if(x.stroke.field||k)delete x.stroke;else if((0,n.kJ)(x.stroke)){const e=(0,s.du)(u(b.stroke||b.color),g.stroke,_?g.color:void 0);e&&(x.stroke={value:e})}if(d!==a.JO){const e=(0,o.VQ)(t)&&m(0,c,t);e?x.opacity=[{test:e,...(0,l.vS)(T??1)},(0,l.vS)(y.legend.unselectedOpacity)]:T&&(x.opacity=(0,l.vS)(T))}return x={...x,...e},(0,s.xb)(x)?void 0:x},gradient:function(e,{model:t,legendType:i,legendCmpt:n}){if("gradient"!==i)return;const{config:a,markDef:o,encoding:r}=t;let d={};const f=void 0===(n.get("gradientOpacity")??a.legend.gradientOpacity)?p(r.opacity)||o.opacity:void 0;return f&&(d.opacity=(0,l.vS)(f)),d={...d,...e},(0,s.xb)(d)?void 0:d},labels:function(e,{fieldOrDatumDef:t,model:i,channel:n,legendCmpt:a}){const r=i.legend(n)||{},l=i.config,f=(0,o.VQ)(t)?m(0,a,t):void 0,c=f?[{test:f,value:1},{value:l.legend.unselectedOpacity}]:void 0,{format:h,formatType:p}=r,u=(0,d.bt)(p)?(0,d.Cd)({fieldOrDatumDef:t,field:"datum.value",format:h,formatType:p,config:l}):void 0,g={...c?{opacity:c}:{},...u?{text:u}:{},...e};return(0,s.xb)(g)?void 0:g},entries:function(e,{legendCmpt:t}){return t.get("selections")?.length?{...e,fill:{value:"transparent"}}:e}};function p(e){return g(e,((e,t)=>Math.max(e,t.value)))}function u(e){return g(e,((e,t)=>(0,s.du)(e,t.value)))}function g(e,t){return(0,o.$Z)(e)?(0,n.IX)(e.condition).reduce(t,e.value):(0,o.kJ)(e)?e.value:void 0}function m(e,t,i){const a=t.get("selections");if(!a?.length)return;const o=(0,n.m8)(i.field);return a.map((e=>`(!length(data(${(0,n.m8)((0,s.Xr)(e)+c.ud)})) || (${e}[${o}] && indexof(${e}[${o}], datum.value) >= 0))`)).join(" || ")}},73416:(e,t,i)=>{"use strict";i.d(t,{BQ:()=>y,Np:()=>x});var n=i(19387),a=i(7422),o=i(81213),r=i(31021),s=i(46689),l=i(59159),d=i(62334),f=i(87339),c=i(3496),h=i(71693),p=i(74556),u=i(77719),g=i(37712),m=i(90705),b=i(6837);function y(e){const t=(0,c.gs)(e)?function(e){const{encoding:t}=e,i={};for(const r of[n.r$,...o.gU]){const o=(0,a.EA)(t[r]);o&&e.getScaleComponent(r)&&(r===n.X3&&(0,a.VQ)(o)&&o.type===s.zb||(i[r]=_(e,r)))}return i}(e):function(e){const{legends:t,resolve:i}=e.component;for(const n of e.children){y(n);for(const a of(0,l.XP)(n.component.legends))i.legend[a]=(0,h.j)(e.component.resolve,a),"shared"===i.legend[a]&&(t[a]=x(t[a],n.component.legends[a]),t[a]||(i.legend[a]="independent",delete t[a]))}for(const n of(0,l.XP)(t))for(const t of e.children)t.component.legends[n]&&"shared"===i.legend[n]&&delete t.component.legends[n];return t}(e);return e.component.legends=t,t}function v(e,t,i,n){switch(t){case"disable":return void 0!==i;case"values":return!!i?.values;case"title":if("title"===t&&e===n?.title)return!0}return e===(i||{})[t]}function _(e,t){let i=e.legend(t);const{markDef:n,encoding:o,config:s}=e,d=s.legend,c=new g.F({},function(e,t){const i=e.scaleName(t);if("trail"===e.mark){if("color"===t)return{stroke:i};if("size"===t)return{strokeWidth:i}}return"color"===t?e.markDef.filled?{fill:i}:{stroke:i}:{[t]:i}}(e,t));(0,p.V)(e,t,c);const h=void 0!==i?!i:d.disable;if(c.set("disable",h,void 0!==i),h)return c;i=i||{};const u=e.getScaleComponent(t).get("type"),y=(0,a.EA)(o[t]),_=(0,a.VQ)(y)?(0,r.Q8)(y.timeUnit)?.unit:void 0,x=i.orient||s.legend.orient||"right",w=(0,b.VC)({legend:i,channel:t,timeUnit:_,scaleType:u}),$={legend:i,channel:t,model:e,markDef:n,encoding:o,fieldOrDatumDef:y,legendConfig:d,config:s,scaleType:u,orient:x,legendType:w,direction:(0,b.Mg)({legend:i,legendType:w,orient:x,legendConfig:d})};for(const n of g.K){if("gradient"===w&&n.startsWith("symbol")||"symbol"===w&&n.startsWith("gradient"))continue;const a=n in b.vh?b.vh[n]($):i[n];if(void 0!==a){const o=v(a,n,i,e.fieldDef(t));(o||void 0===s.legend[n])&&c.set(n,a,o)}}const k=i?.encoding??{},T=c.get("selections"),D={},O={fieldOrDatumDef:y,model:e,channel:t,legendCmpt:c,legendType:w};for(const t of["labels","legend","title","symbols","gradient","entries"]){const i=(0,f.Q)(k[t]??{},e),n=t in m.z2?m.z2[t](i,O):i;void 0===n||(0,l.xb)(n)||(D[t]={...T?.length&&(0,a.VQ)(y)?{name:`${(0,l.Xr)(y.field)}_legend_${t}`}:{},...T?.length?{interactive:!!T}:{},update:n})}return(0,l.xb)(D)||c.set("encode",D,!!i?.encoding),c}function x(e,t){if(!e)return t.clone();const i=e.getWithExplicit("orient"),n=t.getWithExplicit("orient");if(i.explicit&&n.explicit&&i.value!==n.value)return;let a=!1;for(const i of g.K){const n=(0,u.fw)(e.getWithExplicit(i),t.getWithExplicit(i),i,"legend",((e,t)=>{switch(i){case"symbolType":return n=e,"circle"===(o=t).value?o:n;case"title":return(0,d.f)(e,t);case"type":return a=!0,(0,u.sC)("symbol")}var n,o;return(0,u.cT)(e,t,i,"legend")}));e.setWithExplicit(i,n)}return a&&(e.implicit?.encode?.gradient&&(0,l.tL)(e.implicit,["encode","gradient"]),e.explicit?.encode?.gradient&&(0,l.tL)(e.explicit,["encode","gradient"])),e}},6837:(e,t,i)=>{"use strict";i.d(t,{vh:()=>c,VC:()=>h,Mg:()=>p});var n=i(48823),a=i(19387),o=i(7422),r=i(49272),s=i(59159),l=i(99185),d=i(20705),f=i(90705);const c={direction:({direction:e})=>e,format:({fieldOrDatumDef:e,legend:t,config:i})=>{const{format:n,formatType:a}=t;return(0,d.Qc)(e,e.type,n,a,i,!1)},formatType:({legend:e,fieldOrDatumDef:t,scaleType:i})=>{const{formatType:n}=e;return(0,d.bH)(n,t,i)},gradientLength:e=>{const{legend:t,legendConfig:i}=e;return t.gradientLength??i.gradientLength??function({legendConfig:e,model:t,direction:i,orient:n,scaleType:a}){const{gradientHorizontalMaxLength:o,gradientHorizontalMinLength:s,gradientVerticalMaxLength:l,gradientVerticalMinLength:d}=e;if((0,r.Ri)(a))return"horizontal"===i?"top"===n||"bottom"===n?u(t,"width",s,o):s:u(t,"height",d,l)}(e)},labelOverlap:({legend:e,legendConfig:t,scaleType:i})=>e.labelOverlap??t.labelOverlap??function(e){if((0,s.r3)(["quantile","threshold","log","symlog"],e))return"greedy"}(i),symbolType:({legend:e,markDef:t,channel:i,encoding:n})=>e.symbolType??function(e,t,i,n){if("shape"!==t){const e=(0,f.uJ)(i)??n;if(e)return e}switch(e){case"bar":case"rect":case"image":case"square":return"square";case"line":case"trail":case"rule":return"stroke";case"arc":case"point":case"circle":case"tick":case"geoshape":case"area":case"text":return"circle"}}(t.type,i,n.shape,t.shape),title:({fieldOrDatumDef:e,config:t})=>(0,o.TN)(e,t,{allowDisabling:!0}),type:({legendType:e,scaleType:t,channel:i})=>{if((0,a.tE)(i)&&(0,r.Ri)(t)){if("gradient"===e)return}else if("symbol"===e)return;return e},values:({fieldOrDatumDef:e,legend:t})=>function(e,t){const i=e.values;return(0,n.kJ)(i)?(0,o.pq)(t,i):(0,l.Lo)(i)?i:void 0}(t,e)};function h(e){const{legend:t}=e;return(0,s.du)(t.type,function({channel:e,timeUnit:t,scaleType:i}){if((0,a.tE)(e)){if((0,s.r3)(["quarter","month","day"],t))return"symbol";if((0,r.Ri)(i))return"gradient"}return"symbol"}(e))}function p({legendConfig:e,legendType:t,orient:i,legend:n}){return n.direction??e[t?"gradientDirection":"symbolDirection"]??function(e,t){switch(e){case"top":case"bottom":return"horizontal";case"left":case"right":case"none":case void 0:return;default:return"gradient"===t?"horizontal":void 0}}(i,t)}function u(e,t,i,n){return{signal:`clamp(${e.getSizeSignalRef(t).signal}, ${i}, ${n})`}}},31997:(e,t,i)=>{"use strict";i.d(t,{N:()=>a});var n=i(28668);const a={vgMark:"arc",encodeEntry:e=>({...n.R3(e,{align:"ignore",baseline:"ignore",color:"include",size:"ignore",orient:"ignore",theta:"ignore"}),...n.ul("x",e,{defaultPos:"mid"}),...n.ul("y",e,{defaultPos:"mid"}),...n.mr(e,"radius","arc"),...n.mr(e,"theta","arc")})}},6638:(e,t,i)=>{"use strict";i.d(t,{S:()=>a});var n=i(28668);const a={vgMark:"area",encodeEntry:e=>({...n.R3(e,{align:"ignore",baseline:"ignore",color:"include",orient:"include",size:"ignore",theta:"ignore"}),...n.Jc("x",e,{defaultPos:"zeroOrMin",defaultPos2:"zeroOrMin",range:"horizontal"===e.markDef.orient}),...n.Jc("y",e,{defaultPos:"zeroOrMin",defaultPos2:"zeroOrMin",range:"vertical"===e.markDef.orient}),...n.ri(e)})}},97475:(e,t,i)=>{"use strict";i.d(t,{K:()=>a});var n=i(28668);const a={vgMark:"rect",encodeEntry:e=>({...n.R3(e,{align:"ignore",baseline:"ignore",color:"include",orient:"ignore",size:"ignore",theta:"ignore"}),...n.mr(e,"x","bar"),...n.mr(e,"y","bar")})}},72707:(e,t,i)=>{"use strict";i.d(t,{P:()=>d});var n=i(59159),a=i(62334),o=i(99185),r=i(8707),s=i(58818),l=i(71528);function d(e){const{markDef:t,config:i}=e,n=(0,a.is)("aria",t,i);return!1===n?{}:{...n?{aria:n}:{},...f(e),...c(e)}}function f(e){const{mark:t,markDef:i,config:n}=e;if(!1===n.aria)return{};const r=(0,a.is)("ariaRoleDescription",i,n);return null!=r?{ariaRoleDescription:{value:r}}:t in o.k0?{}:{ariaRoleDescription:{value:t}}}function c(e){const{encoding:t,markDef:i,config:o,stack:d}=e,f=t.description;if(f)return(0,r.x)(e,f,"description",(t=>(0,s.x)(t,e.config)));const c=(0,a.is)("description",i,o);if(null!=c)return{description:(0,a.vS)(c)};if(!1===o.aria)return{};const h=(0,l.k_)(t,d,o);return(0,n.xb)(h)?void 0:{description:{signal:(0,n.qh)(h).map((([e,t],i)=>`"${i>0?"; ":""}${e}: " + (${t})`)).join(" + ")}}}},50386:(e,t,i)=>{"use strict";i.d(t,{R3:()=>y});var n=i(48823),a=i(19387),o=i(78666),r=i(49272),s=i(59159),l=i(99185),d=i(62334),f=i(72707),c=i(49140),h=i(1432),p=i(58818),u=i(71528),g=i(43507),m=i(77854);i(8707),i(97470),i(77459),i(1425);const b=new Set(["aria","width","height"]);function y(e,t){const{fill:i,stroke:n}="include"===t.color?(0,c.$)(e):{};return{..._(e.markDef,t),...v(e,"fill",i),...v(e,"stroke",n),...(0,h.S)("opacity",e),...(0,h.S)("fillOpacity",e),...(0,h.S)("strokeOpacity",e),...(0,h.S)("strokeWidth",e),...(0,h.S)("strokeDash",e),...(0,m.Y)(e),...(0,u.Md)(e),...(0,p.f)(e,"href"),...(0,f.P)(e)}}function v(e,t,i){const{config:l,mark:f,markDef:c}=e;if("hide"===(0,d.is)("invalid",c,l)&&i&&!(0,o.hx)(f)){const o=function(e,{invalid:t=!1,channels:i}){const n=i.reduce(((t,i)=>{const n=e.getScaleComponent(i);if(n){const a=n.get("type"),o=e.vgField(i,{expr:"datum"});o&&(0,r.W8)(a)&&(t[o]=!0)}return t}),{}),a=(0,s.XP)(n);if(a.length>0){const e=t?"||":"&&";return a.map((e=>(0,g.O1)(e,t))).join(` ${e} `)}}(e,{invalid:!0,channels:a.cA});if(o)return{[t]:[{test:o,value:null},...(0,n.IX)(i)]}}return i?{[t]:i}:{}}function _(e,t){return l.wW.reduce(((i,n)=>(b.has(n)||void 0===e[n]||"ignore"===t[n]||(i[n]=(0,d.vS)(e[n])),i)),{})}},49140:(e,t,i)=>{"use strict";i.d(t,{$:()=>s});var n=i(56997),a=i(59159),o=i(62334),r=i(1432);function s(e,t={filled:void 0}){const{markDef:i,encoding:s,config:l}=e,{type:d}=i,f=t.filled??(0,o.is)("filled",i,l),c=(0,a.r3)(["bar","point","circle","square","geoshape"],d)?"transparent":void 0,h=(0,o.is)(!0===f?"color":void 0,i,l,{vgChannel:"fill"})??l.mark[!0===f&&"color"]??c,p=(0,o.is)(!1===f?"color":void 0,i,l,{vgChannel:"stroke"})??l.mark[!1===f&&"color"],u=f?"fill":"stroke",g={...h?{fill:(0,o.vS)(h)}:{},...p?{stroke:(0,o.vS)(p)}:{}};return i.color&&(f?i.fill:i.stroke)&&n.ZK(n.yw.droppingColor("property",{fill:"fill"in i,stroke:"stroke"in i})),{...g,...(0,r.S)("color",e,{vgChannel:u,defaultValue:f?h:p}),...(0,r.S)("fill",e,{defaultValue:s.fill?h:void 0}),...(0,r.S)("stroke",e,{defaultValue:s.stroke?p:void 0})}}},8707:(e,t,i)=>{"use strict";i.d(t,{x:()=>s});var n=i(48823),a=i(7422),o=i(84879),r=i(77974);function s(e,t,i,s){const l=(0,a.dB)(t)&&t.condition,d=s(t);return l?{[i]:[...(0,n.IX)(l).map((t=>{const i=s(t);if((0,a.Ql)(t)){const{param:n,empty:a}=t;return{test:(0,r.rP)(e,{param:n,empty:a}),...i}}return{test:(0,o.t)(e,t.test),...i}})),...void 0!==d?[d]:[]]}:void 0!==d?{[i]:d}:{}}},32844:(e,t,i)=>{"use strict";i.d(t,{r:()=>l,g:()=>d});var n=i(19387),a=i(49272),o=i(59159),r=i(62334),s=i(43507);function l(e){const{config:t,markDef:i}=e;if((0,r.is)("invalid",i,t)){const t=function(e,{invalid:t=!1,channels:i}){const n=i.reduce(((t,i)=>{const n=e.getScaleComponent(i);if(n){const o=n.get("type"),r=e.vgField(i,{expr:"datum"});r&&(0,a.W8)(o)&&(t[r]=!0)}return t}),{}),r=(0,o.XP)(n);if(r.length>0){const e=t?"||":"&&";return r.map((e=>(0,s.O1)(e,t))).join(` ${e} `)}}(e,{channels:n.Kz});if(t)return{defined:{signal:t}}}return{}}function d(e,t){if(void 0!==t)return{[e]:(0,r.vS)(t)}}},28668:(e,t,i)=>{"use strict";i.d(t,{R3:()=>n.R3,$_:()=>a.$,xc:()=>o.x,ri:()=>r.r,ry:()=>r.g,Sm:()=>s.S,ul:()=>l.ul,Jc:()=>d.Jc,mr:()=>f.mr,fL:()=>c.f,Md:()=>h.Md});var n=i(50386),a=i(49140),o=i(8707),r=i(32844),s=i(1432),l=i(97470),d=i(77459),f=i(1425),c=i(58818),h=i(71528);i(72707)},1432:(e,t,i)=>{"use strict";i.d(t,{S:()=>r});var n=i(62334),a=i(8707),o=i(43507);function r(e,t,i={}){const{markDef:r,encoding:s,config:l}=t,{vgChannel:d}=i;let{defaultRef:f,defaultValue:c}=i;void 0===f&&(c??(c=(0,n.is)(e,r,l,{vgChannel:d,ignoreVgConfig:!0})),void 0!==c&&(f=(0,n.vS)(c)));const h=s[e];return(0,a.x)(t,h,d??e,(i=>o.kh({channel:e,channelDef:i,markDef:r,config:l,scaleName:t.scaleName(e),scale:t.getScaleComponent(e),stack:null,defaultRef:f})))}},53748:(e,t,i)=>{"use strict";i.d(t,{o:()=>a});var n=i(19387);function a(e,t){const i=t[(0,n.HU)(e)];if(i)return i}},17931:(e,t,i)=>{"use strict";i.d(t,{i:()=>d});var n=i(19387),a=i(56997),o=i(99185),r=i(62334);const s={left:"x",center:"xc",right:"x2"},l={top:"y",middle:"yc",bottom:"y2"};function d(e,t,i,d="middle"){if("radius"===e||"theta"===e)return(0,n.xd)(e);const f="x"===e?"align":"baseline",c=(0,r.is)(f,t,i);let h;return(0,o.Lo)(c)?(a.ZK(a.yw.rangeMarkAlignmentCannotBeExpression(f)),h=void 0):h=c,"x"===e?s[h||("top"===d?"left":"center")]:l[h||d]}},97470:(e,t,i)=>{"use strict";i.d(t,{ul:()=>f,_I:()=>c});var n=i(19387),a=i(7422),o=i(49272),r=i(59159),s=i(62334),l=i(53748),d=i(43507);function f(e,t,{defaultPos:i,vgChannel:o}){const{encoding:r,markDef:s,config:f,stack:h}=t,p=r[e],u=r[(0,n.Hy)(e)],g=t.scaleName(e),m=t.getScaleComponent(e),b=(0,l.o)(e,s),y=c({model:t,defaultPos:i,channel:e,scaleName:g,scale:m}),v=!p&&(0,n.Zk)(e)&&(r.latitude||r.longitude)?{field:t.getName(e)}:function(e){const{channel:t,channelDef:i,scaleName:n,stack:o,offset:r,markDef:s}=e;if((0,a.v3)(i)&&o&&t===o.fieldChannel){if((0,a.VQ)(i)){let e=i.bandPosition;if(void 0!==e||"text"!==s.type||"radius"!==t&&"theta"!==t||(e=.5),void 0!==e)return d.Ry({scaleName:n,fieldOrDatumDef:i,startSuffix:"start",bandPosition:e,offset:r})}return d.IL(i,n,{suffix:"end"},{offset:r})}return d.DP(e)}({channel:e,channelDef:p,channel2Def:u,markDef:s,config:f,scaleName:g,scale:m,stack:h,offset:b,defaultRef:y});return v?{[o||e]:v}:void 0}function c({model:e,defaultPos:t,channel:i,scaleName:a,scale:l}){const{markDef:f,config:c}=e;return()=>{const h=(0,n.VY)(i),p=(0,n.xd)(i),u=(0,s.is)(i,f,c,{vgChannel:p});if(void 0!==u)return d.su(i,u);switch(t){case"zeroOrMin":case"zeroOrMax":if(a){const e=l.get("type");if((0,r.r3)([o.N3.LOG,o.N3.TIME,o.N3.UTC],e));else if(l.domainDefinitelyIncludesZero())return{scale:a,value:0}}if("zeroOrMin"===t)return"y"===h?{field:{group:"height"}}:{value:0};switch(h){case"radius":return{signal:`min(${e.width.signal},${e.height.signal})/2`};case"theta":return{signal:"2*PI"};case"x":return{field:{group:"width"}};case"y":return{value:0}}break;case"mid":return{...e[(0,n.kq)(i)],mult:.5}}}}},77459:(e,t,i)=>{"use strict";i.d(t,{Jc:()=>h,jv:()=>p});var n=i(19387),a=i(7422),o=i(56997),r=i(78666),s=i(62334),l=i(53748),d=i(17931),f=i(97470),c=i(43507);function h(e,t,{defaultPos:i,defaultPos2:n,range:a}){return a?p(e,t,{defaultPos:i,defaultPos2:n}):(0,f.ul)(e,t,{defaultPos:i})}function p(e,t,{defaultPos:i,defaultPos2:o}){const{markDef:r,config:h}=t,p=(0,n.Hy)(e),g=(0,n.kq)(e),m=function(e,t,i){const{encoding:o,mark:r,markDef:d,stack:h,config:p}=e,g=(0,n.VY)(i),m=(0,n.kq)(i),b=(0,n.xd)(i),y=o[g],v=e.scaleName(g),_=e.getScaleComponent(g),x=i in o||i in d?(0,l.o)(i,e.markDef):(0,l.o)(g,e.markDef);if(!y&&("x2"===i||"y2"===i)&&(o.latitude||o.longitude)){const t=(0,n.kq)(i),a=e.markDef[t];return null!=a?{[t]:{value:a}}:{[b]:{field:e.getName(i)}}}const w=function({channel:e,channelDef:t,channel2Def:i,markDef:n,config:o,scaleName:r,scale:s,stack:l,offset:d,defaultRef:f}){return(0,a.v3)(t)&&l&&e.charAt(0)===l.fieldChannel.charAt(0)?c.IL(t,r,{suffix:"start"},{offset:d}):c.DP({channel:e,channelDef:i,scaleName:r,scale:s,stack:l,markDef:n,config:o,offset:d,defaultRef:f})}({channel:i,channelDef:y,channel2Def:o[i],markDef:d,config:p,scaleName:v,scale:_,stack:h,offset:x,defaultRef:void 0});return void 0!==w?{[b]:w}:u(i,d)||u(i,{[i]:(0,s.eq)(i,d,p.style),[m]:(0,s.eq)(m,d,p.style)})||u(i,p[r])||u(i,p.mark)||{[b]:(0,f._I)({model:e,defaultPos:t,channel:i,scaleName:v,scale:_})()}}(t,o,p),b=m[g]?(0,d.i)(e,r,h):(0,n.xd)(e);return{...(0,f.ul)(e,t,{defaultPos:i,vgChannel:b}),...m}}function u(e,t){const i=(0,n.kq)(e),a=(0,n.xd)(e);if(void 0!==t[a])return{[a]:c.su(e,t[a])};if(void 0!==t[e])return{[a]:c.su(e,t[e])};if(t[i]){const n=t[i];if(!(0,r.d)(n))return{[i]:c.su(e,n)};o.ZK(o.yw.relativeBandSizeNotSupported(i))}}},1425:(e,t,i)=>{"use strict";i.d(t,{mr:()=>v});var n=i(48823),a=i(35647),o=i(19387),r=i(7422),s=i(52262),l=i(56997),d=i(78666),f=i(49272),c=i(99185),h=i(62334),p=i(1432),u=i(53748),g=i(17931),m=i(97470),b=i(77459),y=i(43507);function v(e,t,i){const{config:s,encoding:v,markDef:$}=e,k=(0,o.Hy)(t),T=(0,o.kq)(t),D=v[t],O=v[k],S=e.getScaleComponent(t),R=S?S.get("type"):void 0,A=e.scaleName(t),E=$.orient,F=v[T]??v.size??(0,h.is)("size",$,s,{vgChannel:T}),q="bar"===i&&("x"===t?"vertical"===E:"horizontal"===E);return!(0,r.VQ)(D)||!((0,a.f$)(D.bin)||(0,a.YK)(D.bin)||D.timeUnit&&!O)||F&&!(0,d.d)(F)||(0,f.eO)(R)?((0,r.v3)(D)&&(0,f.eO)(R)||q)&&!O?function(e,t,i){const{markDef:a,encoding:s,config:f,stack:b}=i,v=a.orient,x=i.scaleName(t),w=i.getScaleComponent(t),$=(0,o.kq)(t),k=(0,o.Hy)(t),T="horizontal"===v&&"y"===t||"vertical"===v&&"x"===t;let D;(s.size||a.size)&&(T?D=(0,p.S)("size",i,{vgChannel:$,defaultRef:(0,h.vS)(a.size)}):l.ZK(l.yw.cannotApplySizeToNonOrientedMark(a.type)));const O=(0,r.sp)({channel:t,fieldDef:e,markDef:a,config:f,scaleType:w?.get("type"),useVlSizeChannel:T});D=D||{[$]:_($,x,w,f,O)};const S="band"===w?.get("type")&&"band"in D[$]?"top":"middle",R=(0,g.i)(t,a,f,S),A="xc"===R||"yc"===R,E=(0,u.o)(t,a),F=y.DP({channel:t,channelDef:e,markDef:a,config:f,scaleName:x,scale:w,stack:b,offset:E,defaultRef:(0,m._I)({model:i,defaultPos:"mid",channel:t,scaleName:x,scale:w}),bandPosition:A?.5:(0,c.Lo)(O)?{signal:`(1-${O})/2`}:(0,d.d)(O)?(1-O.band)/2:0});if($)return{[R]:F,...D};{const e=(0,o.xd)(k),t=D[$],i=E?{...t,offset:E}:t;return{[R]:F,[e]:(0,n.kJ)(F)?[F[0],{...F[1],offset:i}]:{...F,offset:i}}}}(D,t,e):(0,b.jv)(t,e,{defaultPos:"zeroOrMax",defaultPos2:"zeroOrMin"}):function({fieldDef:e,fieldDef2:t,channel:i,bandSize:n,scaleName:s,markDef:f,spacing:h=0,axisTranslate:p,reverse:g,config:m}){const b=(0,o.Hy)(i),v=(0,o.xd)(i),_=(0,o.xd)(b),$=(0,u.o)(i,f),k=(0,c.Lo)(n)?{signal:`(1-${n.signal})/2`}:(0,d.d)(n)?(1-n.band)/2:.5;if((0,a.f$)(e.bin)||e.timeUnit)return{[_]:w({channel:i,fieldDef:e,scaleName:s,markDef:f,bandPosition:k,offset:x(b,h,g,p,$),config:m}),[v]:w({channel:i,fieldDef:e,scaleName:s,markDef:f,bandPosition:(0,c.Lo)(k)?{signal:`1-${k.signal}`}:1-k,offset:x(i,h,g,p,$),config:m})};if((0,a.YK)(e.bin)){const n=y.IL(e,s,{},{offset:x(b,h,g,p,$)});if((0,r.VQ)(t))return{[_]:n,[v]:y.IL(t,s,{},{offset:x(i,h,g,p,$)})};if((0,a.dt)(e.bin)&&e.bin.step)return{[_]:n,[v]:{signal:`scale("${s}", ${(0,r.jd)(e,{expr:"datum"})} + ${e.bin.step})`,offset:x(i,h,g,p,$)}}}l.ZK(l.yw.channelRequiredForBinned(b))}({fieldDef:D,fieldDef2:O,channel:t,markDef:$,scaleName:A,bandSize:(0,r.sp)({channel:t,fieldDef:D,markDef:$,config:s,scaleType:R}),axisTranslate:e.component.axes[t]?.[0]?.get("translate")??.5,spacing:(0,o.Zk)(t)?(0,h.is)("binSpacing",$,s):void 0,reverse:S.get("reverse"),config:s})}function _(e,t,i,a,o){if((0,d.d)(o)){if(!i)return{mult:o.band,field:{group:e}};{const e=i.get("type");if("band"===e)return{scale:t,band:o.band};1!==o.band&&(l.ZK(l.yw.cannotUseRelativeBandSizeWithNonBandScale(e)),o=void 0)}}else{if((0,c.Lo)(o))return o;if(o)return{value:o}}if(i){const e=i.get("range");if((0,c.GC)(e)&&(0,n.hj)(e.step))return{value:e.step-2}}return{value:(0,s.M)(a.view,e)-2}}function x(e,t,i,n,a){if((0,o.q1)(e))return 0;const r="x"===e||"y2"===e?-t/2:t/2;if((0,c.Lo)(i)||(0,c.Lo)(a)||(0,c.Lo)(n)){const e=(0,h.t_)(i),t=(0,h.t_)(a),o=(0,h.t_)(n);return{signal:(o?`${o} + `:"")+(e?`(${e} ? -1 : 1) * `:"")+(t?`(${t} + ${r})`:r)}}return a=a||0,n+(i?-a-r:+a+r)}function w({channel:e,fieldDef:t,scaleName:i,markDef:n,bandPosition:a,offset:o,config:r}){const s=y.Ry({scaleName:i,fieldOrDatumDef:t,bandPosition:a,offset:o});return y.NX({fieldDef:t,channel:e,markDef:n,ref:s,config:r})}},58818:(e,t,i)=>{"use strict";i.d(t,{f:()=>s,x:()=>l});var n=i(7422),a=i(62334),o=i(20705),r=i(8707);function s(e,t="text"){const i=e.encoding[t];return(0,r.x)(e,i,t,(t=>l(t,e.config)))}function l(e,t,i="datum"){if(e){if((0,n.kJ)(e))return(0,a.vS)(e.value);if((0,n.v3)(e)){const{format:a,formatType:r}=(0,n.o7)(e);return(0,o.s0)({fieldOrDatumDef:e,format:a,formatType:r,expr:i,config:t})}}}},71528:(e,t,i)=>{"use strict";i.d(t,{Md:()=>u,k_:()=>g});var n=i(48823),a=i(35647),o=i(19387),r=i(7422),s=i(20640),l=i(59159),d=i(99185),f=i(62334),c=i(20705),h=i(8707),p=i(58818);function u(e,t={}){const{encoding:i,markDef:a,config:o,stack:r}=e,s=i.tooltip;if((0,n.kJ)(s))return{tooltip:m({tooltip:s},r,o,t)};{const l=t.reactiveGeom?"datum.datum":"datum";return(0,h.x)(e,s,"tooltip",(e=>{const s=(0,p.x)(e,o,l);if(s)return s;if(null===e)return;let c=(0,f.is)("tooltip",a,o);return!0===c&&(c={content:"encoding"}),(0,n.HD)(c)?{value:c}:(0,n.Kn)(c)?(0,d.Lo)(c)?c:"encoding"===c.content?m(i,r,o,t):{signal:l}:void 0}))}}function g(e,t,i,{reactiveGeom:l}={}){const d={},f=l?"datum.datum":"datum",h=[];function u(s,l){const u=(0,o.VY)(l),g=(0,r.tV)(s)?s:{...s,type:e[u].type},m=g.title||(0,r.oc)(g,i),b=(0,n.IX)(m).join(", ");let y;if((0,o.Zk)(l)){const n="x"===l?"x2":"y2",o=(0,r.Vm)(e[n]);if((0,a.YK)(g.bin)&&o){const e=(0,r.jd)(g,{expr:f}),t=(0,r.jd)(o,{expr:f}),{format:a,formatType:s}=(0,r.o7)(g);y=(0,c.w1)(e,t,a,s,i),d[n]=!0}else if(t&&t.fieldChannel===l&&"normalize"===t.offset){const{format:e,formatType:t}=(0,r.o7)(g);y=(0,c.s0)({fieldOrDatumDef:g,format:e,formatType:t,expr:f,config:i,normalizeStack:!0}).signal}}y??(y=(0,p.x)(g,i,f).signal),h.push({channel:l,key:b,value:y})}(0,s.Ed)(e,((e,t)=>{(0,r.VQ)(e)?u(e,t):(0,r.Xi)(e)&&u(e.condition,t)}));const g={};for(const{channel:e,key:t,value:i}of h)d[e]||g[t]||(g[t]=i);return g}function m(e,t,i,{reactiveGeom:n}={}){const a=g(e,t,i,{reactiveGeom:n}),o=(0,l.qh)(a).map((([e,t])=>`"${e}": ${t}`));return o.length>0?{signal:`{${o.join(", ")}}`}:void 0}},43507:(e,t,i)=>{"use strict";i.d(t,{DP:()=>y,NX:()=>v,O1:()=>x,Rc:()=>w,IL:()=>$,Ry:()=>k,kh:()=>T,su:()=>D});var n=i(48823),a=i(24430),o=i(35647),r=i(19387),s=i(7422),l=i(62343),d=i(77125),f=i(56997),c=i(78666),h=i(21066),p=i(49272),u=i(46689),g=i(59159),m=i(99185),b=i(62334);function y(e){const{channel:t,channelDef:i,markDef:n,scale:o,config:r}=e,l=T(e);return(0,s.VQ)(i)&&!(0,a.Ib)(i.aggregate)&&o&&(0,p.Ri)(o.get("type"))&&!1===o.get("zero")?v({fieldDef:i,channel:t,markDef:n,ref:l,config:r}):l}function v({fieldDef:e,channel:t,markDef:i,ref:n,config:a}){return(0,c.hx)(i.type)||null===(0,b.is)("invalid",i,a)?n:[_(e,t),n]}function _(e,t){return{test:x(e,!0),..."y"===(0,r.VY)(t)?{field:{group:"height"}}:{value:0}}}function x(e,t=!0){return(0,h.B3)((0,n.HD)(e)?e:(0,s.jd)(e,{expr:"datum"}),!t)}function w(e){const{datum:t}=e;return(0,l.v9)(t)?(0,l.vb)(t):`${(0,g.Pz)(t)}`}function $(e,t,i,n){const a={};if(t&&(a.scale=t),(0,s.Iu)(e)){const{datum:t}=e;(0,l.v9)(t)?a.signal=(0,l.vb)(t):(0,m.Lo)(t)?a.signal=t.signal:(0,d.T)(t)?a.signal=t.expr:a.value=t}else a.field=(0,s.jd)(e,i);if(n){const{offset:e,band:t}=n;e&&(a.offset=e),t&&(a.band=t)}return a}function k({scaleName:e,fieldOrDatumDef:t,fieldOrDatumDef2:i,offset:n,startSuffix:a,bandPosition:o=.5}){const r=0<o&&o<1?"datum":void 0,l=(0,s.jd)(t,{expr:r,suffix:a}),d=void 0!==i?(0,s.jd)(i,{expr:r}):(0,s.jd)(t,{suffix:"end",expr:r}),f={};if(0===o||1===o){f.scale=e;const t=0===o?l:d;f.field=t}else{const t=(0,m.Lo)(o)?`${o.signal} * ${l} + (1-${o.signal}) * ${d}`:`${o} * ${l} + ${1-o} * ${d}`;f.signal=`scale("${e}", ${t})`}return n&&(f.offset=n),f}function T({channel:e,channelDef:t,channel2Def:i,markDef:a,config:l,scaleName:d,scale:c,stack:h,offset:g,defaultRef:m,bandPosition:b}){if(t){if((0,s.v3)(t)){if((0,s.tV)(t)){b??(b=(0,s.hK)({fieldDef:t,fieldDef2:i,markDef:a,config:l}));const{bin:n,timeUnit:c,type:p}=t;if((0,o.f$)(n)||b&&c&&p===u.Dw)return h&&h.impute?$(t,d,{binSuffix:"mid"},{offset:g}):b?k({scaleName:d,fieldOrDatumDef:t,bandPosition:b,offset:g}):$(t,d,(0,s.Wd)(t,e)?{binSuffix:"range"}:{},{offset:g});if((0,o.YK)(n)){if((0,s.VQ)(i))return k({scaleName:d,fieldOrDatumDef:t,fieldOrDatumDef2:i,bandPosition:b,offset:g});{const t=e===r.X?r.X2:r.Y2;f.ZK(f.yw.channelRequiredForBinned(t))}}}const n=c?.get("type");return $(t,d,(0,p.eO)(n)?{binSuffix:"range"}:{},{offset:g,band:"band"===n?b??t.bandPosition??.5:void 0})}if((0,s.kJ)(t)){const i=g?{offset:g}:{};return{...D(e,t.value),...i}}}return(0,n.mf)(m)&&(m=m()),m?{...m,...g?{offset:g}:{}}:m}function D(e,t){return(0,g.r3)(["x","x2"],e)&&"width"===t?{field:{group:"width"}}:(0,g.r3)(["y","y2"],e)&&"height"===t?{field:{group:"height"}}:(0,b.vS)(t)}},77854:(e,t,i)=>{"use strict";i.d(t,{Y:()=>s});var n=i(7422),a=i(78666),o=i(62334),r=i(8707);function s(e){const{encoding:t,mark:i}=e,s=t.order;return!(0,a.hx)(i)&&(0,n.kJ)(s)?(0,r.x)(e,s,"zindex",(e=>(0,o.vS)(e.value))):{}}},40760:(e,t,i)=>{"use strict";i.d(t,{S:()=>r});var n=i(7422),a=i(46689),o=i(28668);const r={vgMark:"shape",encodeEntry:e=>({...o.R3(e,{align:"ignore",baseline:"ignore",color:"include",size:"ignore",orient:"ignore",theta:"ignore"})}),postEncodingTransform:e=>{const{encoding:t}=e,i=t.shape;return[{type:"geoshape",projection:e.projectionName(),...i&&(0,n.VQ)(i)&&i.type===a.zb?{field:(0,n.jd)(i,{expr:"datum"})}:{}}]}}},60492:(e,t,i)=>{"use strict";i.d(t,{B:()=>a});var n=i(28668);const a={vgMark:"image",encodeEntry:e=>({...n.R3(e,{align:"ignore",baseline:"ignore",color:"ignore",orient:"ignore",size:"ignore",theta:"ignore"}),...n.mr(e,"x","image"),...n.mr(e,"y","image"),...n.fL(e,"url")})}},36899:(e,t,i)=>{"use strict";i.d(t,{U:()=>h,N:()=>p});var n=i(35647),a=i(7422),o=i(20640),r=i(77125),s=i(56997),l=i(78666),d=i(46689),f=i(59159),c=i(62334);function h(e,t,i){const h=(0,r.K)(e),p=(0,c.is)("orient",h,i);if(h.orient=function(e,t,i){switch(e){case l.e_:case l.Md:case l.Zp:case l.lD:case l.CH:case l.k4:return}const{x:o,y:r,x2:s,y2:f}=t;switch(e){case l.u3:if((0,a.VQ)(o)&&((0,n.YK)(o.bin)||(0,a.VQ)(r)&&r.aggregate&&!o.aggregate))return"vertical";if((0,a.VQ)(r)&&((0,n.YK)(r.bin)||(0,a.VQ)(o)&&o.aggregate&&!r.aggregate))return"horizontal";if(f||s){if(i)return i;if(!s&&((0,a.VQ)(o)&&o.type===d.ql&&!(0,n.f$)(o.bin)||(0,a.vA)(o)))return"horizontal";if(!f&&((0,a.VQ)(r)&&r.type===d.ql&&!(0,n.f$)(r.bin)||(0,a.vA)(r)))return"vertical"}case l.gv:if(s&&(!(0,a.VQ)(o)||!(0,n.YK)(o.bin))&&f&&(!(0,a.VQ)(r)||!(0,n.YK)(r.bin)))return;case l.q1:if(f)return(0,a.VQ)(r)&&(0,n.YK)(r.bin)?"horizontal":"vertical";if(s)return(0,a.VQ)(o)&&(0,n.YK)(o.bin)?"vertical":"horizontal";if(e===l.gv){if(o&&!r)return"vertical";if(r&&!o)return"horizontal"}case l.fq:case l.Bw:{const t=(0,a.OV)(o),n=(0,a.OV)(r);if(i)return i;if(t&&!n)return"tick"!==e?"horizontal":"vertical";if(!t&&n)return"tick"!==e?"vertical":"horizontal";if(t&&n){const t=o,i=r,n=t.type===d.Dw,a=i.type===d.Dw;return n&&!a?"tick"!==e?"vertical":"horizontal":!n&&a?"tick"!==e?"horizontal":"vertical":!t.aggregate&&i.aggregate?"tick"!==e?"vertical":"horizontal":t.aggregate&&!i.aggregate&&"tick"!==e?"horizontal":"vertical"}return}}return"vertical"}(h.type,t,p),void 0!==p&&p!==h.orient&&s.ZK(s.yw.orientOverridden(h.orient,p)),"bar"===h.type&&h.orient){const e=(0,c.is)("cornerRadiusEnd",h,i);if(void 0!==e){const i="horizontal"===h.orient&&t.x2||"vertical"===h.orient&&t.y2?["cornerRadius"]:l.P1[h.orient];for(const t of i)h[t]=e;void 0!==h.cornerRadiusEnd&&delete h.cornerRadiusEnd}}return void 0===(0,c.is)("opacity",h,i)&&(h.opacity=function(e,t){if((0,f.r3)([l.e_,l.Bw,l.Md,l.Zp],e)&&!(0,o.Oh)(t))return.7}(h.type,t)),void 0===(0,c.is)("cursor",h,i)&&(h.cursor=function(e,t,i){return t.href||e.href||(0,c.is)("href",e,i)?"pointer":e.cursor}(h,t,i)),h}function p(e,t,{graticule:i}){if(i)return!1;const n=(0,c.Kt)("filled",e,t),a=e.type;return(0,f.du)(n,a!==l.e_&&a!==l.fq&&a!==l.gv)}},29807:(e,t,i)=>{"use strict";i.d(t,{j:()=>a,y:()=>o});var n=i(28668);const a={vgMark:"line",encodeEntry:e=>({...n.R3(e,{align:"ignore",baseline:"ignore",color:"include",size:"ignore",orient:"ignore",theta:"ignore"}),...n.ul("x",e,{defaultPos:"mid"}),...n.ul("y",e,{defaultPos:"mid"}),...n.Sm("size",e,{vgChannel:"strokeWidth"}),...n.ri(e)})},o={vgMark:"trail",encodeEntry:e=>({...n.R3(e,{align:"ignore",baseline:"ignore",color:"include",size:"include",orient:"ignore",theta:"ignore"}),...n.ul("x",e,{defaultPos:"mid"}),...n.ul("y",e,{defaultPos:"mid"}),...n.Sm("size",e),...n.ri(e)})}},78381:(e,t,i)=>{"use strict";i.d(t,{o:()=>k});var n=i(48823),a=i(7422),o=i(35594),r=i(20640),s=i(78666),l=i(50579),d=i(59159),f=i(99185),c=i(62334),h=i(31997),p=i(6638),u=i(97475),g=i(40760),m=i(60492),b=i(29807),y=i(45970),v=i(53711),_=i(29344),x=i(70674),w=i(31287);const $={arc:h.N,area:p.S,bar:u.K,circle:y.Xw,geoshape:g.S,image:m.B,line:b.j,point:y.xm,rect:v.J,rule:_.j,square:y.h6,text:x.f,tick:w.K,trail:b.y};function k(e){if((0,d.r3)([s.fq,s.q1,s.P2],e.mark)){const t=(0,r.e8)(e.mark,e.encoding);if(t.length>0)return function(e,t){return[{name:e.getName("pathgroup"),type:"group",from:{facet:{name:T+e.requestDataName(o.ye.Main),data:e.requestDataName(o.ye.Main),groupby:t}},encode:{update:{width:{field:{group:"width"}},height:{field:{group:"height"}}}},marks:O(e,{fromPrefix:T})}]}(e,t)}else if(e.mark===s.u3){const t=f.a_.some((t=>(0,c.is)(t,e.markDef,e.config)));if(e.stack&&!e.fieldDef("size")&&t)return function(e){const[t]=O(e,{fromPrefix:D}),i=e.scaleName(e.stack.fieldChannel),n=(t={})=>e.vgField(e.stack.fieldChannel,t),r=(e,t)=>`${e}(${[n({prefix:"min",suffix:"start",expr:t}),n({prefix:"max",suffix:"start",expr:t}),n({prefix:"min",suffix:"end",expr:t}),n({prefix:"max",suffix:"end",expr:t})].map((e=>`scale('${i}',${e})`)).join(",")})`;let s,l;"x"===e.stack.fieldChannel?(s={...(0,d.ei)(t.encode.update,["y","yc","y2","height",...f.a_]),x:{signal:r("min","datum")},x2:{signal:r("max","datum")},clip:{value:!0}},l={x:{field:{group:"x"},mult:-1},height:{field:{group:"height"}}},t.encode.update={...(0,d.CE)(t.encode.update,["y","yc","y2"]),height:{field:{group:"height"}}}):(s={...(0,d.ei)(t.encode.update,["x","xc","x2","width"]),y:{signal:r("min","datum")},y2:{signal:r("max","datum")},clip:{value:!0}},l={y:{field:{group:"y"},mult:-1},width:{field:{group:"width"}}},t.encode.update={...(0,d.CE)(t.encode.update,["x","xc","x2"]),width:{field:{group:"width"}}});for(const i of f.a_){const n=(0,c.Kt)(i,e.markDef,e.config);t.encode.update[i]?(s[i]=t.encode.update[i],delete t.encode.update[i]):n&&(s[i]=(0,c.vS)(n)),n&&(t.encode.update[i]={value:0})}const h=[];if(e.stack.groupbyChannel){const t=e.fieldDef(e.stack.groupbyChannel),i=(0,a.jd)(t);i&&h.push(i),(t?.bin||t?.timeUnit)&&h.push((0,a.jd)(t,{binSuffix:"end"}))}return s=["stroke","strokeWidth","strokeJoin","strokeCap","strokeDash","strokeDashOffset","strokeMiterLimit","strokeOpacity"].reduce(((i,n)=>{if(t.encode.update[n])return{...i,[n]:t.encode.update[n]};{const t=(0,c.Kt)(n,e.markDef,e.config);return void 0!==t?{...i,[n]:(0,c.vS)(t)}:i}}),s),s.stroke&&(s.strokeForeground={value:!0},s.strokeOffset={value:0}),[{type:"group",from:{facet:{data:e.requestDataName(o.ye.Main),name:D+e.requestDataName(o.ye.Main),groupby:h,aggregate:{fields:[n({suffix:"start"}),n({suffix:"start"}),n({suffix:"end"}),n({suffix:"end"})],ops:["min","max","min","max"]}}},encode:{update:s},marks:[{type:"group",encode:{update:l},marks:[t]}]}]}(e)}return O(e)}const T="faceted_path_",D="stack_group_";function O(e,t={fromPrefix:""}){const{mark:i,markDef:f,encoding:h,config:p}=e,u=(0,d.du)(f.clip,function(e){const t=e.getScaleComponent("x"),i=e.getScaleComponent("y");return!!(t&&t.get("selectionExtent")||i&&i.get("selectionExtent"))||void 0}(e),function(e){const t=e.component.projection;return!(!t||t.isFit)||void 0}(e)),g=(0,c.Wi)(f),m=h.key,b=function(e){const{encoding:t,stack:i,mark:o,markDef:f,config:h}=e,p=t.order;if(!(!(0,n.kJ)(p)&&(0,a.kJ)(p)&&(0,d.$k)(p.value)||!p&&(0,d.$k)((0,c.is)("order",f,h)))){if(((0,n.kJ)(p)||(0,a.VQ)(p))&&!i)return(0,c.xJ)(p,{expr:"datum"});if((0,s.hx)(o)){const i="horizontal"===f.orient?"y":"x",o=t[i];if((0,a.VQ)(o)){const t=o.sort;if((0,n.kJ)(t))return{field:(0,a.jd)(o,{prefix:i,suffix:"sort_index",expr:"datum"})};if((0,l.R_)(t))return{field:(0,a.jd)({aggregate:(0,r.Oh)(e.encoding)?t.op:void 0,field:t.field},{expr:"datum"})};if((0,l.tI)(t)){const i=e.fieldDef(t.encoding);return{field:(0,a.jd)(i,{expr:"datum"}),order:t.order}}return null===t?void 0:{field:(0,a.jd)(o,{binSuffix:e.stack&&e.stack.impute?"mid":void 0,expr:"datum"})}}}}}(e),y=function(e){if(!e.component.selection)return null;const t=(0,d.XP)(e.component.selection).length;let i=t,n=e.parent;for(;n&&0===i;)i=(0,d.XP)(n.component.selection).length,n=n.parent;return i?{interactive:t>0||!!e.encoding.tooltip}:null}(e),v=(0,c.is)("aria",f,p),_=$[i].postEncodingTransform?$[i].postEncodingTransform(e):null;return[{name:e.getName("marks"),type:$[i].vgMark,...u?{clip:!0}:{},...g?{style:g}:{},...m?{key:m.field}:{},...b?{sort:b}:{},...y||{},...!1===v?{aria:v}:{},from:{data:t.fromPrefix+e.requestDataName(o.ye.Main)},encode:{update:$[i].encodeEntry(e)},..._?{transform:_}:{}}]}},45970:(e,t,i)=>{"use strict";i.d(t,{xm:()=>r,Xw:()=>s,h6:()=>l});var n=i(28668);function a(e,t){const{config:i}=e;return{...n.R3(e,{align:"ignore",baseline:"ignore",color:"include",size:"include",orient:"ignore",theta:"ignore"}),...n.ul("x",e,{defaultPos:"mid"}),...n.ul("y",e,{defaultPos:"mid"}),...n.Sm("size",e),...n.Sm("angle",e),...o(e,0,t)}}function o(e,t,i){return i?{shape:{value:i}}:n.Sm("shape",e)}const r={vgMark:"symbol",encodeEntry:e=>a(e)},s={vgMark:"symbol",encodeEntry:e=>a(e,"circle")},l={vgMark:"symbol",encodeEntry:e=>a(e,"square")}},53711:(e,t,i)=>{"use strict";i.d(t,{J:()=>a});var n=i(28668);const a={vgMark:"rect",encodeEntry:e=>({...n.R3(e,{align:"ignore",baseline:"ignore",color:"include",orient:"ignore",size:"ignore",theta:"ignore"}),...n.mr(e,"x","rect"),...n.mr(e,"y","rect")})}},29344:(e,t,i)=>{"use strict";i.d(t,{j:()=>a});var n=i(28668);const a={vgMark:"rule",encodeEntry:e=>{const{markDef:t}=e,i=t.orient;return e.encoding.x||e.encoding.y||e.encoding.latitude||e.encoding.longitude?{...n.R3(e,{align:"ignore",baseline:"ignore",color:"include",orient:"ignore",size:"ignore",theta:"ignore"}),...n.Jc("x",e,{defaultPos:"horizontal"===i?"zeroOrMax":"mid",defaultPos2:"zeroOrMin",range:"vertical"!==i}),...n.Jc("y",e,{defaultPos:"vertical"===i?"zeroOrMax":"mid",defaultPos2:"zeroOrMin",range:"horizontal"!==i}),...n.Sm("size",e,{vgChannel:"strokeWidth"})}:{}}}},70674:(e,t,i)=>{"use strict";i.d(t,{f:()=>o});var n=i(62334),a=i(28668);const o={vgMark:"text",encodeEntry:e=>{const{config:t,encoding:i}=e;return{...a.R3(e,{align:"include",baseline:"include",color:"include",size:"ignore",orient:"ignore",theta:"include"}),...a.ul("x",e,{defaultPos:"mid"}),...a.ul("y",e,{defaultPos:"mid"}),...a.fL(e),...a.Sm("size",e,{vgChannel:"fontSize"}),...a.Sm("angle",e),...a.ry("align",r(e.markDef,0,t)),...a.ry("baseline",s(e.markDef,0,t)),...a.ul("radius",e,{defaultPos:null}),...a.ul("theta",e,{defaultPos:null})}}};function r(e,t,i){if(void 0===(0,n.is)("align",e,i))return"center"}function s(e,t,i){if(void 0===(0,n.is)("baseline",e,i))return"middle"}},31287:(e,t,i)=>{"use strict";i.d(t,{K:()=>l});var n=i(48823),a=i(52262),o=i(99185),r=i(62334),s=i(28668);const l={vgMark:"rect",encodeEntry:e=>{const{config:t,markDef:i}=e,n=i.orient,a="horizontal"===n?"width":"height",o="horizontal"===n?"height":"width";return{...s.R3(e,{align:"ignore",baseline:"ignore",color:"include",orient:"ignore",size:"ignore",theta:"ignore"}),...s.ul("x",e,{defaultPos:"mid",vgChannel:"xc"}),...s.ul("y",e,{defaultPos:"mid",vgChannel:"yc"}),...s.Sm("size",e,{defaultValue:d(e),vgChannel:a}),[o]:(0,r.vS)((0,r.is)("thickness",i,t))}}};function d(e){const{config:t,markDef:i}=e,{orient:s}=i,l="horizontal"===s?"width":"height",d=e.getScaleComponent("horizontal"===s?"x":"y"),f=(0,r.is)("size",i,t,{vgChannel:l})??t.tick.bandSize;if(void 0!==f)return f;{const e=d?d.get("range"):void 0;return e&&(0,o.GC)(e)&&(0,n.hj)(e.step)?3*e.step/4:3*(0,a.M)(t.view,l)/4}}},3496:(e,t,i)=>{"use strict";i.d(t,{gs:()=>E,hr:()=>F,PZ:()=>q,pQ:()=>P,Hn:()=>I,Ne:()=>j});var n=i(19387),a=i(7422),o=i(35594),r=i(20640),s=i(77125),l=i(56997),d=i(49272),f=i(13586),c=i(73651),h=i(53918),p=i(13261),u=i(59159),g=i(99185),m=i(32424),b=i(62334),y=i(73796),v=i(50429),_=i(37042),x=i(81923),w=i(39743),$=i(73416),k=i(71309),T=i(84963),D=i(12506),O=i(53245),S=i(33176),R=i(77719);class A{constructor(){this.nameMap={}}rename(e,t){this.nameMap[e]=t}has(e){return void 0!==this.nameMap[e]}get(e){for(;this.nameMap[e]&&e!==this.nameMap[e];)e=this.nameMap[e];return e}}function E(e){return"unit"===e?.type}function F(e){return"facet"===e?.type}function q(e){return"concat"===e?.type}function P(e){return"layer"===e?.type}class I{constructor(e,t,i,n,a,o,r){this.type=t,this.parent=i,this.config=a,this.correctDataNames=e=>(e.from&&e.from.data&&(e.from.data=this.lookupDataSource(e.from.data)),e.from&&e.from.facet&&e.from.facet.data&&(e.from.facet.data=this.lookupDataSource(e.from.facet.data)),e),this.parent=i,this.config=a,this.view=(0,s.K)(r),this.name=e.name??n,this.title=(0,h.G)(e.title)?{text:e.title}:e.title?(0,s.K)(e.title):void 0,this.scaleNameMap=i?i.scaleNameMap:new A,this.projectionNameMap=i?i.projectionNameMap:new A,this.signalNameMap=i?i.signalNameMap:new A,this.data=e.data,this.description=e.description,this.transforms=(0,p.oh)(e.transform??[]),this.layout="layer"===t||"unit"===t?{}:(0,c.o1)(e,t,a),this.component={data:{sources:i?i.component.data.sources:[],outputNodes:i?i.component.data.outputNodes:{},outputNodeRefCounts:i?i.component.data.outputNodeRefCounts:{},isFaceted:(0,f.wf)(e)||i&&i.component.data.isFaceted&&void 0===e.data},layoutSize:new R.P,layoutHeaders:{row:{},column:{},facet:{}},mark:null,resolve:{scale:{},axis:{},legend:{},...o?(0,u.OM)(o):{}},selection:null,scales:null,projection:null,axes:{},legends:{}}}get width(){return this.getSizeSignalRef("width")}get height(){return this.getSizeSignalRef("height")}parse(){this.parseScale(),this.parseLayoutSize(),this.renameTopLevelLayoutSizeSignal(),this.parseSelections(),this.parseProjection(),this.parseData(),this.parseAxesAndHeaders(),this.parseLegends(),this.parseMarkGroup()}parseScale(){(0,S.m)(this)}parseProjection(){(0,T.d)(this)}renameTopLevelLayoutSizeSignal(){"width"!==this.getName("width")&&this.renameSignal(this.getName("width"),"width"),"height"!==this.getName("height")&&this.renameSignal(this.getName("height"),"height")}parseLegends(){(0,$.BQ)(this)}assembleGroupStyle(){if("unit"===this.type||"layer"===this.type)return this.view?.style??"cell"}assembleEncodeFromView(e){const{style:t,...i}=e,n={};for(const e of(0,u.XP)(i)){const t=i[e];void 0!==t&&(n[e]=(0,b.vS)(t))}return n}assembleGroupEncodeEntry(e){let t={};return this.view&&(t=this.assembleEncodeFromView(this.view)),e||(this.description&&(t.description=(0,b.vS)(this.description)),"unit"!==this.type&&"layer"!==this.type)?(0,u.xb)(t)?void 0:t:{width:this.getSizeSignalRef("width"),height:this.getSizeSignalRef("height"),...t??{}}}assembleLayout(){if(!this.layout)return;const{spacing:e,...t}=this.layout,{component:i,config:n}=this,a=(0,y.A4)(i.layoutHeaders,n);return{padding:e,...this.assembleDefaultLayout(),...t,...a?{titleBand:a}:{}}}assembleDefaultLayout(){return{}}assembleHeaderMarks(){const{layoutHeaders:e}=this.component;let t=[];for(const i of n.tD)e[i].title&&t.push((0,y.q4)(this,i));for(const e of v.f)t=t.concat((0,y.L)(this,e));return t}assembleAxes(){return(0,m.Fh)(this.component.axes,this.config)}assembleLegends(){return(0,w.T)(this)}assembleProjections(){return(0,k.Kw)(this)}assembleTitle(){const{encoding:e,...t}=this.title??{},i={...(0,h.s)(this.config.title).nonMark,...t,...e?{encode:{update:e}}:{}};if(i.text)return(0,u.r3)(["unit","layer"],this.type)?(0,u.r3)(["middle",void 0],i.anchor)&&(i.frame??(i.frame="group")):i.anchor??(i.anchor="start"),(0,u.xb)(i)?void 0:i}assembleGroup(e=[]){const t={};(e=e.concat(this.assembleSignals())).length>0&&(t.signals=e);const i=this.assembleLayout();i&&(t.layout=i),t.marks=[].concat(this.assembleHeaderMarks(),this.assembleMarks());const n=!this.parent||F(this.parent)?(0,D.gc)(this):[];n.length>0&&(t.scales=n);const a=this.assembleAxes();a.length>0&&(t.axes=a);const o=this.assembleLegends();return o.length>0&&(t.legends=o),t}getName(e){return(0,u.Xr)((this.name?`${this.name}_`:"")+e)}getDataName(e){return this.getName(o.ye[e].toLowerCase())}requestDataName(e){const t=this.getDataName(e),i=this.component.data.outputNodeRefCounts;return i[t]=(i[t]||0)+1,t}getSizeSignalRef(e){if(F(this.parent)){const t=(0,x.g)(e),i=(0,n.x1)(t),o=this.component.scales[i];if(o&&!o.merged){const e=o.get("type"),t=o.get("range");if((0,d.eO)(e)&&(0,g.GC)(t)){const e=o.get("name"),t=(0,O.Bd)(this,i),n=(0,O.Ue)(t);if(n){const t=(0,a.jd)({aggregate:"distinct",field:n},{expr:"datum"});return{signal:(0,_.PM)(e,o,t)}}return l.ZK(l.yw.unknownField(i)),null}}}return{signal:this.signalNameMap.get(this.getName(e))}}lookupDataSource(e){const t=this.component.data.outputNodes[e];return t?t.getSource():e}getSignalName(e){return this.signalNameMap.get(e)}renameSignal(e,t){this.signalNameMap.rename(e,t)}renameScale(e,t){this.scaleNameMap.rename(e,t)}renameProjection(e,t){this.projectionNameMap.rename(e,t)}scaleName(e,t){return t?this.getName(e):(0,n.J6)(e)&&(0,n.rP)(e)&&this.component.scales[e]||this.scaleNameMap.has(this.getName(e))?this.scaleNameMap.get(this.getName(e)):void 0}projectionName(e){return e?this.getName("projection"):this.component.projection&&!this.component.projection.merged||this.projectionNameMap.has(this.getName("projection"))?this.projectionNameMap.get(this.getName("projection")):void 0}getScaleComponent(e){if(!this.component.scales)throw new Error("getScaleComponent cannot be called before parseScale(). Make sure you have called parseScale or use parseUnitModelWithScale().");const t=this.component.scales[e];return t&&!t.merged?t:this.parent?this.parent.getScaleComponent(e):void 0}getSelectionComponent(e,t){let i=this.component.selection[e];if(!i&&this.parent&&(i=this.parent.getSelectionComponent(e,t)),!i)throw new Error(l.yw.selectionNotFound(t));return i}hasAxisOrientSignalRef(){return this.component.axes.x?.some((e=>e.hasOrientSignalRef()))||this.component.axes.y?.some((e=>e.hasOrientSignalRef()))}}class j extends I{vgField(e,t={}){const i=this.fieldDef(e);if(i)return(0,a.jd)(i,t)}reduceFieldDef(e,t){return(0,r.u4)(this.getMapping(),((t,i,n)=>{const o=(0,a.Vm)(i);return o?e(t,o,n):t}),t)}forEachFieldDef(e,t){(0,r.Ed)(this.getMapping(),((t,i)=>{const n=(0,a.Vm)(t);n&&e(n,i)}),t)}}},84879:(e,t,i)=>{"use strict";i.d(t,{t:()=>s});var n=i(48823),a=i(21066),o=i(59159),r=i(77974);function s(e,t,i){return(0,o.vS)(t,(t=>(0,n.HD)(t)?t:(0,a.AW)(t)?(0,r.rP)(e,t,i):(0,a.Gn)(t)))}},71309:(e,t,i)=>{"use strict";i.d(t,{Kw:()=>r});var n=i(59159),a=i(99185),o=i(3496);function r(e){return(0,o.pQ)(e)||(0,o.PZ)(e)?function(e){return e.children.reduce(((e,t)=>e.concat(t.assembleProjections())),s(e))}(e):s(e)}function s(e){const t=e.component.projection;if(!t||t.merged)return[];const i=t.combine(),{name:o}=i;if(t.data){const r={signal:`[${t.size.map((e=>e.signal)).join(", ")}]`},s=t.data.reduce(((t,i)=>{const o=(0,a.Lo)(i)?i.signal:`data('${e.lookupDataSource(i)}')`;return(0,n.r3)(t,o)||t.push(o),t}),[]);if(s.length<=0)throw new Error("Projection's fit didn't find any data sources");return[{name:o,size:r,fit:{signal:s.length>1?`[${s.join(", ")}]`:s[0]},...i}]}return[{name:o,translate:{signal:"[width / 2, height / 2]"},...i}]}},15345:(e,t,i)=>{"use strict";i.d(t,{u:()=>a});var n=i(77719);class a extends n.P{constructor(e,t,i,n){super({...t},{name:e}),this.specifiedProjection=t,this.size=i,this.data=n,this.merged=!1}get isFit(){return!!this.data}}},84963:(e,t,i)=>{"use strict";i.d(t,{d:()=>p});var n=i(48823),a=i(19387),o=i(7422),r=i(35594),s=i(77125),l=i(42587),d=i(46689),f=i(59159),c=i(3496),h=i(15345);function p(e){e.component.projection=(0,c.gs)(e)?function(e){if(e.hasProjection){const t=(0,s.K)(e.specifiedProjection),i=!(t&&(null!=t.scale||null!=t.translate)),n=i?[e.getSizeSignalRef("width"),e.getSizeSignalRef("height")]:void 0,l=i?function(e){const t=[],{encoding:i}=e;for(const n of[[a.Xs,a.y],[a.NG,a.VO]])((0,o.EA)(i[n[0]])||(0,o.EA)(i[n[1]]))&&t.push({signal:e.getName(`geojson_${t.length}`)});return e.channelHasField(a.X3)&&e.typedFieldDef(a.X3).type===d.zb&&t.push({signal:e.getName(`geojson_${t.length}`)}),0===t.length&&t.push(e.requestDataName(r.ye.Main)),t}(e):void 0,f=new h.u(e.projectionName(!0),{...(0,s.K)(e.config.projection)??{},...t??{}},n,l);return f.get("type")||f.set("type","equalEarth",!1),f}}(e):function(e){if(0===e.children.length)return;let t;for(const t of e.children)p(t);const i=(0,f.yW)(e.children,(e=>{const i=e.component.projection;if(i){if(t){const e=function(e,t){const i=(0,f.yW)(l.u,(i=>!(0,n.nr)(e.explicit,i)&&!(0,n.nr)(t.explicit,i)||!!((0,n.nr)(e.explicit,i)&&(0,n.nr)(t.explicit,i)&&(0,f.vZ)(e.get(i),t.get(i)))));if((0,f.vZ)(e.size,t.size)){if(i)return e;if((0,f.vZ)(e.explicit,{}))return t;if((0,f.vZ)(t.explicit,{}))return e}return null}(t,i);return e&&(t=e),!!e}return t=i,!0}return!0}));if(t&&i){const i=e.projectionName(!0),n=new h.u(i,t.specifiedProjection,t.size,(0,f.OM)(t.data));for(const t of e.children){const e=t.component.projection;e&&(e.isFit&&n.data.push(...t.component.projection.data),t.renameProjection(e.get("name"),i),e.merged=!0)}return n}}(e)}},71693:(e,t,i)=>{"use strict";i.d(t,{P:()=>r,j:()=>s});var n=i(19387),a=i(56997),o=i(3496);function r(e,t){if((0,o.pQ)(t)||(0,o.hr)(t))return"shared";if((0,o.PZ)(t))return(0,n.Zk)(e)?"independent":"shared";throw new Error("invalid model type for resolve")}function s(e,t){const i=e.scale[t],o=(0,n.Zk)(t)?"axis":"legend";return"independent"===i?("shared"===e[o][t]&&a.ZK(a.yw.independentScaleMeansIndependentGuide(t)),"independent"):e[o][t]||"shared"}},12506:(e,t,i)=>{"use strict";i.d(t,{gc:()=>f});var n=i(48823),a=i(19387),o=i(59159),r=i(99185),s=i(3496),l=i(66151),d=i(53245);function f(e){return(0,s.pQ)(e)||(0,s.PZ)(e)?e.children.reduce(((e,t)=>e.concat(f(t))),c(e)):c(e)}function c(e){return(0,o.XP)(e.component.scales).reduce(((t,i)=>{const o=e.component.scales[i];if(o.merged)return t;const s=o.combine(),{name:f,type:c,selectionExtent:h,domains:p,range:u,reverse:g,...m}=s,b=function(e,t,i,o){if((0,a.Zk)(i)){if((0,r.GC)(e))return{step:{signal:`${t}_step`}}}else if((0,n.Kn)(e)&&(0,r.XL)(e))return{...e,data:o.lookupDataSource(e.data)};return e}(s.range,f,i,e),y=(0,d.Bd)(e,i),v=h?(0,l.ji)(e,h,o,y):null;return t.push({name:f,type:c,...y?{domain:y}:{},...v?{domainRaw:v}:{},range:b,...void 0!==g?{reverse:g}:{},...m}),t}),[])}},23917:(e,t,i)=>{"use strict";i.d(t,{u:()=>r});var n=i(48823),a=i(59159),o=i(77719);class r extends o.P{constructor(e,t){super({},{name:e}),this.merged=!1,this.setWithExplicit("type",t)}domainDefinitelyIncludesZero(){return!1!==this.get("zero")||(0,a.G)(this.get("domains"),(e=>(0,n.kJ)(e)&&2===e.length&&e[0]<=0&&e[1]>=0))}}},53245:(e,t,i)=>{"use strict";i.d(t,{KX:()=>x,Ue:()=>R,Bd:()=>A});var n=i(48823),a=i(24430),o=i(35647),r=i(19387),s=i(7422),l=i(35594),d=i(56997),f=i(49272),c=i(50579),h=i(31021),p=i(59159),u=i(99185),g=i(66203),m=i(40253),b=i(94380),y=i(3496),v=i(17625),_=i(77719);function x(e){(0,y.gs)(e)?function(e){const t=e.component.scales;for(const i of p.XP(t)){const n=w(e,i);if(t[i].setWithExplicit("domains",n),D(e,i),e.component.data.isFaceted){let t=e;for(;!(0,y.hr)(t)&&t.parent;)t=t.parent;if("shared"===t.component.resolve.scale[i])for(const e of n.value)(0,u.XL)(e)&&(e.data=b.ff+e.data.replace(b.ff,""))}}}(e):function(e){for(const t of e.children)x(t);const t=e.component.scales;for(const i of p.XP(t)){let n,a=null;for(const t of e.children){const e=t.component.scales[i];if(e){n=void 0===n?e.getWithExplicit("domains"):(0,_.fw)(n,e.getWithExplicit("domains"),"domains","scale",S);const t=e.get("selectionExtent");a&&t&&a.param!==t.param&&d.ZK(d.yw.NEEDS_SAME_SELECTION),a=t}}t[i].setWithExplicit("domains",n),a&&t[i].set("selectionExtent",a,!0)}}(e)}function w(e,t){const i=e.getScaleComponent(t).get("type"),{encoding:n}=e,a=function(e,t,i,n){if("unaggregated"===e){const{valid:e,reason:n}=O(t,i);if(!e)return void d.ZK(n)}else if(void 0===e&&n.useUnaggregatedDomain){const{valid:e}=O(t,i);if(e)return"unaggregated"}return e}(e.scaleDomain(t),e.typedFieldDef(t),i,e.config.scale);return a!==e.scaleDomain(t)&&(e.specifiedScales[t]={...e.specifiedScales[t],domain:a}),"x"===t&&(0,s.EA)(n.x2)?(0,s.EA)(n.x)?(0,_.fw)(k(i,a,e,"x"),k(i,a,e,"x2"),"domain","scale",S):k(i,a,e,"x2"):"y"===t&&(0,s.EA)(n.y2)?(0,s.EA)(n.y)?(0,_.fw)(k(i,a,e,"y"),k(i,a,e,"y2"),"domain","scale",S):k(i,a,e,"y2"):k(i,a,e,t)}function $(e,t,i){const n=(0,h.Q8)(i)?.unit;return"temporal"===t||n?function(e,t,i){return e.map((e=>({signal:`{data: ${(0,s.He)(e,{timeUnit:i,type:t})}}`})))}(e,t,n):[e]}function k(e,t,i,d){const{encoding:h}=i,b=(0,s.EA)(h[d]),{type:x}=b,w=b.timeUnit;if((0,f.EI)(t)){const n=k(e,void 0,i,d),a=$(t.unionWith,x,w);return(0,_.vf)([...n.value,...a])}if((0,u.Lo)(t))return(0,_.vf)([t]);if(t&&"unaggregated"!==t&&!(0,f.ku)(t))return(0,_.vf)($(t,x,w));const D=i.stack;if(D&&d===D.fieldChannel){if("normalize"===D.offset)return(0,_.sC)([[0,1]]);const e=i.requestDataName(l.ye.Main);return(0,_.sC)([{data:e,field:i.vgField(d,{suffix:"start"})},{data:e,field:i.vgField(d,{suffix:"end"})}])}const O=(0,r.rP)(d)&&(0,s.VQ)(b)?function(e,t,i){if(!(0,f.eO)(i))return;const n=e.fieldDef(t),o=n.sort;if((0,c.es)(o))return{op:"min",field:(0,m.m)(n,t),order:"ascending"};const{stack:r}=e,l=r?[...r.groupbyField?[r.groupbyField]:[],...r.stackBy.map((e=>e.fieldDef.field))]:void 0;if((0,c.R_)(o))return T(o,r&&!p.r3(l,o.field));if((0,c.tI)(o)){const{encoding:t,order:i}=o,n=e.fieldDef(t),{aggregate:d,field:f}=n,c=r&&!p.r3(l,f);if((0,a.B5)(d)||(0,a.Oc)(d))return T({field:(0,s.jd)(n),order:i},c);if((0,a.Wp)(d)||!d)return T({op:d,field:f,order:i},c)}else{if("descending"===o)return{op:"min",field:e.vgField(t),order:"descending"};if(p.r3(["ascending",void 0],o))return!0}}(i,d,e):void 0;if((0,s.Iu)(b)){const e=$([b.datum],x,w);return(0,_.sC)(e)}const S=b;if("unaggregated"===t){const e=i.requestDataName(l.ye.Main),{field:t}=b;return(0,_.sC)([{data:e,field:(0,s.jd)({field:t,aggregate:"min"})},{data:e,field:(0,s.jd)({field:t,aggregate:"max"})}])}if((0,o.f$)(S.bin)){if((0,f.eO)(e))return"bin-ordinal"===e?(0,_.sC)([]):(0,_.sC)([{data:p.jn(O)?i.requestDataName(l.ye.Main):i.requestDataName(l.ye.Raw),field:i.vgField(d,(0,s.Wd)(S,d)?{binSuffix:"range"}:{}),sort:!0!==O&&(0,n.Kn)(O)?O:{field:i.vgField(d,{}),op:"min"}}]);{const{bin:e}=S;if((0,o.f$)(e)){const t=(0,g.Z)(i,S.field,e);return(0,_.sC)([new v.T((()=>{const e=i.getSignalName(t);return`[${e}.start, ${e}.stop]`}))])}return(0,_.sC)([{data:i.requestDataName(l.ye.Main),field:i.vgField(d,{})}])}}if(S.timeUnit&&p.r3(["time","utc"],e)&&(0,s.wl)(S,(0,y.gs)(i)?i.encoding[(0,r.Hy)(d)]:void 0,i.markDef,i.config)){const e=i.requestDataName(l.ye.Main);return(0,_.sC)([{data:e,field:i.vgField(d)},{data:e,field:i.vgField(d,{suffix:"end"})}])}return O?(0,_.sC)([{data:p.jn(O)?i.requestDataName(l.ye.Main):i.requestDataName(l.ye.Raw),field:i.vgField(d),sort:O}]):(0,_.sC)([{data:i.requestDataName(l.ye.Main),field:i.vgField(d)}])}function T(e,t){const{op:i,field:n,order:a}=e;return{op:i??(t?"sum":c.Az),...n?{field:p.qO(n)}:{},...a?{order:a}:{}}}function D(e,t){const i=e.component.scales[t],n=e.specifiedScales[t].domain,a=e.fieldDef(t)?.bin,r=(0,f.ku)(n)&&n,s=(0,o.dt)(a)&&(0,o.Sx)(a.extent)&&a.extent;(r||s)&&i.set("selectionExtent",r??s,!0)}function O(e,t){const{aggregate:i,type:o}=e;return i?(0,n.HD)(i)&&!a.VP[i]?{valid:!1,reason:d.yw.unaggregateDomainWithNonSharedDomainOp(i)}:"quantitative"===o&&"log"===t?{valid:!1,reason:d.yw.unaggregatedDomainWithLogScale(e)}:{valid:!0}:{valid:!1,reason:d.yw.unaggregateDomainHasNoEffectForRawField(e)}}function S(e,t,i,n){return e.explicit&&t.explicit&&d.ZK(d.yw.mergeConflictingDomainProperty(i,n,e.value,t.value)),{explicit:e.explicit,value:[...e.value,...t.value]}}function R(e){if((0,u.XL)(e)&&(0,n.HD)(e.field))return e.field;if((0,u.LS)(e)){let t;for(const i of e.fields)if((0,u.XL)(i)&&(0,n.HD)(i.field))if(t){if(t!==i.field)return d.ZK(d.yw.FACETED_INDEPENDENT_DIFFERENT_SOURCES),t}else t=i.field;return d.ZK(d.yw.FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES),t}if((0,u.EO)(e)){d.ZK(d.yw.FACETED_INDEPENDENT_SAME_SOURCE);const t=e.fields[0];return(0,n.HD)(t)?t:void 0}}function A(e,t){return function(e){const t=p.Tw(e.map((e=>{if((0,u.XL)(e)){const{sort:t,...i}=e;return i}return e})),p.vp),i=p.Tw(e.map((e=>{if((0,u.XL)(e)){const t=e.sort;return void 0===t||p.jn(t)||("op"in t&&"count"===t.op&&delete t.field,"ascending"===t.order&&delete t.order),t}})).filter((e=>void 0!==e)),p.vp);if(0===t.length)return;if(1===t.length){const t=e[0];if((0,u.XL)(t)&&i.length>0){let e=i[0];if(i.length>1)d.ZK(d.yw.MORE_THAN_ONE_SORT),e=!0;else if((0,n.Kn)(e)&&"field"in e){const i=e.field;t.field===i&&(e=!e.order||{order:e.order})}return{...t,sort:e}}return t}const o=p.Tw(i.map((e=>p.jn(e)||!("op"in e)||(0,n.HD)(e.op)&&e.op in a.ae?e:(d.ZK(d.yw.domainSortDropped(e)),!0))),p.vp);let r;1===o.length?r=o[0]:o.length>1&&(d.ZK(d.yw.MORE_THAN_ONE_SORT),r=!0);const s=p.Tw(e.map((e=>(0,u.XL)(e)?e.data:null)),(e=>e));return 1===s.length&&null!==s[0]?{data:s[0],fields:t.map((e=>e.field)),...r?{sort:r}:{}}:{fields:t,...r?{sort:r}:{}}}(e.component.scales[t].get("domains").map((t=>((0,u.XL)(t)&&(t.data=e.lookupDataSource(t.data)),t))))}},33176:(e,t,i)=>{"use strict";i.d(t,{m:()=>m});var n=i(19387),a=i(7422),o=i(78666),r=i(49272),s=i(46689),l=i(59159),d=i(3496),f=i(71693),c=i(77719),h=i(23917),p=i(53245),u=i(20804),g=i(66873);function m(e,{ignoreRange:t}={}){b(e),(0,p.KX)(e);for(const t of r.t8)(0,u.mI)(e,t);t||(0,u.gV)(e)}function b(e){(0,d.gs)(e)?e.component.scales=function(e){const{encoding:t,mark:i,markDef:r}=e;return n.cA.reduce(((l,d)=>{const f=(0,a.EA)(t[d]);if(f&&i===o.uK&&d===n.X3&&f.type===s.zb)return l;let c=f&&f.scale;if(f&&null!==c&&!1!==c){c??(c={});const t=(0,g.f)(c,d,f,r);l[d]=new h.u(e.scaleName(`${d}`,!0),{value:t,explicit:c.type===t})}return l}),{})}(e):e.component.scales=function(e){var t;const i=e.component.scales={},n={},a=e.component.resolve;for(const i of e.children){b(i);for(const o of(0,l.XP)(i.component.scales))if((t=a.scale)[o]??(t[o]=(0,f.P)(o,e)),"shared"===a.scale[o]){const e=n[o],t=i.component.scales[o].getWithExplicit("type");e?(0,r.am)(e.value,t.value)?n[o]=(0,c.fw)(e,t,"type","scale",y):(a.scale[o]="independent",delete n[o]):n[o]=t}}for(const t of(0,l.XP)(n)){const a=e.scaleName(t,!0),o=n[t];i[t]=new h.u(a,o);for(const i of e.children){const e=i.component.scales[t];e&&(i.renameScale(e.get("name"),a),e.merged=!0)}}return i}(e)}const y=(0,c.VS)(((e,t)=>(0,r.VI)(e)-(0,r.VI)(t)))},20804:(e,t,i)=>{"use strict";i.d(t,{mI:()=>b,gV:()=>v});var n=i(48823),a=i(35647),o=i(19387),r=i(7422),s=i(62343),l=i(56997),d=i(49272),f=i(59159),c=i(99185),h=i(66203),p=i(3496),u=i(17625),g=i(77719),m=i(74260);function b(e,t){(0,p.gs)(e)?function(e,t){const i=e.component.scales,{config:n,encoding:a,markDef:o,specifiedScales:c}=e;for(const h of(0,f.XP)(i)){const f=c[h],p=i[h],u=e.getScaleComponent(h),g=(0,r.EA)(a[h]),m=f[t],b=u.get("type"),v=u.get("padding"),_=u.get("paddingInner"),x=(0,d.u1)(b,t),w=(0,d.e7)(h,t);if(void 0!==m&&(x?w&&l.ZK(w):l.ZK(l.yw.scalePropertyNotWorkWithScaleType(b,t,h))),x&&void 0===w)if(void 0!==m){const e=g.timeUnit,i=g.type;switch(t){case"domainMax":case"domainMin":(0,s.v9)(f[t])||"temporal"===i||e?p.set(t,{signal:(0,r.He)(f[t],{type:i,timeUnit:e})},!0):p.set(t,f[t],!0);break;default:p.copyKeyFromObject(t,f)}}else{const i=t in y?y[t]({model:e,channel:h,fieldOrDatumDef:g,scaleType:b,scalePadding:v,scalePaddingInner:_,domain:f.domain,markDef:o,config:n}):n.scale[t];void 0!==i&&p.set(t,i,!1)}}}(e,t):_(e,t)}const y={bins:({model:e,fieldOrDatumDef:t})=>(0,r.VQ)(t)?function(e,t){const i=t.bin;if((0,a.f$)(i)){const n=(0,h.Z)(e,t.field,i);return new u.T((()=>e.getSignalName(n)))}if((0,a.YK)(i)&&(0,a.dt)(i)&&void 0!==i.step)return{step:i.step}}(e,t):void 0,interpolate:({channel:e,fieldOrDatumDef:t})=>function(e,t){if((0,f.r3)([o.r$,o.ur,o.le],e)&&"nominal"!==t)return"hcl"}(e,t.type),nice:({scaleType:e,channel:t,domain:i,fieldOrDatumDef:a})=>function(e,t,i,a){if(!((0,r.Vm)(a)?.bin||(0,n.kJ)(i)||f.r3([d.N3.TIME,d.N3.UTC],e)))return t in o.Xb||void 0}(e,t,i,a),padding:({channel:e,scaleType:t,fieldOrDatumDef:i,markDef:n,config:a})=>function(e,t,i,n,a,s){if(e in o.Xb){if((0,d.Ri)(t)){if(void 0!==i.continuousPadding)return i.continuousPadding;const{type:t,orient:o}=a;if("bar"===t&&(!(0,r.VQ)(n)||!n.bin&&!n.timeUnit)&&("vertical"===o&&"x"===e||"horizontal"===o&&"y"===e))return s.continuousBandSize}if(t===d.N3.POINT)return i.pointPadding}}(e,t,a.scale,i,n,a.bar),paddingInner:({scalePadding:e,channel:t,markDef:i,config:n})=>function(e,t,i,n){if(void 0===e&&t in o.Xb){const{bandPaddingInner:e,barBandPaddingInner:t,rectBandPaddingInner:a}=n;return(0,f.du)(e,"bar"===i?t:a)}}(e,t,i.type,n.scale),paddingOuter:({scalePadding:e,channel:t,scaleType:i,markDef:n,scalePaddingInner:a,config:r})=>function(e,t,i,n,a,r){if(void 0===e&&t in o.Xb&&i===d.N3.BAND){const{bandPaddingOuter:e}=r;return(0,f.du)(e,(0,c.Lo)(a)?{signal:`${a.signal}/2`}:a/2)}}(e,t,i,n.type,a,r.scale),reverse:({fieldOrDatumDef:e,scaleType:t,channel:i,config:n})=>function(e,t,i,n){return"x"===i&&void 0!==n.xReverse?(0,d.W8)(e)&&"descending"===t?(0,c.Lo)(n.xReverse)?{signal:`!${n.xReverse.signal}`}:!n.xReverse:n.xReverse:!(!(0,d.W8)(e)||"descending"!==t)||void 0}(t,(0,r.VQ)(e)?e.sort:void 0,i,n.scale),zero:({channel:e,fieldOrDatumDef:t,domain:i,markDef:a,scaleType:s})=>function(e,t,i,a,s){if(i&&"unaggregated"!==i&&(0,d.W8)(s)){if((0,n.kJ)(i)){const e=i[0],t=i[i.length-1];if(e<=0&&t>=0)return!0}return!1}if("size"===e&&"quantitative"===t.type&&!(0,d.Qe)(s))return!0;if((!(0,r.VQ)(t)||!t.bin)&&f.r3([...o.Kz,...o.E5],e)){const{orient:t,type:i}=a;return!(0,f.r3)(["bar","area","line","trail"],i)||!("horizontal"===t&&"y"===e||"vertical"===t&&"x"===e)}return!1}(e,t,i,a,s)};function v(e){(0,p.gs)(e)?(0,m.XS)(e):_(e,"range")}function _(e,t){const i=e.component.scales;for(const i of e.children)"range"===t?v(i):b(i,t);for(const n of(0,f.XP)(i)){let a;for(const i of e.children){const e=i.component.scales[n];if(e){const i=e.getWithExplicit(t);a=(0,g.fw)(a,i,t,"scale",(0,g.VS)(((e,i)=>{switch(t){case"range":return e.step&&i.step?e.step-i.step:0}return 0})))}}i[n].setWithExplicit(t,a)}}},74260:(e,t,i)=>{"use strict";i.d(t,{XS:()=>_});var n=i(48823),a=i(35647),o=i(19387),r=i(7422),s=i(52262),l=i(35594),d=i(56997),f=i(49272),c=i(73651),h=i(59159),p=i(99185),u=i(62334),g=i(66203),m=i(17625),b=i(77719);const y=["range","scheme"];function v(e){return"x"===e?"width":"y"===e?"height":void 0}function _(e){const t=e.component.scales;for(const i of o.cA){const n=t[i];if(!n)continue;const a=w(i,e);n.setWithExplicit("range",a)}}function x(e,t){const i=e.fieldDef(t);if(i?.bin){const{bin:o,field:r}=i,s=v(t),l=e.getName(s);if((0,n.Kn)(o)&&o.binned&&void 0!==o.step)return new m.T((()=>{const i=e.scaleName(t),n=`(domain("${i}")[1] - domain("${i}")[0]) / ${o.step}`;return`${e.getSignalName(l)} / (${n})`}));if((0,a.f$)(o)){const t=(0,g.Z)(e,r,o);return new m.T((()=>{const i=e.getSignalName(t),n=`(${i}.stop - ${i}.start) / ${i}.step`;return`${e.getSignalName(l)} / (${n})`}))}}}function w(e,t){const i=t.specifiedScales[e],{size:a}=t,g=t.getScaleComponent(e).get("type");for(const a of y)if(void 0!==i[a]){const r=(0,f.u1)(g,a),s=(0,f.e7)(e,a);if(r)if(s)d.ZK(s);else switch(a){case"range":{const a=i.range;if((0,n.kJ)(a)){if((0,o.Zk)(e))return(0,b.vf)(a.map((e=>{if("width"===e||"height"===e){const i=t.getName(e),n=t.getSignalName.bind(t);return m.T.fromName(n,i)}return e})))}else if((0,n.Kn)(a))return(0,b.vf)({data:t.requestDataName(l.ye.Main),field:a.field,sort:{op:"min",field:t.vgField(e)}});return(0,b.vf)(a)}case"scheme":return(0,b.vf)((_=i[a],(0,f.NZ)(_)?{scheme:_.name,...h.CE(_,["name"])}:{scheme:_}))}else d.ZK(d.yw.scalePropertyNotWorkWithScaleType(g,a,e))}var _;if(e===o.X||e===o.Y){const t=e===o.X?"width":"height",i=a[t];if((0,c.Zz)(i)){if((0,f.eO)(g))return(0,b.vf)({step:i.step});d.ZK(d.yw.stepDropped(t))}}const{rangeMin:w,rangeMax:D}=i,O=function(e,t){const{size:i,config:a,mark:l,encoding:g}=t,b=t.getSignalName.bind(t),{type:y}=(0,r.EA)(g[e]),_=t.getScaleComponent(e).get("type"),{domain:w,domainMid:D}=t.specifiedScales[e];switch(e){case o.X:case o.Y:{if(h.r3(["point","band"],_))if(e!==o.X||i.width){if(e===o.Y&&!i.height){const e=(0,s.hb)(a.view,"height");if((0,c.Zz)(e))return e}}else{const e=(0,s.hb)(a.view,"width");if((0,c.Zz)(e))return e}const n=v(e),r=t.getName(n);return e===o.Y&&(0,f.W8)(_)?[m.T.fromName(b,r),0]:[0,m.T.fromName(b,r)]}case o.NO:{const o=$(l,t.component.scales[e].get("zero"),a),r=function(e,t,i,a){const o={x:x(i,"x"),y:x(i,"y")};switch(e){case"bar":case"tick":{if(void 0!==a.scale.maxBandSize)return a.scale.maxBandSize;const e=T(t,o,a.view);return(0,n.hj)(e)?e-1:new m.T((()=>`${e.signal} - 1`))}case"line":case"trail":case"rule":return a.scale.maxStrokeWidth;case"text":return a.scale.maxFontSize;case"point":case"square":case"circle":{if(a.scale.maxSize)return a.scale.maxSize;const e=T(t,o,a.view);return(0,n.hj)(e)?Math.pow(k*e,2):new m.T((()=>`pow(0.95 * ${e.signal}, 2)`))}}throw new Error(d.yw.incompatibleChannel("size",e))}(l,i,t,a);return(0,f.Qe)(_)?function(e,t,i){const n=()=>{const n=(0,u.t_)(t),a=(0,u.t_)(e),o=`(${n} - ${a}) / (${i} - 1)`;return`sequence(${a}, ${n} + ${o}, ${o})`};return(0,p.Lo)(t)?new m.T(n):{signal:n()}}(o,r,function(e,t,i,a){switch(e){case"quantile":return t.scale.quantileCount;case"quantize":return t.scale.quantizeCount;case"threshold":return void 0!==i&&(0,n.kJ)(i)?i.length+1:(d.ZK(d.yw.domainRequiredForThresholdScale(a)),3)}}(_,a,w,e)):[o,r]}case o.uD:return[0,2*Math.PI];case o.Ix:return[0,360];case o.OU:return[0,new m.T((()=>`min(${t.getSignalName("width")},${t.getSignalName("height")})/2`))];case o.KF:return[a.scale.minStrokeWidth,a.scale.maxStrokeWidth];case o.wg:return[[1,0],[4,2],[2,1],[1,1],[1,2,4,2]];case o.X3:return"symbol";case o.r$:case o.ur:case o.le:return"ordinal"===_?"nominal"===y?"category":"ordinal":void 0!==D?"diverging":"rect"===l||"geoshape"===l?"heatmap":"ramp";case o.JO:case o.I:case o.ky:return[a.scale.minOpacity,a.scale.maxOpacity]}throw new Error(`Scale range undefined for channel ${e}`)}(e,t);return(void 0!==w||void 0!==D)&&(0,f.u1)(g,"rangeMin")&&(0,n.kJ)(O)&&2===O.length?(0,b.vf)([w??O[0],D??O[1]]):(0,b.sC)(O)}function $(e,t,i){if(t)return(0,p.Lo)(t)?{signal:`${t.signal} ? 0 : ${$(e,!1,i)}`}:0;switch(e){case"bar":case"tick":return i.scale.minBandSize;case"line":case"trail":case"rule":return i.scale.minStrokeWidth;case"text":return i.scale.minFontSize;case"point":case"square":case"circle":return i.scale.minSize}throw new Error(d.yw.incompatibleChannel("size",e))}const k=.95;function T(e,t,i){const n=(0,c.Zz)(e.width)?e.width.step:(0,s.M)(i,"width"),a=(0,c.Zz)(e.height)?e.height.step:(0,s.M)(i,"height");return t.x||t.y?new m.T((()=>`min(${[t.x?t.x.signal:n,t.y?t.y.signal:a].join(", ")})`)):Math.min(n,a)}},66873:(e,t,i)=>{"use strict";i.d(t,{f:()=>c});var n=i(35647),a=i(19387),o=i(7422),r=i(56997),s=i(78666),l=i(49272),d=i(31021),f=i(59159);function c(e,t,i,c){const h=function(e,t,i){switch(t.type){case"nominal":case"ordinal":{if((0,a.tE)(e)||"discrete"===(0,a.e6)(e))return"shape"===e&&"ordinal"===t.type&&r.ZK(r.yw.discreteChannelCannotEncode(e,"ordinal")),"ordinal";if(e in a.Xb){if(f.r3(["rect","bar","image","rule"],i.type))return"band"}else if("arc"===i.type&&e in a.iM)return"band";const n=i[(0,a.kq)(e)];return(0,s.d)(n)||(0,o.ny)(t)&&t.axis?.tickBand?"band":"point"}case"temporal":return(0,a.tE)(e)?"time":"discrete"===(0,a.e6)(e)?(r.ZK(r.yw.discreteChannelCannotEncode(e,"temporal")),"ordinal"):(0,o.VQ)(t)&&t.timeUnit&&(0,d.Q8)(t.timeUnit).utc?"utc":"time";case"quantitative":return(0,a.tE)(e)?(0,o.VQ)(t)&&(0,n.f$)(t.bin)?"bin-ordinal":"linear":"discrete"===(0,a.e6)(e)?(r.ZK(r.yw.discreteChannelCannotEncode(e,"quantitative")),"ordinal"):"linear";case"geojson":return}throw new Error(r.yw.invalidFieldType(t.type))}(t,i,c),{type:p}=e;return(0,a.rP)(t)?void 0!==p?(0,l.Gl)(t,p)?(0,o.VQ)(i)&&!(0,l.su)(p,i.type)?(r.ZK(r.yw.scaleTypeNotWorkWithFieldDef(p,h)),h):p:(r.ZK(r.yw.scaleTypeNotWorkWithChannel(t,p,h)),h):h:null}},66151:(e,t,i)=>{"use strict";i.d(t,{N2:()=>c,$N:()=>h,gM:()=>p,pu:()=>u,Ho:()=>g,Zl:()=>m,EX:()=>b,ji:()=>y});var n=i(83082),a=i(48823),o=i(59071),r=i(62343),s=i(49272),l=i(59159),d=i(3496),f=i(77974);function c(e,t=!0,i=a.yR){if((0,a.kJ)(e)){const n=e.map((e=>c(e,t,i)));return t?`[${n.join(", ")}]`:n}return(0,r.v9)(e)?i(t?(0,r.vb)(e):(0,r.JP)(e)):t?i((0,l.Pz)(e)):e}function h(e,t){for(const i of(0,l.kd)(e.component.selection??{})){const n=i.name;let r=`${n}${o.PR}, ${"global"===i.resolve?"true":`{unit: ${(0,o.Qv)(e)}}`}`;for(const n of o.PC)n.defined(i)&&(n.signals&&(t=n.signals(e,i,t)),n.modifyExpr&&(r=n.modifyExpr(e,i,r)));t.push({name:n+o.w_,on:[{events:{signal:i.name+o.PR},update:`modify(${(0,a.m8)(i.name+o.ud)}, ${r})`}]})}return v(t)}function p(e,t){if(e.component.selection&&(0,l.XP)(e.component.selection).length){const i=(0,a.m8)(e.getName("cell"));t.unshift({name:"facet",value:{},on:[{events:(0,n.n)("mousemove","scope"),update:`isTuple(facet) ? facet : group(${i}).datum`}]})}return v(t)}function u(e,t){let i=!1;for(const n of(0,l.kd)(e.component.selection??{})){const r=n.name,s=(0,a.m8)(r+o.ud);if(0===t.filter((e=>e.name===r)).length){const e="global"===n.resolve?"union":n.resolve,i="point"===n.type?", true, true)":")";t.push({name:n.name,update:`${o.Wu}(${s}, ${(0,a.m8)(e)}${i}`})}i=!0;for(const i of o.PC)i.defined(n)&&i.topLevelSignals&&(t=i.topLevelSignals(e,n,t))}return i&&0===t.filter((e=>"unit"===e.name)).length&&t.unshift({name:"unit",value:{},on:[{events:"mousemove",update:"isTuple(group()) ? group() : unit"}]}),v(t)}function g(e,t){const i=[...t];for(const t of(0,l.kd)(e.component.selection??{})){const n={name:t.name+o.ud};if(t.init){const i=t.project.items.map((e=>{const{signals:t,...i}=e;return i}));n.values=t.init.map((t=>({unit:(0,o.Qv)(e,{escape:!1}),fields:i,values:c(t,!1)})))}i.filter((e=>e.name===t.name+o.ud)).length||i.push(n)}return i}function m(e,t){for(const i of(0,l.kd)(e.component.selection??{}))for(const n of o.PC)n.defined(i)&&n.marks&&(t=n.marks(e,i,t));return t}function b(e,t){for(const i of e.children)(0,d.gs)(i)&&(t=m(i,t));return t}function y(e,t,i,n){const o=(0,f.zg)(e,t.param,t);return{signal:(0,s.W8)(i.get("type"))&&(0,a.kJ)(n)&&n[0]>n[1]?`isValid(${o}) && reverse(${o})`:o}}function v(e){return e.map((e=>(e.on&&!e.on.length&&delete e.on,e)))}},30177:(e,t,i)=>{"use strict";i.d(t,{Z:()=>d});var n=i(83082),a=i(48823),o=i(59071),r=i(59159),s=i(39856),l=i(10469);const d={defined:e=>void 0!==e.clear&&!1!==e.clear,parse:(e,t)=>{t.clear&&(t.clear=(0,a.HD)(t.clear)?(0,n.n)(t.clear,"view"):t.clear)},topLevelSignals:(e,t,i)=>{if(s.Z.defined(t))for(const e of t.project.items){const n=i.findIndex((i=>i.name===(0,r.Xr)(`${t.name}_${e.field}`)));-1!==n&&i[n].on.push({events:t.clear,update:"null"})}return i},signals:(e,t,i)=>{function n(e,n){-1!==e&&i[e].on&&i[e].on.push({events:t.clear,update:n})}if("interval"===t.type)for(const e of t.project.items){const t=i.findIndex((t=>t.name===e.signals.visual));n(t,"[0, 0]"),-1===t&&n(i.findIndex((t=>t.name===e.signals.data)),"null")}else{let e=i.findIndex((e=>e.name===t.name+o.PR));n(e,"null"),l.Z.defined(t)&&(e=i.findIndex((e=>e.name===t.name+l.D)),n(e,"false"))}return i}}},59071:(e,t,i)=>{"use strict";i.d(t,{ud:()=>_,PR:()=>x,w_:()=>w,Wu:()=>$,PC:()=>k,Qv:()=>T,t4:()=>D,z:()=>O});var n=i(22454),a=i(48823),o=i(19387),r=i(98963),s=i(59159),l=i(3496),d=i(59663),f=i(18136),c=i(30177),h=i(39856),p=i(99275),u=i(30285),g=i(1397),m=i(74556),b=i(10469),y=i(6557),v=i(93906);const _="_store",x="_tuple",w="_modify",$="vlSelectionResolve",k=[f.Z,d.ZP,u.ZP,b.Z,h.Z,g.Z,m.Z,c.Z,y.Z,v.Z,p.Z];function T(e,{escape:t}={escape:!0}){let i=t?(0,a.m8)(e.name):e.name;const n=function(e){let t=e.parent;for(;t&&!(0,l.hr)(t);)t=t.parent;return t}(e);if(n){const{facet:e}=n;for(const t of o.tD)e[t]&&(i+=` + '__facet_${t}_' + (facet[${(0,a.m8)(n.vgField(t))}])`)}return i}function D(e){return(0,s.kd)(e.component.selection??{}).reduce(((e,t)=>e||t.project.items.some((e=>e.field===r.vV))),!1)}function O(e,t){!(0,n.isString)(t.select)&&t.select.on||delete e.events,!(0,n.isString)(t.select)&&t.select.clear||delete e.clear,!(0,n.isString)(t.select)&&t.select.toggle||delete e.toggle}},39856:(e,t,i)=>{"use strict";i.d(t,{Z:()=>f});var n=i(48823),a=i(59071),o=i(59159),r=i(66151),s=i(99275),l=i(30285),d=i(98963);const f={defined:e=>"point"===e.type&&"global"===e.resolve&&e.bind&&"scales"!==e.bind&&!(0,d.d4)(e.bind),parse:(e,t,i)=>(0,a.z)(t,i),topLevelSignals:(e,t,i)=>{const a=t.name,l=t.project,d=t.bind,f=t.init&&t.init[0],c=s.Z.defined(t)?"(item().isVoronoi ? datum.datum : datum)":"datum";return l.items.forEach(((e,s)=>{const l=(0,o.Xr)(`${a}_${e.field}`);i.filter((e=>e.name===l)).length||i.unshift({name:l,...f?{init:(0,r.N2)(f[s])}:{value:null},on:t.events?[{events:t.events,update:`datum && item().mark.marktype !== 'group' ? ${c}[${(0,n.m8)(e.field)}] : null`}]:[],bind:d[e.field]??d[e.channel]??d})})),i},signals:(e,t,i)=>{const n=t.name,r=t.project,s=i.filter((e=>e.name===n+a.PR))[0],d=n+l.gT,f=r.items.map((e=>(0,o.Xr)(`${n}_${e.field}`))),c=f.map((e=>`${e} !== null`)).join(" && ");return f.length&&(s.update=`${c} ? {fields: ${d}, values: [${f.join(", ")}]} : null`),delete s.value,delete s.on,i}}},59663:(e,t,i)=>{"use strict";i.d(t,{VD:()=>h,ZP:()=>u});var n=i(48823),a=i(59071),o=i(19387),r=i(56997),s=i(49272),l=i(59159),d=i(66151),f=i(30285),c=i(1397);const h="_brush",p="_scale_trigger",u={defined:e=>"interval"===e.type,signals:(e,t,i)=>{const l=t.name,u=l+f.gT,m=c.Z.defined(t),b=t.init?t.init[0]:null,y=[],v=[];if(t.translate&&!m){const e=`!event.item || event.item.mark.name !== ${(0,n.m8)(l+h)}`;g(t,((t,i)=>{var a;const o=(0,n.IX)((a=i.between[0]).filter??(a.filter=[]));return o.includes(e)||o.push(e),t}))}t.project.items.forEach(((a,l)=>{const f=a.channel;if(f!==o.X&&f!==o.Y)return void(0,r.ZK)("Interval selections only support x and y encoding channels.");const h=b?b[l]:null,u=function(e,t,i,a){const r=i.channel,l=i.signals.visual,f=i.signals.data,h=c.Z.defined(t),u=(0,n.m8)(e.scaleName(r)),m=e.getScaleComponent(r),b=m?m.get("type"):void 0,y=e=>`scale(${u}, ${e})`,v=e.getSizeSignalRef(r===o.X?"width":"height").signal,_=`${r}(unit)`,x=g(t,((e,t)=>[...e,{events:t.between[0],update:`[${_}, ${_}]`},{events:t,update:`[${l}[0], clamp(${_}, 0, ${v})]`}]));return x.push({events:{signal:t.name+p},update:(0,s.W8)(b)?`[${y(`${f}[0]`)}, ${y(`${f}[1]`)}]`:"[0, 0]"}),h?[{name:f,on:[]}]:[{name:l,...a?{init:(0,d.N2)(a,!0,y)}:{value:[]},on:x},{name:f,...a?{init:(0,d.N2)(a)}:{},on:[{events:{signal:l},update:`${l}[0] === ${l}[1] ? null : invert(${u}, ${l})`}]}]}(e,t,a,h),m=a.signals.data,_=a.signals.visual,x=(0,n.m8)(e.scaleName(f)),w=e.getScaleComponent(f).get("type"),$=(0,s.W8)(w)?"+":"";i.push(...u),y.push(m),v.push({scaleName:e.scaleName(f),expr:`(!isArray(${m}) || (${$}invert(${x}, ${_})[0] === ${$}${m}[0] && ${$}invert(${x}, ${_})[1] === ${$}${m}[1]))`})})),m||i.push({name:l+p,value:{},on:[{events:v.map((e=>({scale:e.scaleName}))),update:`${v.map((e=>e.expr)).join(" && ")} ? ${l+p} : {}`}]});const _=`unit: ${(0,a.Qv)(e)}, fields: ${u}, values`;return i.concat({name:l+a.PR,...b?{init:`{${_}: ${(0,d.N2)(b)}}`}:{},on:[{events:[{signal:y.join(" || ")}],update:`${y.join(" && ")} ? {${_}: [${y}]} : null`}]})},marks:(e,t,i)=>{const o=t.name,{x:r,y:s}=t.project.hasChannel,d=r&&r.signals.visual,f=s&&s.signals.visual,p=`data(${(0,n.m8)(t.name+a.ud)})`;if(c.Z.defined(t))return i;const u={x:void 0!==r?{signal:`${d}[0]`}:{value:0},y:void 0!==s?{signal:`${f}[0]`}:{value:0},x2:void 0!==r?{signal:`${d}[1]`}:{field:{group:"width"}},y2:void 0!==s?{signal:`${f}[1]`}:{field:{group:"height"}}};if("global"===t.resolve)for(const t of(0,l.XP)(u))u[t]=[{test:`${p}.length && ${p}[0].unit === ${(0,a.Qv)(e)}`,...u[t]},{value:0}];const{fill:g,fillOpacity:m,cursor:b,...y}=t.mark,v=(0,l.XP)(y).reduce(((e,t)=>(e[t]=[{test:[void 0!==r&&`${d}[0] !== ${d}[1]`,void 0!==s&&`${f}[0] !== ${f}[1]`].filter((e=>e)).join(" && "),value:y[t]},{value:null}],e)),{});return[{name:`${o+h}_bg`,type:"rect",clip:!0,encode:{enter:{fill:{value:g},fillOpacity:{value:m}},update:u}},...i,{name:o+h,type:"rect",clip:!0,encode:{enter:{...b?{cursor:{value:b}}:{},fill:{value:"transparent"}},update:{...u,...v}}}]}};function g(e,t){return e.events.reduce(((e,i)=>i.between?t(e,i):((0,r.ZK)(`${i} is not an ordered event stream for interval selections.`),e)),[])}},74556:(e,t,i)=>{"use strict";i.d(t,{Z:()=>p,V:()=>u});var n=i(22454),a=i(83082),o=i(48823),r=i(59071),s=i(56997),l=i(98963),d=i(59159),f=i(30285),c=i(10469);const h={defined:e=>{const t="global"===e.resolve&&e.bind&&(0,l.d4)(e.bind),i=1===e.project.items.length&&e.project.items[0].field!==l.vV;return t&&!i&&s.ZK(s.yw.LEGEND_BINDINGS_MUST_HAVE_PROJECTION),t&&i},parse:(e,t,i)=>{const s=(0,d.OM)(i);if(s.select=(0,o.HD)(s.select)?{type:s.select,toggle:t.toggle}:{...s.select,toggle:t.toggle},(0,r.z)(t,s),(0,n.isObject)(i.select)&&(i.select.on||i.select.clear)){const e='event.item && indexof(event.item.mark.role, "legend") < 0';for(const i of t.events)i.filter=(0,o.IX)(i.filter??[]),i.filter.includes(e)||i.filter.push(e)}const f=(0,l.mB)(t.bind)?t.bind.legend:"click",c=(0,o.HD)(f)?(0,a.n)(f,"view"):(0,o.IX)(f);t.bind={legend:{merge:c}}},topLevelSignals:(e,t,i)=>{const n=t.name,a=(0,l.mB)(t.bind)&&t.bind.legend,o=e=>t=>{const i=(0,d.OM)(t);return i.markname=e,i};for(const e of t.project.items){if(!e.hasLegend)continue;const r=`${(0,d.Xr)(e.field)}_legend`,s=`${n}_${r}`;if(0===i.filter((e=>e.name===s)).length){const e=a.merge.map(o(`${r}_symbols`)).concat(a.merge.map(o(`${r}_labels`))).concat(a.merge.map(o(`${r}_entries`)));i.unshift({name:s,...t.init?{}:{value:null},on:[{events:e,update:"datum.value || item().items[0].items[0].datum.value",force:!0},{events:a.merge,update:`!event.item || !datum ? null : ${s}`,force:!0}]})}}return i},signals:(e,t,i)=>{const n=t.name,a=t.project,o=i.find((e=>e.name===n+r.PR)),s=n+f.gT,h=a.items.filter((e=>e.hasLegend)).map((e=>(0,d.Xr)(`${n}_${(0,d.Xr)(e.field)}_legend`))),p=`${h.map((e=>`${e} !== null`)).join(" && ")} ? {fields: ${s}, values: [${h.join(", ")}]} : null`;t.events&&h.length>0?o.on.push({events:h.map((e=>({signal:e}))),update:p}):h.length>0&&(o.update=p,delete o.value,delete o.on);const u=i.find((e=>e.name===n+c.D)),g=(0,l.mB)(t.bind)&&t.bind.legend;return u&&(t.events?u.on.push({...u.on[0],events:g}):u.on[0].events=g),i}},p=h;function u(e,t,i){const n=e.fieldDef(t)?.field;for(const a of(0,d.kd)(e.component.selection??{})){const e=a.project.hasField[n]??a.project.hasChannel[t];if(e&&h.defined(a)){const t=i.get("selections")??[];t.push(a.name),i.set("selections",t,!1),e.hasLegend=!0}}}},99275:(e,t,i)=>{"use strict";i.d(t,{Z:()=>s});var n=i(56997),a=i(78666),o=i(28668);const r="voronoi",s={defined:e=>"point"===e.type&&e.nearest,parse:(e,t)=>{if(t.events)for(const i of t.events)i.markname=e.getName(r)},marks:(e,t,i)=>{const{x:s,y:l}=t.project.hasChannel,d=e.mark;if((0,a.hx)(d))return n.ZK(n.yw.nearestNotSupportForContinuous(d)),i;const f={name:e.getName(r),type:"path",interactive:!0,from:{data:e.getName("marks")},encode:{update:{fill:{value:"transparent"},strokeWidth:{value:.35},stroke:{value:"transparent"},isVoronoi:{value:!0},...(0,o.Md)(e,{reactiveGeom:!0})}},transform:[{type:"voronoi",x:{expr:s||!l?"datum.datum.x || 0":"0"},y:{expr:l||!s?"datum.datum.y || 0":"0"},size:[e.getSizeSignalRef("width"),e.getSizeSignalRef("height")]}]};let c=0,h=!1;return i.forEach(((t,i)=>{const n=t.name??"";n===e.component.mark[0].name?c=i:n.indexOf(r)>=0&&(h=!0)})),h||i.splice(c+1,0,f),i}}},77974:(e,t,i)=>{"use strict";i.d(t,{ii:()=>c,rP:()=>h,zg:()=>p,Lg:()=>u});var n=i(83082),a=i(48823),o=i(59071),r=i(56997),s=i(59159),l=i(80004),d=i(4517),f=i(35594);function c(e,t){const i={},r=e.config.selection;if(!t||!t.length)return i;for(const l of t){const t=(0,s.Xr)(l.name),d=l.select,f=(0,a.HD)(d)?d:d.type,c=(0,a.Kn)(d)?(0,s.OM)(d):{type:f},{fields:h,encodings:p,...u}=r[f];for(const e in u)"mark"===e&&(c[e]={...u[e],...c[e]}),void 0!==c[e]&&!0!==c[e]||(c[e]=u[e]??c[e]);const g=i[t]={...c,name:t,type:f,init:l.value,bind:l.bind,events:(0,a.HD)(c.on)?(0,n.n)(c.on,"scope"):(0,a.IX)((0,s.OM)(c.on))};for(const t of o.PC)t.defined(g)&&t.parse&&t.parse(e,g,l)}return i}function h(e,t,i,n="datum"){const r=(0,a.HD)(t)?t:t.param,l=(0,s.Xr)(r),d=(0,a.m8)(l+o.ud);let f;try{f=e.getSelectionComponent(l,r)}catch(e){return`!!${l}`}if(f.project.timeUnit){const t=i??e.component.data.raw,n=f.project.timeUnit.clone();t.parent?n.insertAsParentOf(t):t.parent=n}const c=`vlSelectionTest(${d}, ${n}${"global"===f.resolve?")":`, ${(0,a.m8)(f.resolve)})`}`,h=`length(data(${d}))`;return!1===t.empty?`${h} && ${c}`:`!${h} || ${c}`}function p(e,t,i){const n=(0,s.Xr)(t),o=i.encoding;let l,d=i.field;try{l=e.getSelectionComponent(n,t)}catch(e){return n}if(o||d){if(o&&!d){const e=l.project.items.filter((e=>e.channel===o));!e.length||e.length>1?(d=l.project.items[0].field,(0,r.ZK)((e.length?"Multiple ":"No ")+`matching ${(0,a.m8)(o)} encoding found for selection ${(0,a.m8)(i.param)}. `+`Using "field": ${(0,a.m8)(d)}.`)):d=e[0].field}}else d=l.project.items[0].field,l.project.items.length>1&&(0,r.ZK)(`A "field" or "encoding" must be specified when using a selection as a scale domain. Using "field": ${(0,a.m8)(d)}.`);return`${l.name}[${(0,a.m8)((0,s.qO)(d))}]`}function u(e,t){for(const[i,n]of(0,s.qh)(e.component.selection??{})){const a=e.getName(`lookup_${i}`);e.component.data.outputNodes[a]=n.materialized=new l.Z(new d.o(t,e,{param:i}),a,f.ye.Lookup,e.component.data.outputNodeRefCounts)}}},18136:(e,t,i)=>{"use strict";i.d(t,{Z:()=>r});var n=i(48823),a=i(59071),o=i(30285);const r={defined:e=>"point"===e.type,signals:(e,t,i)=>{const r=t.name,s=r+o.gT,l=t.project,d="(item().isVoronoi ? datum.datum : datum)",f=l.items.map((t=>{const i=e.fieldDef(t.channel);return i&&i.bin?`[${d}[${(0,n.m8)(e.vgField(t.channel,{}))}], ${d}[${(0,n.m8)(e.vgField(t.channel,{binSuffix:"end"}))}]]`:`${d}[${(0,n.m8)(t.field)}]`})).join(", "),c=`unit: ${(0,a.Qv)(e)}, fields: ${s}, values`,h=t.events;return i.concat([{name:r+a.PR,on:h?[{events:h,update:`datum && item().mark.marktype !== 'group' ? {${c}: [${f}]} : null`,force:!0}]:[]}])}}},30285:(e,t,i)=>{"use strict";i.d(t,{gT:()=>d,ZP:()=>c});var n=i(48823),a=i(19387),o=i(56997),r=i(49272),s=i(59159),l=i(54514);const d="_tuple_fields";class f{constructor(...e){this.items=e,this.hasChannel={},this.hasField={}}}const c={defined:()=>!0,parse:(e,t,i)=>{const d=t.name,c=t.project??(t.project=new f),h={},p={},u=new Set,g=(e,t)=>{const i="visual"===t?e.channel:e.field;let n=(0,s.Xr)(`${d}_${i}`);for(let e=1;u.has(n);e++)n=(0,s.Xr)(`${d}_${i}_${e}`);return u.add(n),{[t]:n}},m=t.type,b=e.config.selection[m],y=void 0!==i.value?(0,n.IX)(i.value):null;let{fields:v,encodings:_}=(0,n.Kn)(i.select)?i.select:{};if(!v&&!_&&y)for(const e of y)if((0,n.Kn)(e))for(const t of(0,s.XP)(e))(0,a.qZ)(t)?(_||(_=[])).push(t):"interval"===m?(o.ZK(o.yw.INTERVAL_INITIALIZED_WITH_X_Y),_=b.encodings):(v||(v=[])).push(t);v||_||(_=b.encodings,v=b.fields);for(const t of _??[]){const i=e.fieldDef(t);if(i){let n=i.field;if(i.aggregate){o.ZK(o.yw.cannotProjectAggregate(t,i.aggregate));continue}if(!n){o.ZK(o.yw.cannotProjectOnChannelWithoutField(t));continue}if(i.timeUnit){n=e.vgField(t);const a={timeUnit:i.timeUnit,as:n,field:i.field};p[(0,s.vp)(a)]=a}if(!h[n]){let a="E";if("interval"===m){const i=e.getScaleComponent(t).get("type");(0,r.W8)(i)&&(a="R")}else i.bin&&(a="R-RE");const o={field:n,channel:t,type:a};o.signals={...g(o,"data"),...g(o,"visual")},c.items.push(h[n]=o),c.hasField[n]=c.hasChannel[t]=h[n]}}else o.ZK(o.yw.cannotProjectOnChannelWithoutField(t))}for(const e of v??[]){if(c.hasField[e])continue;const t={type:"E",field:e};t.signals={...g(t,"data")},c.items.push(t),c.hasField[e]=t}y&&(t.init=y.map((e=>c.items.map((t=>(0,n.Kn)(e)?void 0!==e[t.channel]?e[t.channel]:e[t.field]:e))))),(0,s.xb)(p)||(c.timeUnit=new l.g(null,p))},signals:(e,t,i)=>{const n=t.name+d;return i.filter((e=>e.name===n)).length>0?i:i.concat({name:n,value:t.project.items.map((e=>{const{signals:t,hasLegend:i,...n}=e;return n.field=(0,s.qO)(n.field),n}))})}}},1397:(e,t,i)=>{"use strict";i.d(t,{Z:()=>f,n:()=>c});var n=i(48823),a=i(59071),o=i(19387),r=i(56997),s=i(49272),l=i(3496),d=i(59159);const f={defined:e=>"interval"===e.type&&"global"===e.resolve&&e.bind&&"scales"===e.bind,parse:(e,t)=>{const i=t.scales=[];for(const n of t.project.items){const a=n.channel;if(!(0,o.rP)(a))continue;const l=e.getScaleComponent(a),d=l?l.get("type"):void 0;l&&(0,s.W8)(d)?(l.set("selectionExtent",{param:t.name,field:n.field},!0),i.push(n)):r.ZK(r.yw.SCALE_BINDINGS_CONTINUOUS)}},topLevelSignals:(e,t,i)=>{const o=t.scales.filter((e=>0===i.filter((t=>t.name===e.signals.data)).length));if(!e.parent||h(e)||0===o.length)return i;const r=i.filter((e=>e.name===t.name))[0];let s=r.update;if(s.indexOf(a.Wu)>=0)r.update=`{${o.map((e=>`${(0,n.m8)((0,d.qO)(e.field))}: ${e.signals.data}`)).join(", ")}}`;else{for(const e of o){const t=`${(0,n.m8)((0,d.qO)(e.field))}: ${e.signals.data}`;s.includes(t)||(s=`${s.substring(0,s.length-1)}, ${t}}`)}r.update=s}return i.concat(o.map((e=>({name:e.signals.data}))))},signals:(e,t,i)=>{if(e.parent&&!h(e))for(const e of t.scales){const t=i.filter((t=>t.name===e.signals.data))[0];t.push="outer",delete t.value,delete t.update}return i}};function c(e,t){return`domain(${(0,n.m8)(e.scaleName(t))})`}function h(e){return e.parent&&(0,l.pQ)(e.parent)&&(!e.parent.parent??h(e.parent.parent))}},10469:(e,t,i)=>{"use strict";i.d(t,{D:()=>a,Z:()=>o});var n=i(59071);const a="_toggle",o={defined:e=>"point"===e.type&&!!e.toggle,signals:(e,t,i)=>i.concat({name:t.name+a,value:!1,on:[{events:t.events,update:t.toggle}]}),modifyExpr:(e,t)=>{const i=t.name+n.PR,o=t.name+a;return`${o} ? null : ${i}, `+("global"===t.resolve?`${o} ? null : true, `:`${o} ? null : {unit: ${(0,n.Qv)(e)}}, `)+`${o} ? ${i} : null`}}},6557:(e,t,i)=>{"use strict";i.d(t,{Z:()=>d});var n=i(83082),a=i(19387),o=i(59663),r=i(1397);const s="_translate_anchor",l="_translate_delta",d={defined:e=>"interval"===e.type&&e.translate,signals:(e,t,i)=>{const d=t.name,c=r.Z.defined(t),h=d+s,{x:p,y:u}=t.project.hasChannel;let g=(0,n.n)(t.translate,"scope");return c||(g=g.map((e=>(e.between[0].markname=d+o.VD,e)))),i.push({name:h,value:{},on:[{events:g.map((e=>e.between[0])),update:"{x: x(unit), y: y(unit)"+(void 0!==p?`, extent_x: ${c?(0,r.n)(e,a.X):`slice(${p.signals.visual})`}`:"")+(void 0!==u?`, extent_y: ${c?(0,r.n)(e,a.Y):`slice(${u.signals.visual})`}`:"")+"}"}]},{name:d+l,value:{},on:[{events:g,update:`{x: ${h}.x - x(unit), y: ${h}.y - y(unit)}`}]}),void 0!==p&&f(e,t,p,"width",i),void 0!==u&&f(e,t,u,"height",i),i}};function f(e,t,i,n,o){const d=t.name,f=d+s,c=d+l,h=i.channel,p=r.Z.defined(t),u=o.filter((e=>e.name===i.signals[p?"data":"visual"]))[0],g=e.getSizeSignalRef(n).signal,m=e.getScaleComponent(h),b=m.get("type"),y=m.get("reverse"),v=p?h===a.X?y?"":"-":y?"-":"":"",_=`${f}.extent_${h}`,x=`${p?"log"===b?"panLog":"symlog"===b?"panSymlog":"pow"===b?"panPow":"panLinear":"panLinear"}(${_}, ${v}${c}.${h} / ${p?`${g}`:`span(${_})`}${p?"pow"===b?`, ${m.get("exponent")??1}`:"symlog"===b?`, ${m.get("constant")??1}`:"":""})`;u.on.push({events:{signal:c},update:p?x:`clampRange(${x}, 0, ${g})`})}},93906:(e,t,i)=>{"use strict";i.d(t,{Z:()=>f});var n=i(83082),a=i(48823),o=i(19387),r=i(59663),s=i(1397);const l="_zoom_anchor",d="_zoom_delta",f={defined:e=>"interval"===e.type&&e.zoom,signals:(e,t,i)=>{const f=t.name,h=s.Z.defined(t),p=f+d,{x:u,y:g}=t.project.hasChannel,m=(0,a.m8)(e.scaleName(o.X)),b=(0,a.m8)(e.scaleName(o.Y));let y=(0,n.n)(t.zoom,"scope");return h||(y=y.map((e=>(e.markname=f+r.VD,e)))),i.push({name:f+l,on:[{events:y,update:h?"{"+[m?`x: invert(${m}, x(unit))`:"",b?`y: invert(${b}, y(unit))`:""].filter((e=>!!e)).join(", ")+"}":"{x: x(unit), y: y(unit)}"}]},{name:p,on:[{events:y,force:!0,update:"pow(1.001, event.deltaY * pow(16, event.deltaMode))"}]}),void 0!==u&&c(e,t,u,"width",i),void 0!==g&&c(e,t,g,"height",i),i}};function c(e,t,i,n,a){const o=t.name,r=i.channel,f=s.Z.defined(t),c=a.filter((e=>e.name===i.signals[f?"data":"visual"]))[0],h=e.getSizeSignalRef(n).signal,p=e.getScaleComponent(r),u=p.get("type"),g=f?(0,s.n)(e,r):c.name,m=o+d,b=`${f?"log"===u?"zoomLog":"symlog"===u?"zoomSymlog":"pow"===u?"zoomPow":"zoomLinear":"zoomLinear"}(${g}, ${o}${l}.${r}, ${m}${f?"pow"===u?`, ${p.get("exponent")??1}`:"symlog"===u?`, ${p.get("constant")??1}`:"":""})`;c.on.push({events:{signal:m},update:f?b:`clampRange(${b}, 0, ${h})`})}},17625:(e,t,i)=>{"use strict";i.d(t,{T:()=>n});class n{constructor(e){Object.defineProperty(this,"signal",{enumerable:!0,get:e})}static fromName(e,t){return new n((()=>e(t)))}}},77719:(e,t,i)=>{"use strict";i.d(t,{P:()=>o,vf:()=>r,sC:()=>s,VS:()=>l,cT:()=>d,fw:()=>f});var n=i(56997),a=i(59159);class o{constructor(e={},t={}){this.explicit=e,this.implicit=t}clone(){return new o((0,a.OM)(this.explicit),(0,a.OM)(this.implicit))}combine(){return{...this.explicit,...this.implicit}}get(e){return(0,a.du)(this.explicit[e],this.implicit[e])}getWithExplicit(e){return void 0!==this.explicit[e]?{explicit:!0,value:this.explicit[e]}:void 0!==this.implicit[e]?{explicit:!1,value:this.implicit[e]}:{explicit:!1,value:void 0}}setWithExplicit(e,{value:t,explicit:i}){void 0!==t&&this.set(e,t,i)}set(e,t,i){return delete this[i?"implicit":"explicit"][e],this[i?"explicit":"implicit"][e]=t,this}copyKeyFromSplit(e,{explicit:t,implicit:i}){void 0!==t[e]?this.set(e,t[e],!0):void 0!==i[e]&&this.set(e,i[e],!1)}copyKeyFromObject(e,t){void 0!==t[e]&&this.set(e,t[e],!0)}copyAll(e){for(const t of(0,a.XP)(e.combine())){const i=e.getWithExplicit(t);this.setWithExplicit(t,i)}}}function r(e){return{explicit:!0,value:e}}function s(e){return{explicit:!1,value:e}}function l(e){return(t,i,n,a)=>{const o=e(t.value,i.value);return o>0?t:o<0?i:d(t,i,n,a)}}function d(e,t,i,a){return e.explicit&&t.explicit&&n.ZK(n.yw.mergeConflictingProperty(i,a,e.value,t.value)),e}function f(e,t,i,n,o=d){return void 0===e||void 0===e.value?t:e.explicit&&!t.explicit?e:t.explicit&&!e.explicit?t:(0,a.vZ)(e.value,t.value)?e:o(e,t,i,n)}},58694:(e,t,i)=>{"use strict";i.d(t,{g:()=>O});var n=i(48823),a=i(84151),o=i(19387),r=i(7422),s=i(35594),l=i(20640),d=i(77125),f=i(78666),c=i(98963),h=i(73651),p=i(36495),u=i(59159),g=i(32424),m=i(40325),b=i(62334),y=i(19796),v=i(37042),_=i(80745),x=i(13922),w=i(36899),$=i(78381),k=i(3496),T=i(66151),D=i(77974);class O extends k.Ne{constructor(e,t,i,n={},a){super(e,"unit",t,i,a,void 0,(0,h.EQ)(e)?e.view:void 0),this.specifiedScales={},this.specifiedAxes={},this.specifiedLegends={},this.specifiedProjection={},this.selection=[],this.children=[];const o=(0,f.QD)(e.mark)?{...e.mark}:{type:e.mark},r=o.type;void 0===o.filled&&(o.filled=(0,w.N)(o,a,{graticule:e.data&&(0,s.YJ)(e.data)}));const d=this.encoding=(0,l.z)(e.encoding||{},r,o.filled,a);this.markDef=(0,w.U)(o,d,a),this.size=(0,_.x)({encoding:d,size:(0,h.EQ)(e)?{...n,...e.width?{width:e.width}:{},...e.height?{height:e.height}:{}}:n}),this.stack=(0,p.kn)(r,d),this.specifiedScales=this.initScales(r,d),this.specifiedAxes=this.initAxes(d),this.specifiedLegends=this.initLegends(d),this.specifiedProjection=e.projection,this.selection=(e.params??[]).filter((e=>(0,c.wY)(e)))}get hasProjection(){const{encoding:e}=this,t=this.mark===f.uK,i=e&&o.bV.some((t=>(0,r.v3)(e[t])));return t||i}scaleDomain(e){const t=this.specifiedScales[e];return t?t.domain:void 0}axis(e){return this.specifiedAxes[e]}legend(e){return this.specifiedLegends[e]}initScales(e,t){return o.cA.reduce(((e,i)=>{const n=(0,r.EA)(t[i]);return n&&(e[i]=this.initScale(n.scale??{})),e}),{})}initScale(e){const{domain:t,range:i}=e,a=(0,d.K)(e);return(0,n.kJ)(t)&&(a.domain=t.map(b.cn)),(0,n.kJ)(i)&&(a.range=i.map(b.cn)),a}initAxes(e){return o.Kz.reduce(((t,i)=>{const n=e[i];if((0,r.v3)(n)||i===o.X&&(0,r.v3)(e.x2)||i===o.Y&&(0,r.v3)(e.y2)){const e=(0,r.v3)(n)?n.axis:void 0;t[i]=e?this.initAxis({...e}):e}return t}),{})}initAxis(e){const t=(0,u.XP)(e),i={};for(const n of t){const t=e[n];i[n]=(0,a.JX)(t)?(0,b.fV)(t):(0,b.cn)(t)}return i}initLegends(e){return o.Kv.reduce(((t,i)=>{const n=(0,r.EA)(e[i]);if(n&&(0,o.l0)(i)){const e=n.legend;t[i]=e?(0,d.K)(e):e}return t}),{})}parseData(){this.component.data=(0,y.IR)(this)}parseLayoutSize(){(0,x.Xz)(this)}parseSelections(){this.component.selection=(0,D.ii)(this,this.selection)}parseMarkGroup(){this.component.mark=(0,$.o)(this)}parseAxesAndHeaders(){this.component.axes=(0,m.f)(this)}assembleSelectionTopLevelSignals(e){return(0,T.pu)(this,e)}assembleSignals(){return[...(0,g.Mt)(this),...(0,T.$N)(this,[])]}assembleSelectionData(e){return(0,T.Ho)(this,e)}assembleLayout(){return null}assembleLayoutSignals(){return(0,v.nh)(this)}assembleMarks(){let e=this.component.mark??[];return this.parent&&(0,k.pQ)(this.parent)||(e=(0,T.Zl)(this,e)),e.map(this.correctDataNames)}getMapping(){return this.encoding}get mark(){return this.markDef.type}channelHasField(e){return l.zU(this.encoding,e)}fieldDef(e){const t=this.encoding[e];return(0,r.Vm)(t)}typedFieldDef(e){const t=this.fieldDef(e);return(0,r.tV)(t)?t:null}}},44262:(e,t,i)=>{"use strict";i.d(t,{V:()=>o});var n=i(78666),a=i(18886);class o{constructor(e,t){this.name=e,this.run=t}hasMatchingType(e){return!!(0,a.G)(e)&&(0,n.TP)(e.mark)===this.name}}},26634:(e,t,i)=>{"use strict";i.d(t,{FJ:()=>c,Y1:()=>h,zD:()=>p,NE:()=>g});var n=i(48823),a=i(62334),o=i(20640),r=i(56997),s=i(78666),l=i(59159),d=i(44262),f=i(91739);const c="boxplot",h=["box","median","outliers","rule","ticks"],p=new d.V(c,g);function u(e){return(0,n.hj)(e)?"tukey":e}function g(e,{config:t}){e={...e,encoding:(0,o.rC)(e.encoding,t)};const{mark:i,encoding:d,params:h,projection:p,...g}=e,b=(0,s.QD)(i)?i:{type:i};h&&r.ZK(r.yw.selectionNotSupported("boxplot"));const y=b.extent??t.boxplot.extent,v=(0,a.is)("size",b,t),_=u(y),{bins:x,timeUnits:w,transform:$,continuousAxisChannelDef:k,continuousAxis:T,groupby:D,aggregate:O,encodingWithoutContinuousAxis:S,ticksOrient:R,boxOrient:A,customTooltipWithoutAggregatedField:E}=function(e,t,i){const n=(0,f.sh)(e,c),{continuousAxisChannelDef:a,continuousAxis:r}=(0,f.ho)(e,n,c),s=a.field,l=u(t),d=[...m(s),{op:"median",field:s,as:`mid_box_${s}`},{op:"min",field:s,as:("min-max"===l?"lower_whisker_":"min_")+s},{op:"max",field:s,as:("min-max"===l?"upper_whisker_":"max_")+s}],h="min-max"===l||"tukey"===l?[]:[{calculate:`datum["upper_box_${s}"] - datum["lower_box_${s}"]`,as:`iqr_${s}`},{calculate:`min(datum["upper_box_${s}"] + datum["iqr_${s}"] * ${t}, datum["max_${s}"])`,as:`upper_whisker_${s}`},{calculate:`max(datum["lower_box_${s}"] - datum["iqr_${s}"] * ${t}, datum["min_${s}"])`,as:`lower_whisker_${s}`}],{[r]:p,...g}=e.encoding,{customTooltipWithoutAggregatedField:b,filteredEncoding:y}=(0,f.p_)(g),{bins:v,timeUnits:_,aggregate:x,groupby:w,encoding:$}=(0,o.Hn)(y,i),k="vertical"===n?"horizontal":"vertical",T=n;return{bins:v,timeUnits:_,transform:[...v,..._,{aggregate:[...x,...d],groupby:w},...h],groupby:w,aggregate:x,continuousAxisChannelDef:a,continuousAxis:r,encodingWithoutContinuousAxis:$,ticksOrient:k,boxOrient:T,customTooltipWithoutAggregatedField:b}}(e,y,t),{color:F,size:q,...P}=S,I=e=>(0,f.uH)(b,T,k,e,t.boxplot),j=I(P),C=I(S),z=I({...P,...q?{size:q}:{}}),U=(0,f.Bb)([{fieldPrefix:"min-max"===_?"upper_whisker_":"max_",titlePrefix:"Max"},{fieldPrefix:"upper_box_",titlePrefix:"Q3"},{fieldPrefix:"mid_box_",titlePrefix:"Median"},{fieldPrefix:"lower_box_",titlePrefix:"Q1"},{fieldPrefix:"min-max"===_?"lower_whisker_":"min_",titlePrefix:"Min"}],k,S),N={type:"tick",color:"black",opacity:1,orient:R,invalid:null,aria:!1},V="min-max"===_?U:(0,f.Bb)([{fieldPrefix:"upper_whisker_",titlePrefix:"Upper Whisker"},{fieldPrefix:"lower_whisker_",titlePrefix:"Lower Whisker"}],k,S),L=[...j({partName:"rule",mark:{type:"rule",invalid:null,aria:!1},positionPrefix:"lower_whisker",endPositionPrefix:"lower_box",extraEncoding:V}),...j({partName:"rule",mark:{type:"rule",invalid:null,aria:!1},positionPrefix:"upper_box",endPositionPrefix:"upper_whisker",extraEncoding:V}),...j({partName:"ticks",mark:N,positionPrefix:"lower_whisker",extraEncoding:V}),...j({partName:"ticks",mark:N,positionPrefix:"upper_whisker",extraEncoding:V})],W=[..."tukey"!==_?L:[],...C({partName:"box",mark:{type:"bar",...v?{size:v}:{},orient:A,invalid:null,ariaRoleDescription:"box"},positionPrefix:"lower_box",endPositionPrefix:"upper_box",extraEncoding:U}),...z({partName:"median",mark:{type:"tick",invalid:null,...(0,n.Kn)(t.boxplot.median)&&t.boxplot.median.color?{color:t.boxplot.median.color}:{},...v?{size:v}:{},orient:R,aria:!1},positionPrefix:"mid_box",extraEncoding:U})];if("min-max"===_)return{...g,transform:(g.transform??[]).concat($),layer:W};const M=`datum["lower_box_${k.field}"]`,B=`datum["upper_box_${k.field}"]`,H=`(${B} - ${M})`,G=`${M} - ${y} * ${H}`,X=`${B} + ${y} * ${H}`,Y=`datum["${k.field}"]`,J={joinaggregate:m(k.field),groupby:D},K={transform:[{filter:`(${G} <= ${Y}) && (${Y} <= ${X})`},{aggregate:[{op:"min",field:k.field,as:`lower_whisker_${k.field}`},{op:"max",field:k.field,as:`upper_whisker_${k.field}`},{op:"min",field:`lower_box_${k.field}`,as:`lower_box_${k.field}`},{op:"max",field:`upper_box_${k.field}`,as:`upper_box_${k.field}`},...O],groupby:D}],layer:L},{tooltip:Z,...Q}=P,{scale:ee,axis:te}=k,ie=(0,f.YQ)(k),ne=(0,l.CE)(te,["title"]),ae=(0,f.ZZ)(b,"outliers",t.boxplot,{transform:[{filter:`(${Y} < ${G}) || (${Y} > ${X})`}],mark:"point",encoding:{[T]:{field:k.field,type:k.type,...void 0!==ie?{title:ie}:{},...void 0!==ee?{scale:ee}:{},...(0,l.xb)(ne)?{}:{axis:ne}},...Q,...F?{color:F}:{},...E?{tooltip:E}:{}}})[0];let oe;const re=[...x,...w,J];return ae?oe={transform:re,layer:[ae,K]}:(oe=K,oe.transform.unshift(...re)),{...g,layer:[oe,{transform:$,layer:W}]}}function m(e){return[{op:"q1",field:e,as:`lower_box_${e}`},{op:"q3",field:e,as:`upper_box_${e}`}]}},91739:(e,t,i)=>{"use strict";i.d(t,{p_:()=>f,Bb:()=>c,YQ:()=>h,uH:()=>p,ZZ:()=>u,ho:()=>g,sh:()=>b});var n=i(48823),a=i(7422),o=i(20640),r=i(56997),s=i(78666),l=i(59159),d=i(99185);function f(e){const{tooltip:t,...i}=e;if(!t)return{filteredEncoding:i};let a,o;if((0,n.kJ)(t)){for(const e of t)e.aggregate?(a||(a=[]),a.push(e)):(o||(o=[]),o.push(e));a&&(i.tooltip=a)}else t.aggregate?i.tooltip=t:o=t;return(0,n.kJ)(o)&&1===o.length&&(o=o[0]),{customTooltipWithoutAggregatedField:o,filteredEncoding:i}}function c(e,t,i,n=!0){if("tooltip"in i)return{tooltip:i.tooltip};const r=e.map((({fieldPrefix:e,titlePrefix:i})=>{const a=n?` of ${h(t)}`:"";return{field:e+t.field,type:t.type,title:(0,d.Lo)(i)?{signal:`${i}"${escape(a)}"`}:i+a}})),s=(0,o.Ts)(i).map(a.uE);return{tooltip:[...r,...(0,l.Tw)(s,l.vp)]}}function h(e){const{title:t,field:i}=e;return(0,l.du)(t,i)}function p(e,t,i,a,o){const{scale:r,axis:s}=i;return({partName:l,mark:d,positionPrefix:f,endPositionPrefix:c,extraEncoding:p={}})=>{const g=h(i);return u(e,l,o,{mark:d,encoding:{[t]:{field:`${f}_${i.field}`,type:i.type,...void 0!==g?{title:g}:{},...void 0!==r?{scale:r}:{},...void 0!==s?{axis:s}:{}},...(0,n.HD)(c)?{[`${t}2`]:{field:`${c}_${i.field}`}}:{},...a,...p}})}}function u(e,t,i,a){const{clip:o,color:r,opacity:l}=e,d=e.type;return e[t]||void 0===e[t]&&i[t]?[{...a,mark:{...i[t],...o?{clip:o}:{},...r?{color:r}:{},...l?{opacity:l}:{},...(0,s.QD)(a.mark)?a.mark:{type:a.mark},style:`${d}-${t}`,...(0,n.jn)(e[t])?{}:e[t]}}]:[]}function g(e,t,i){const{encoding:n}=e,a="vertical"===t?"y":"x",o=n[a],r=n[`${a}2`],s=n[`${a}Error`],l=n[`${a}Error2`];return{continuousAxisChannelDef:m(o,i),continuousAxisChannelDef2:m(r,i),continuousAxisChannelDefError:m(s,i),continuousAxisChannelDefError2:m(l,i),continuousAxis:a}}function m(e,t){if(e&&e.aggregate){const{aggregate:i,...n}=e;return i!==t&&r.ZK(r.yw.errorBarContinuousAxisHasCustomizedAggregate(i,t)),n}return e}function b(e,t){const{mark:i,encoding:n}=e,{x:o,y:r}=n;if((0,s.QD)(i)&&i.orient)return i.orient;if((0,a.OV)(o)){if((0,a.OV)(r)){const e=(0,a.VQ)(o)&&o.aggregate,i=(0,a.VQ)(r)&&r.aggregate;if(e||i!==t){if(i||e!==t){if(e===t&&i===t)throw new Error("Both x and y cannot have aggregate");return(0,a.vc)(r)&&!(0,a.vc)(o)?"horizontal":"vertical"}return"horizontal"}return"vertical"}return"horizontal"}if((0,a.OV)(r))return"vertical";throw new Error(`Need a valid continuous axis for ${t}s`)}},62069:(e,t,i)=>{"use strict";i.d(t,{BS:()=>l,bU:()=>d,At:()=>f,rV:()=>c});var n=i(20640),a=i(56997),o=i(44262),r=i(91739),s=i(56302);const l="errorband",d=["band","borders"],f=new o.V(l,c);function c(e,{config:t}){e={...e,encoding:(0,n.rC)(e.encoding,t)};const{transform:i,continuousAxisChannelDef:o,continuousAxis:d,encodingWithoutContinuousAxis:f,markDef:c,outerSpec:h,tooltipEncoding:p}=(0,s.yd)(e,l,t),u=c,g=(0,r.uH)(u,d,o,f,t.errorband),m=void 0!==e.encoding.x&&void 0!==e.encoding.y;let b={type:m?"area":"rect"},y={type:m?"line":"rule"};const v={...u.interpolate?{interpolate:u.interpolate}:{},...u.tension&&u.interpolate?{tension:u.tension}:{}};return m?(b={...b,...v,ariaRoleDescription:"errorband"},y={...y,...v,aria:!1}):u.interpolate?a.ZK(a.yw.errorBand1DNotSupport("interpolate")):u.tension&&a.ZK(a.yw.errorBand1DNotSupport("tension")),{...h,transform:i,layer:[...g({partName:"band",mark:b,positionPrefix:"lower",endPositionPrefix:"upper",extraEncoding:p}),...g({partName:"borders",mark:y,positionPrefix:"lower",extraEncoding:p}),...g({partName:"borders",mark:y,positionPrefix:"upper",extraEncoding:p})]}}},56302:(e,t,i)=>{"use strict";i.d(t,{se:()=>f,GP:()=>c,BE:()=>h,sG:()=>p,yd:()=>u});var n=i(7422),a=i(20640),o=i(56997),r=i(78666),s=i(59159),l=i(44262),d=i(91739);const f="errorbar",c=["ticks","rule"],h=new l.V(f,p);function p(e,{config:t}){e={...e,encoding:(0,a.rC)(e.encoding,t)};const{transform:i,continuousAxisChannelDef:n,continuousAxis:o,encodingWithoutContinuousAxis:r,ticksOrient:s,markDef:l,outerSpec:c,tooltipEncoding:h}=u(e,f,t);delete r.size;const p=(0,d.uH)(l,o,n,r,t.errorbar),g=l.thickness,m=l.size,b={type:"tick",orient:s,aria:!1,...void 0!==g?{thickness:g}:{},...void 0!==m?{size:m}:{}},y=[...p({partName:"ticks",mark:b,positionPrefix:"lower",extraEncoding:h}),...p({partName:"ticks",mark:b,positionPrefix:"upper",extraEncoding:h}),...p({partName:"rule",mark:{type:"rule",ariaRoleDescription:"errorbar",...void 0!==g?{size:g}:{}},positionPrefix:"lower",endPositionPrefix:"upper",extraEncoding:h})];return{...c,transform:i,...y.length>1?{layer:y}:{...y[0]}}}function u(e,t,i){const{mark:l,encoding:f,params:c,projection:h,...p}=e,u=(0,r.QD)(l)?l:{type:l};c&&o.ZK(o.yw.selectionNotSupported(t));const{orient:m,inputType:b}=function(e,t){const{encoding:i}=e;if(function(e){return((0,n.v3)(e.x)||(0,n.v3)(e.y))&&!(0,n.v3)(e.x2)&&!(0,n.v3)(e.y2)&&!(0,n.v3)(e.xError)&&!(0,n.v3)(e.xError2)&&!(0,n.v3)(e.yError)&&!(0,n.v3)(e.yError2)}(i))return{orient:(0,d.sh)(e,t),inputType:"raw"};const a=function(e){return(0,n.v3)(e.x2)||(0,n.v3)(e.y2)}(i),o=function(e){return(0,n.v3)(e.xError)||(0,n.v3)(e.xError2)||(0,n.v3)(e.yError)||(0,n.v3)(e.yError2)}(i),r=i.x,s=i.y;if(a){if(o)throw new Error(`${t} cannot be both type aggregated-upper-lower and aggregated-error`);const e=i.x2,a=i.y2;if((0,n.v3)(e)&&(0,n.v3)(a))throw new Error(`${t} cannot have both x2 and y2`);if((0,n.v3)(e)){if((0,n.OV)(r))return{orient:"horizontal",inputType:"aggregated-upper-lower"};throw new Error(`Both x and x2 have to be quantitative in ${t}`)}if((0,n.v3)(a)){if((0,n.OV)(s))return{orient:"vertical",inputType:"aggregated-upper-lower"};throw new Error(`Both y and y2 have to be quantitative in ${t}`)}throw new Error("No ranged axis")}{const e=i.xError,a=i.xError2,o=i.yError,l=i.yError2;if((0,n.v3)(a)&&!(0,n.v3)(e))throw new Error(`${t} cannot have xError2 without xError`);if((0,n.v3)(l)&&!(0,n.v3)(o))throw new Error(`${t} cannot have yError2 without yError`);if((0,n.v3)(e)&&(0,n.v3)(o))throw new Error(`${t} cannot have both xError and yError with both are quantiative`);if((0,n.v3)(e)){if((0,n.OV)(r))return{orient:"horizontal",inputType:"aggregated-error"};throw new Error("All x, xError, and xError2 (if exist) have to be quantitative")}if((0,n.v3)(o)){if((0,n.OV)(s))return{orient:"vertical",inputType:"aggregated-error"};throw new Error("All y, yError, and yError2 (if exist) have to be quantitative")}throw new Error("No ranged axis")}}(e,t),{continuousAxisChannelDef:y,continuousAxisChannelDef2:v,continuousAxisChannelDefError:_,continuousAxisChannelDefError2:x,continuousAxis:w}=(0,d.ho)(e,m,t),{errorBarSpecificAggregate:$,postAggregateCalculates:k,tooltipSummary:T,tooltipTitleWithFieldName:D}=function(e,t,i,a,r,l,d,f){let c=[],h=[];const p=t.field;let u,m=!1;if("raw"===l){const t=e.center?e.center:e.extent?"iqr"===e.extent?"median":"mean":f.errorbar.center,i=e.extent?e.extent:"mean"===t?"stderr":"iqr";if("median"===t!=("iqr"===i)&&o.ZK(o.yw.errorBarCenterIsUsedWithWrongExtent(t,i,d)),"stderr"===i||"stdev"===i)c=[{op:i,field:p,as:`extent_${p}`},{op:t,field:p,as:`center_${p}`}],h=[{calculate:`datum["center_${p}"] + datum["extent_${p}"]`,as:`upper_${p}`},{calculate:`datum["center_${p}"] - datum["extent_${p}"]`,as:`lower_${p}`}],u=[{fieldPrefix:"center_",titlePrefix:(0,s.Qs)(t)},{fieldPrefix:"upper_",titlePrefix:g(t,i,"+")},{fieldPrefix:"lower_",titlePrefix:g(t,i,"-")}],m=!0;else{let e,t,a;"ci"===i?(e="mean",t="ci0",a="ci1"):(e="median",t="q1",a="q3"),c=[{op:t,field:p,as:`lower_${p}`},{op:a,field:p,as:`upper_${p}`},{op:e,field:p,as:`center_${p}`}],u=[{fieldPrefix:"upper_",titlePrefix:(0,n.TN)({field:p,aggregate:a,type:"quantitative"},f,{allowDisabling:!1})},{fieldPrefix:"lower_",titlePrefix:(0,n.TN)({field:p,aggregate:t,type:"quantitative"},f,{allowDisabling:!1})},{fieldPrefix:"center_",titlePrefix:(0,n.TN)({field:p,aggregate:e,type:"quantitative"},f,{allowDisabling:!1})}]}}else{(e.center||e.extent)&&o.ZK(o.yw.errorBarCenterAndExtentAreNotNeeded(e.center,e.extent)),"aggregated-upper-lower"===l?(u=[],h=[{calculate:`datum["${i.field}"]`,as:`upper_${p}`},{calculate:`datum["${p}"]`,as:`lower_${p}`}]):"aggregated-error"===l&&(u=[{fieldPrefix:"",titlePrefix:p}],h=[{calculate:`datum["${p}"] + datum["${a.field}"]`,as:`upper_${p}`}],r?h.push({calculate:`datum["${p}"] + datum["${r.field}"]`,as:`lower_${p}`}):h.push({calculate:`datum["${p}"] - datum["${a.field}"]`,as:`lower_${p}`}));for(const e of h)u.push({fieldPrefix:e.as.substring(0,6),titlePrefix:(0,s.ko)((0,s.ko)(e.calculate,'datum["',""),'"]',"")})}return{postAggregateCalculates:h,errorBarSpecificAggregate:c,tooltipSummary:u,tooltipTitleWithFieldName:m}}(u,y,v,_,x,b,t,i),{[w]:O,["x"===w?"x2":"y2"]:S,["x"===w?"xError":"yError"]:R,["x"===w?"xError2":"yError2"]:A,...E}=f,{bins:F,timeUnits:q,aggregate:P,groupby:I,encoding:j}=(0,a.Hn)(E,i),C=[...P,...$],z="raw"!==b?[]:I,U=(0,d.Bb)(T,y,j,D);return{transform:[...p.transform??[],...F,...q,...0===C.length?[]:[{aggregate:C,groupby:z}],...k],groupby:z,continuousAxisChannelDef:y,continuousAxis:w,encodingWithoutContinuousAxis:j,ticksOrient:"vertical"===m?"horizontal":"vertical",markDef:u,outerSpec:p,tooltipEncoding:U}}function g(e,t,i){return`${(0,s.Qs)(e)} ${i} ${t}`}},7931:(e,t,i)=>{"use strict";i.d(t,{NU:()=>f});var n=i(59159),a=i(44262),o=i(26634),r=i(62069),s=i(56302);const l={};function d(e,t,i){const n=new a.V(e,t);l[e]={normalizer:n,parts:i}}function f(){return(0,n.XP)(l)}d(o.FJ,o.NE,o.Y1),d(s.se,s.sG,s.GP),d(r.BS,r.rV,r.bU)},52262:(e,t,i)=>{"use strict";i.d(t,{xy:()=>y,M:()=>v,hb:()=>_,py:()=>S,dC:()=>F});var n=i(48823),a=i(84151),o=i(62334),r=i(7931),s=i(77125),l=i(11219),d=i(24611),f=i(81213),c=i(78666),h=i(60169),p=i(49272),u=i(98963),g=i(73651),m=i(53918),b=i(59159);function y(e,t){return e[t]??e["width"===t?"continuousWidth":"continuousHeight"]}function v(e,t){const i=_(e,t);return(0,g.Zz)(i)?i.step:x}function _(e,t){const i=e[t]??e["width"===t?"discreteWidth":"discreteHeight"];return(0,b.du)(i,{step:e.step})}const x=20,w={background:"white",padding:5,timeFormat:"%b %d, %Y",countTitle:"Count of Records",view:{continuousWidth:200,continuousHeight:200,step:x},mark:c.$j,arc:{},area:{},bar:c.et,circle:{},geoshape:{},image:{},line:{},point:{},rect:c.g5,rule:{color:"black"},square:{},text:{color:"black"},tick:c.NO,trail:{},boxplot:{size:14,extent:1.5,box:{},median:{color:"white"},outliers:{},rule:{},ticks:null},errorbar:{center:"mean",rule:!0,ticks:!1},errorband:{band:{opacity:.3},borders:!1},scale:p.Vl,projection:{},legend:f.LQ,header:{titlePadding:10,labelPadding:10},headerColumn:{},headerRow:{},headerFacet:{},selection:u.u_,style:{},title:{},facet:{spacing:g.Lu},concat:{spacing:g.Lu}},$=["#4c78a8","#f58518","#e45756","#72b7b2","#54a24b","#eeca3b","#b279a2","#ff9da6","#9d755d","#bab0ac"],k={text:11,guideLabel:10,guideTitle:11,groupTitle:13,groupSubtitle:12},T={blue:$[0],orange:$[1],red:$[2],teal:$[3],green:$[4],yellow:$[5],purple:$[6],pink:$[7],brown:$[8],gray0:"#000",gray1:"#111",gray2:"#222",gray3:"#333",gray4:"#444",gray5:"#555",gray6:"#666",gray7:"#777",gray8:"#888",gray9:"#999",gray10:"#aaa",gray11:"#bbb",gray12:"#ccc",gray13:"#ddd",gray14:"#eee",gray15:"#fff"};function D(e){const t=(0,b.XP)(e||{}),i={};for(const n of t){const t=e[n];i[n]=(0,a.JX)(t)?(0,o.fV)(t):(0,o.cn)(t)}return i}const O=[...c.A6,...a.SW,...d.Ec,"background","padding","legend","lineBreak","scale","style","title","view"];function S(e={}){const{color:t,font:i,fontSize:r,...l}=e,f=(0,n.fE)({},w,i?function(e){return{text:{font:e},style:{"guide-label":{font:e},"guide-title":{font:e},"group-title":{font:e},"group-subtitle":{font:e}}}}(i):{},t?function(e={}){return{signals:[{name:"color",value:(0,n.Kn)(e)?{...T,...e}:T}],mark:{color:{signal:"color.blue"}},rule:{color:{signal:"color.gray0"}},text:{color:{signal:"color.gray0"}},style:{"guide-label":{fill:{signal:"color.gray0"}},"guide-title":{fill:{signal:"color.gray0"}},"group-title":{fill:{signal:"color.gray0"}},"group-subtitle":{fill:{signal:"color.gray0"}},cell:{stroke:{signal:"color.gray8"}}},axis:{domainColor:{signal:"color.gray13"},gridColor:{signal:"color.gray8"},tickColor:{signal:"color.gray13"}},range:{category:[{signal:"color.blue"},{signal:"color.orange"},{signal:"color.red"},{signal:"color.teal"},{signal:"color.green"},{signal:"color.yellow"},{signal:"color.purple"},{signal:"color.pink"},{signal:"color.brown"},{signal:"color.grey8"}]}}}(t):{},r?function(e){return{signals:[{name:"fontSize",value:(0,n.Kn)(e)?{...k,...e}:k}],text:{fontSize:{signal:"fontSize.text"}},style:{"guide-label":{fontSize:{signal:"fontSize.guideLabel"}},"guide-title":{fontSize:{signal:"fontSize.guideTitle"}},"group-title":{fontSize:{signal:"fontSize.groupTitle"}},"group-subtitle":{fontSize:{signal:"fontSize.groupSubtitle"}}}}}(r):{},l||{}),h=(0,b.CE)(f,O);for(const e of["background","lineBreak","padding"])f[e]&&(h[e]=(0,o.cn)(f[e]));for(const e of c.A6)f[e]&&(h[e]=(0,s.K)(f[e]));for(const e of a.SW)f[e]&&(h[e]=D(f[e]));for(const e of d.Ec)f[e]&&(h[e]=(0,s.K)(f[e]));return f.legend&&(h.legend=(0,s.K)(f.legend)),f.scale&&(h.scale=(0,s.K)(f.scale)),f.style&&(h.style=function(e){const t=(0,b.XP)(e),i={};for(const n of t)i[n]=D(e[n]);return i}(f.style)),f.title&&(h.title=(0,s.K)(f.title)),f.view&&(h.view=(0,s.K)(f.view)),h}const R=["view",...c.z1],A=["color","fontSize","background","padding","facet","concat","numberFormat","timeFormat","countTitle","header","axisQuantitative","axisTemporal","axisDiscrete","axisPoint","axisXBand","axisXPoint","axisXDiscrete","axisXQuantitative","axisXTemporal","axisYBand","axisYPoint","axisYDiscrete","axisYQuantitative","axisYTemporal","scale","selection","overlay"],E={view:["continuousWidth","continuousHeight","discreteWidth","discreteHeight","step"],...c.rb};function F(e){e=(0,b.OM)(e);for(const t of A)delete e[t];if(e.axis)for(const t in e.axis)(0,a.JX)(e.axis[t])&&delete e.axis[t];if(e.legend)for(const t of l.g)delete e.legend[t];if(e.mark){for(const t of c.FG)delete e.mark[t];e.mark.tooltip&&(0,n.Kn)(e.mark.tooltip)&&delete e.mark.tooltip}e.params&&(e.signals=(e.signals||[]).concat((0,h.h)(e.params)),delete e.params);for(const t of R){for(const i of c.FG)delete e[t][i];const i=E[t];if(i)for(const n of i)delete e[t][n];q(e,t)}for(const t of(0,r.NU)())delete e[t];!function(e){const{titleMarkConfig:t,subtitleMarkConfig:i,subtitle:n}=(0,m.s)(e.title);(0,b.xb)(t)||(e.style["group-title"]={...e.style["group-title"],...t}),(0,b.xb)(i)||(e.style["group-subtitle"]={...e.style["group-subtitle"],...i}),(0,b.xb)(n)?delete e.title:e.title=n}(e);for(const t in e)(0,n.Kn)(e[t])&&(0,b.xb)(e[t])&&delete e[t];return(0,b.xb)(e)?void 0:e}function q(e,t,i,n){"view"===t&&(i="cell");const a={...n?e[t][n]:e[t],...e.style[i??t]};(0,b.xb)(a)||(e.style[i??t]=a),n||delete e[t]}},35594:(e,t,i)=>{"use strict";function n(e){return"url"in e}function a(e){return"values"in e}function o(e){return"name"in e&&!n(e)&&!a(e)&&!r(e)}function r(e){return e&&(s(e)||l(e)||d(e))}function s(e){return"sequence"in e}function l(e){return"sphere"in e}function d(e){return"graticule"in e}var f;i.d(t,{F4:()=>n,pW:()=>a,tH:()=>o,xD:()=>r,TL:()=>s,gJ:()=>l,YJ:()=>d,ye:()=>f}),function(e){e[e.Raw=0]="Raw",e[e.Main=1]="Main",e[e.Row=2]="Row",e[e.Column=3]="Column",e[e.Lookup=4]="Lookup"}(f||(f={}))},62343:(e,t,i)=>{"use strict";i.d(t,{v9:()=>s,vb:()=>p,j:()=>u,JP:()=>g});var n=i(48823),a=i(56997),o=i(31021),r=i(59159);function s(e){if(e&&(0,n.Kn)(e))for(const t of o.vH)if(t in e)return!0;return!1}const l=["january","february","march","april","may","june","july","august","september","october","november","december"],d=l.map((e=>e.substr(0,3))),f=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"],c=f.map((e=>e.substr(0,3)));function h(e,t){const i=[];if(t&&void 0!==e.day&&(0,r.XP)(e).length>1&&(a.ZK(a.yw.droppedDay(e)),delete(e=(0,r.OM)(e)).day),void 0!==e.year?i.push(e.year):i.push(2012),void 0!==e.month){const o=t?function(e){if((0,r.kE)(e)&&(e=+e),(0,n.hj)(e))return e-1;{const t=e.toLowerCase(),i=l.indexOf(t);if(-1!==i)return i;const n=t.substr(0,3),o=d.indexOf(n);if(-1!==o)return o;throw new Error(a.yw.invalidTimeUnit("month",e))}}(e.month):e.month;i.push(o)}else if(void 0!==e.quarter){const o=t?function(e){if((0,r.kE)(e)&&(e=+e),(0,n.hj)(e))return e>4&&a.ZK(a.yw.invalidTimeUnit("quarter",e)),e-1;throw new Error(a.yw.invalidTimeUnit("quarter",e))}(e.quarter):e.quarter;i.push((0,n.hj)(o)?3*o:`${o}*3`)}else i.push(0);if(void 0!==e.date)i.push(e.date);else if(void 0!==e.day){const o=t?function(e){if((0,r.kE)(e)&&(e=+e),(0,n.hj)(e))return e%7;{const t=e.toLowerCase(),i=f.indexOf(t);if(-1!==i)return i;const n=t.substr(0,3),o=c.indexOf(n);if(-1!==o)return o;throw new Error(a.yw.invalidTimeUnit("day",e))}}(e.day):e.day;i.push((0,n.hj)(o)?o+1:`${o}+1`)}else i.push(1);for(const t of["hours","minutes","seconds","milliseconds"]){const n=e[t];i.push(void 0===n?0:n)}return i}function p(e){const t=h(e,!0).join(", ");return e.utc?`utc(${t})`:`datetime(${t})`}function u(e){const t=h(e,!1).join(", ");return e.utc?`utc(${t})`:`datetime(${t})`}function g(e){const t=h(e,!0);return e.utc?+new Date(Date.UTC(...t)):+new Date(...t)}},20640:(e,t,i)=>{"use strict";i.d(t,{zU:()=>h,Oh:()=>p,Hn:()=>u,z:()=>g,rC:()=>m,Ts:()=>b,Ed:()=>y,u4:()=>v,e8:()=>_});var n=i(48823),a=i(24430),o=i(35647),r=i(19387),s=i(7422),l=i(56997),d=i(46689),f=i(59159),c=i(99185);function h(e,t){const i=e&&e[t];return!!i&&((0,n.kJ)(i)?(0,f.G)(i,(e=>!!e.field)):(0,s.VQ)(i)||(0,s.Xi)(i))}function p(e){return(0,f.G)(r.pD,(t=>{if(h(e,t)){const i=e[t];if((0,n.kJ)(i))return(0,f.G)(i,(e=>!!e.aggregate));{const e=(0,s.Vm)(i);return e&&!!e.aggregate}}return!1}))}function u(e,t){const i=[],n=[],l=[],f=[],c={};return y(e,((h,p)=>{if((0,s.VQ)(h)){const{field:u,aggregate:g,bin:m,timeUnit:b,...y}=h;if(g||b||m){const e=(0,s.q6)(h),v=e&&e.title;let _=(0,s.jd)(h,{forAs:!0});const x={...v?[]:{title:(0,s.TN)(h,t,{allowDisabling:!0})},...y,field:_};if(g){let e;if((0,a.Oc)(g)?(e="argmax",_=(0,s.jd)({op:"argmax",field:g.argmax},{forAs:!0}),x.field=`${_}.${u}`):(0,a.B5)(g)?(e="argmin",_=(0,s.jd)({op:"argmin",field:g.argmin},{forAs:!0}),x.field=`${_}.${u}`):"boxplot"!==g&&"errorbar"!==g&&"errorband"!==g&&(e=g),e){const t={op:e,as:_};u&&(t.field=u),f.push(t)}}else if(i.push(_),(0,s.tV)(h)&&(0,o.f$)(m)){if(n.push({bin:m,field:u,as:_}),i.push((0,s.jd)(h,{binSuffix:"end"})),(0,s.Wd)(h,p)&&i.push((0,s.jd)(h,{binSuffix:"range"})),(0,r.Zk)(p)){const e={field:`${_}_end`};c[`${p}2`]=e}x.bin="binned",(0,r.Hv)(p)||(x.type=d.ql)}else if(b){l.push({timeUnit:b,field:u,as:_});const e=(0,s.tV)(h)&&h.type!==d.Dw&&"time";e&&(p===r.lD||p===r.Li?x.formatType=e:(0,r.fF)(p)?x.legend={formatType:e,...x.legend}:(0,r.Zk)(p)&&(x.axis={formatType:e,...x.axis}))}c[p]=x}else i.push(u),c[p]=e[p]}else c[p]=e[p]})),{bins:n,timeUnits:l,aggregate:f,groupby:i,encoding:c}}function g(e,t,i,a){return(0,f.XP)(e).reduce(((d,f)=>{if(!(0,r.J6)(f))return l.ZK(l.yw.invalidEncodingChannel(f)),d;const h=e[f];if("angle"!==f||"arc"!==t||e.theta||(l.ZK(l.yw.REPLACE_ANGLE_WITH_THETA),f=r.uD),!function(e,t,i){const n=(0,r.id)(t,i);if(!n)return!1;if("binned"===n){const i=e[t===r.X2?r.X:r.Y];return!!((0,s.VQ)(i)&&(0,s.VQ)(e[t])&&(0,o.YK)(i.bin))}return!0}(e,f,t))return l.ZK(l.yw.incompatibleChannel(f,t)),d;if(f===r.NO&&"line"===t&&(0,s.Vm)(e[f])?.aggregate)return l.ZK(l.yw.LINE_WITH_VARYING_SIZE),d;if(f===r.r$&&(i?"fill"in e:"stroke"in e))return l.ZK(l.yw.droppingColor("encoding",{fill:"fill"in e,stroke:"stroke"in e})),d;if(f===r.$Y||f===r.kl&&!(0,n.kJ)(h)&&!(0,s.kJ)(h)||f===r.Li&&(0,n.kJ)(h))h&&(d[f]=(0,n.IX)(h).reduce(((e,t)=>((0,s.VQ)(t)?e.push((0,s.xe)(t,f)):l.ZK(l.yw.emptyFieldDef(t,f)),e)),[]));else{if(f===r.Li&&null===h)d[f]=null;else if(!((0,s.VQ)(h)||(0,s.Iu)(h)||(0,s.kJ)(h)||(0,s.dB)(h)||(0,c.Lo)(h)))return l.ZK(l.yw.emptyFieldDef(h,f)),d;d[f]=(0,s.q1)(h,f,a)}return d}),{})}function m(e,t){const i={};for(const n of(0,f.XP)(e)){const a=(0,s.q1)(e[n],n,t,{compositeMark:!0});i[n]=a}return i}function b(e){const t=[];for(const i of(0,f.XP)(e))if(h(e,i)){const a=e[i],o=(0,n.IX)(a);for(const e of o)(0,s.VQ)(e)?t.push(e):(0,s.Xi)(e)&&t.push(e.condition)}return t}function y(e,t,i){if(e)for(const a of(0,f.XP)(e)){const o=e[a];if((0,n.kJ)(o))for(const e of o)t.call(i,e,a);else t.call(i,o,a)}}function v(e,t,i,a){return e?(0,f.XP)(e).reduce(((i,o)=>{const r=e[o];return(0,n.kJ)(r)?r.reduce(((e,i)=>t.call(a,e,i,o)),i):t.call(a,i,r,o)}),i):i}function _(e,t){return(0,f.XP)(t).reduce(((i,a)=>{switch(a){case r.X:case r.Y:case r.n2:case r.dz:case r.Jx:case r.X2:case r.Y2:case r.uD:case r.vL:case r.OU:case r.pT:case r.y:case r.Xs:case r.VO:case r.NG:case r.lD:case r.X3:case r.Ix:case r.Li:return i;case r.kl:if("line"===e||"trail"===e)return i;case r.$Y:case r.Fn:{const e=t[a];if((0,n.kJ)(e)||(0,s.VQ)(e))for(const t of(0,n.IX)(e))t.aggregate||i.push((0,s.jd)(t,{}));return i}case r.NO:if("trail"===e)return i;case r.r$:case r.ur:case r.le:case r.JO:case r.I:case r.ky:case r.wg:case r.KF:{const e=(0,s.Vm)(t[a]);return e&&!e.aggregate&&i.push((0,s.jd)(e,{})),i}}}),[])}},77125:(e,t,i)=>{"use strict";i.d(t,{T:()=>o,K:()=>r});var n=i(62334),a=i(59159);function o(e){return e&&!!e.expr}function r(e){const t=(0,a.XP)(e||{}),i={};for(const a of t)i[a]=(0,n.cn)(e[a]);return i}},11219:(e,t,i)=>{"use strict";i.d(t,{g:()=>n});const n=["gradientHorizontalMaxLength","gradientHorizontalMinLength","gradientVerticalMaxLength","gradientVerticalMinLength","unselectedOpacity"]},24611:(e,t,i)=>{"use strict";i.d(t,{sO:()=>a,ft:()=>o,_f:()=>r,Bn:()=>s,Ec:()=>l});var n=i(59159);const a={titleAlign:"align",titleAnchor:"anchor",titleAngle:"angle",titleBaseline:"baseline",titleColor:"color",titleFont:"font",titleFontSize:"fontSize",titleFontStyle:"fontStyle",titleFontWeight:"fontWeight",titleLimit:"limit",titleLineHeight:"lineHeight",titleOrient:"orient",titlePadding:"offset"},o={labelAlign:"align",labelAnchor:"anchor",labelAngle:"angle",labelBaseline:"baseline",labelColor:"color",labelFont:"font",labelFontSize:"fontSize",labelFontStyle:"fontStyle",labelFontWeight:"fontWeight",labelLimit:"limit",labelLineHeight:"lineHeight",labelOrient:"orient",labelPadding:"offset"},r=(0,n.XP)(a),s=(0,n.XP)(o),l=(0,n.XP)({header:1,headerRow:1,headerColumn:1,headerFacet:1})},44355:(e,t,i)=>{"use strict";i.r(t),i.d(t,{version:()=>s,compile:()=>a.M,normalize:()=>o.F,accessPathDepth:()=>r.uD,accessPathWithDatum:()=>r.br,contains:()=>r.r3,deepEqual:()=>r.vZ,deleteNestedProperty:()=>r.tL,duplicate:()=>r.OM,entries:()=>r.qh,every:()=>r.yW,fieldIntersection:()=>r.Uz,flatAccessWithDatum:()=>r.Io,getFirstDefined:()=>r.du,hasIntersection:()=>r.dP,hash:()=>r.vp,internalField:()=>r.iw,isBoolean:()=>r.jn,isEmpty:()=>r.xb,isEqual:()=>r.Xy,isInternalField:()=>r._Y,isNullOrFalse:()=>r.$k,isNumeric:()=>r.kE,keys:()=>r.XP,logicalExpr:()=>r.vS,mergeDeep:()=>r.Ee,normalizeAngle:()=>r.LW,omit:()=>r.CE,pick:()=>r.ei,prefixGenerator:()=>r.ZW,removePathFromField:()=>r.BX,replaceAll:()=>r.ko,replacePathInField:()=>r.qO,resetIdCounter:()=>r.Zx,setEqual:()=>r.$x,some:()=>r.G,stringify:()=>r.Pz,titleCase:()=>r.Qs,unique:()=>r.Tw,uniqueId:()=>r.EL,vals:()=>r.kd,varName:()=>r.Xr});var n=i(49472),a=i(6376),o=i(18819),r=i(59159);const s=n.i8},81213:(e,t,i)=>{"use strict";i.d(t,{gU:()=>a,LQ:()=>o,J$:()=>r});var n=i(59159);const a=["size","shape","fill","stroke","strokeDash","strokeWidth","opacity"],o={gradientHorizontalMaxLength:200,gradientHorizontalMinLength:100,gradientVerticalMaxLength:200,gradientVerticalMinLength:64,unselectedOpacity:.35},r={aria:1,clipHeight:1,columnPadding:1,columns:1,cornerRadius:1,description:1,direction:1,fillColor:1,format:1,formatType:1,gradientLength:1,gradientOpacity:1,gradientStrokeColor:1,gradientStrokeWidth:1,gradientThickness:1,gridAlign:1,labelAlign:1,labelBaseline:1,labelColor:1,labelFont:1,labelFontSize:1,labelFontStyle:1,labelFontWeight:1,labelLimit:1,labelOffset:1,labelOpacity:1,labelOverlap:1,labelPadding:1,labelSeparation:1,legendX:1,legendY:1,offset:1,orient:1,padding:1,rowPadding:1,strokeColor:1,symbolDash:1,symbolDashOffset:1,symbolFillColor:1,symbolLimit:1,symbolOffset:1,symbolOpacity:1,symbolSize:1,symbolStrokeColor:1,symbolStrokeWidth:1,symbolType:1,tickCount:1,tickMinStep:1,title:1,titleAlign:1,titleAnchor:1,titleBaseline:1,titleColor:1,titleFont:1,titleFontSize:1,titleFontStyle:1,titleFontWeight:1,titleLimit:1,titleLineHeight:1,titleOpacity:1,titleOrient:1,titlePadding:1,type:1,values:1,zindex:1};(0,n.XP)(r)},56997:(e,t,i)=>{"use strict";i.d(t,{yw:()=>a,t8:()=>s,mc:()=>l,ZK:()=>d,fF:()=>f});var n=i(48823),a=i(64869);const o=(0,n.kg)(n.uU);let r=o;function s(e){return r=e,r}function l(){return r=o,r}function d(...e){r.warn(...e)}function f(...e){r.debug(...e)}new WeakMap},64869:(e,t,i)=>{"use strict";i.r(t),i.d(t,{invalidSpec:()=>o,FIT_NON_SINGLE:()=>r,containerSizeNonSingle:()=>s,containerSizeNotCompatibleWithAutosize:()=>l,droppingFit:()=>d,unknownField:()=>f,cannotProjectOnChannelWithoutField:()=>c,cannotProjectAggregate:()=>h,nearestNotSupportForContinuous:()=>p,selectionNotSupported:()=>u,selectionNotFound:()=>g,SCALE_BINDINGS_CONTINUOUS:()=>m,LEGEND_BINDINGS_MUST_HAVE_PROJECTION:()=>b,cannotLookupVariableParameter:()=>y,noSameUnitLookup:()=>v,NEEDS_SAME_SELECTION:()=>_,INTERVAL_INITIALIZED_WITH_X_Y:()=>x,noSuchRepeatedValue:()=>w,columnsNotSupportByRowCol:()=>$,CONCAT_CANNOT_SHARE_AXIS:()=>k,unrecognizedParse:()=>T,differentParse:()=>D,ADD_SAME_CHILD_TWICE:()=>O,invalidTransformIgnored:()=>S,NO_FIELDS_NEEDS_AS:()=>R,customFormatTypeNotAllowed:()=>A,projectionOverridden:()=>E,REPLACE_ANGLE_WITH_THETA:()=>F,primitiveChannelDef:()=>q,invalidFieldType:()=>P,invalidFieldTypeForCountAggregate:()=>I,invalidAggregate:()=>j,missingFieldType:()=>C,droppingColor:()=>z,relativeBandSizeNotSupported:()=>U,emptyFieldDef:()=>N,LINE_WITH_VARYING_SIZE:()=>V,incompatibleChannel:()=>L,invalidEncodingChannel:()=>W,channelShouldBeDiscrete:()=>M,channelShouldBeDiscreteOrDiscretizing:()=>B,facetChannelDropped:()=>H,discreteChannelCannotEncode:()=>G,rangeMarkAlignmentCannotBeExpression:()=>X,lineWithRange:()=>Y,orientOverridden:()=>J,CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN:()=>K,cannotUseScalePropertyWithNonColor:()=>Z,cannotUseRelativeBandSizeWithNonBandScale:()=>Q,unaggregateDomainHasNoEffectForRawField:()=>ee,unaggregateDomainWithNonSharedDomainOp:()=>te,unaggregatedDomainWithLogScale:()=>ie,cannotApplySizeToNonOrientedMark:()=>ne,scaleTypeNotWorkWithChannel:()=>ae,scaleTypeNotWorkWithFieldDef:()=>oe,scalePropertyNotWorkWithScaleType:()=>re,scaleTypeNotWorkWithMark:()=>se,stepDropped:()=>le,mergeConflictingProperty:()=>de,mergeConflictingDomainProperty:()=>fe,independentScaleMeansIndependentGuide:()=>ce,domainSortDropped:()=>he,MORE_THAN_ONE_SORT:()=>pe,FACETED_INDEPENDENT_DIFFERENT_SOURCES:()=>ue,FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES:()=>ge,FACETED_INDEPENDENT_SAME_SOURCE:()=>me,INVALID_CHANNEL_FOR_AXIS:()=>be,cannotStackRangedMark:()=>ye,cannotStackNonLinearScale:()=>ve,stackNonSummativeAggregate:()=>_e,invalidTimeUnit:()=>xe,droppedDay:()=>we,errorBarCenterAndExtentAreNotNeeded:()=>$e,errorBarCenterIsUsedWithWrongExtent:()=>ke,errorBarContinuousAxisHasCustomizedAggregate:()=>Te,errorBand1DNotSupport:()=>De,channelRequiredForBinned:()=>Oe,channelShouldNotBeUsedForBinned:()=>Se,domainRequiredForThresholdScale:()=>Re});var n=i(19387),a=i(59159);function o(e){return`Invalid specification ${(0,a.Pz)(e)}. Make sure the specification includes at least one of the following properties: "mark", "layer", "facet", "hconcat", "vconcat", "concat", or "repeat".`}const r='Autosize "fit" only works for single views and layered views.';function s(e){return("width"==e?"Width":"Height")+' "container" only works for single views and layered views.'}function l(e){return`${"width"==e?"Width":"Height"} "container" only works well with autosize "fit" or "fit-${"width"==e?"x":"y"}".`}function d(e){return e?`Dropping "fit-${e}" because spec has discrete ${(0,n.kq)(e)}.`:'Dropping "fit" because spec has discrete size.'}function f(e){return`Unknown field for ${e}. Cannot calculate view size.`}function c(e){return`Cannot project a selection on encoding channel "${e}", which has no field.`}function h(e,t){return`Cannot project a selection on encoding channel "${e}" as it uses an aggregate function ("${t}").`}function p(e){return`The "nearest" transform is not supported for ${e} marks.`}function u(e){return`Selection not supported for ${e} yet.`}function g(e){return`Cannot find a selection named "${e}".`}const m="Scale bindings are currently only supported for scales with unbinned, continuous domains.",b="Legend bindings are only supported for selections over an individual field or encoding channel.";function y(e){return`Lookups can only be performed on selection parameters. "${e}" is a variable parameter.`}function v(e){return`Cannot define and lookup the "${e}" selection in the same view. Try moving the lookup into a second, layered view?`}const _="The same selection must be used to override scale domains in a layered view.",x='Interval selections should be initialized using "x" and/or "y" keys.';function w(e){return`Unknown repeated value "${e}".`}function $(e){return`The "columns" property cannot be used when "${e}" has nested row/column.`}const k="Axes cannot be shared in concatenated or repeated views yet (https://github.com/vega/vega-lite/issues/2415).";function T(e){return`Unrecognized parse "${e}".`}function D(e,t,i){return`An ancestor parsed field "${e}" as ${i} but a child wants to parse the field as ${t}.`}const O="Attempt to add the same child twice.";function S(e){return`Ignoring an invalid transform: ${(0,a.Pz)(e)}.`}const R='If "from.fields" is not specified, "as" has to be a string that specifies the key to be used for the data from the secondary source.';function A(e){return`Config.customFormatTypes is not true, thus custom format type and format for channel ${e} are dropped.`}function E(e){const{parentProjection:t,projection:i}=e;return`Layer's shared projection ${(0,a.Pz)(t)} is overridden by a child projection ${(0,a.Pz)(i)}.`}const F="Arc marks uses theta channel rather than angle, replacing angle with theta.";function q(e,t,i){return`Channel ${e} is a ${t}. Converted to {value: ${(0,a.Pz)(i)}}.`}function P(e){return`Invalid field type "${e}".`}function I(e,t){return`Invalid field type "${e}" for aggregate: "${t}", using "quantitative" instead.`}function j(e){return`Invalid aggregation operator "${e}".`}function C(e,t){return`Missing type for channel "${e}", using "${t}" instead.`}function z(e,t){const{fill:i,stroke:n}=t;return`Dropping color ${e} as the plot also has ${i&&n?"fill and stroke":i?"fill":"stroke"}.`}function U(e){return`Position range does not support relative band size for ${e}.`}function N(e,t){return`Dropping ${(0,a.Pz)(e)} from channel "${t}" since it does not contain any data field, datum, value, or signal.`}const V="Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.";function L(e,t,i){return`${e} dropped as it is incompatible with "${t}"${i?` when ${i}`:""}.`}function W(e){return`${e}-encoding is dropped as ${e} is not a valid encoding channel.`}function M(e){return`${e} encoding should be discrete (ordinal / nominal / binned).`}function B(e){return`${e} encoding should be discrete (ordinal / nominal / binned) or use a discretizing scale (e.g. threshold).`}function H(e){return`Facet encoding dropped as ${e.join(" and ")} ${e.length>1?"are":"is"} also specified.`}function G(e,t){return`Using discrete channel "${e}" to encode "${t}" field can be misleading as it does not encode ${"ordinal"===t?"order":"magnitude"}.`}function X(e){return`The ${e} for range marks cannot be an expression`}function Y(e,t){return`Line mark is for continuous lines and thus cannot be used with ${e&&t?"x2 and y2":e?"x2":"y2"}. We will use the rule mark (line segments) instead.`}function J(e,t){return`Specified orient "${e}" overridden with "${t}".`}const K="Custom domain scale cannot be unioned with default field-based domain.";function Z(e){return`Cannot use the scale property "${e}" with non-color channel.`}function Q(e){return`Cannot use the relative band size with ${e} scale.`}function ee(e){return`Using unaggregated domain with raw field has no effect (${(0,a.Pz)(e)}).`}function te(e){return`Unaggregated domain not applicable for "${e}" since it produces values outside the origin domain of the source data.`}function ie(e){return`Unaggregated domain is currently unsupported for log scale (${(0,a.Pz)(e)}).`}function ne(e){return`Cannot apply size to non-oriented mark "${e}".`}function ae(e,t,i){return`Channel "${e}" does not work with "${t}" scale. We are using "${i}" scale instead.`}function oe(e,t){return`FieldDef does not work with "${e}" scale. We are using "${t}" scale instead.`}function re(e,t,i){return`${i}-scale's "${t}" is dropped as it does not work with ${e} scale.`}function se(e,t){return`Scale type "${t}" does not work with mark "${e}".`}function le(e){return`The step for "${e}" is dropped because the ${"width"===e?"x":"y"} is continuous.`}function de(e,t,i,n){return`Conflicting ${t.toString()} property "${e.toString()}" (${(0,a.Pz)(i)} and ${(0,a.Pz)(n)}). Using ${(0,a.Pz)(i)}.`}function fe(e,t,i,n){return`Conflicting ${t.toString()} property "${e.toString()}" (${(0,a.Pz)(i)} and ${(0,a.Pz)(n)}). Using the union of the two domains.`}function ce(e){return`Setting the scale to be independent for "${e}" means we also have to set the guide (axis or legend) to be independent.`}function he(e){return`Dropping sort property ${(0,a.Pz)(e)} as unioned domains only support boolean or op "count", "min", and "max".`}const pe="Domains that should be unioned has conflicting sort properties. Sort will be set to true.",ue="Detected faceted independent scales that union domain of multiple fields from different data sources. We will use the first field. The result view size may be incorrect.",ge="Detected faceted independent scales that union domain of the same fields from different source. We will assume that this is the same field from a different fork of the same data source. However, if this is not the case, the result view size may be incorrect.",me="Detected faceted independent scales that union domain of multiple fields from the same data source. We will use the first field. The result view size may be incorrect.",be="Invalid channel for axis.";function ye(e){return`Cannot stack "${e}" if there is already "${e}2".`}function ve(e){return`Cannot stack non-linear scale (${e}).`}function _e(e){return`Stacking is applied even though the aggregate function is non-summative ("${e}").`}function xe(e,t){return`Invalid ${e}: ${(0,a.Pz)(t)}.`}function we(e){return`Dropping day from datetime ${(0,a.Pz)(e)} as day cannot be combined with other units.`}function $e(e,t){return`${t?"extent ":""}${t&&e?"and ":""}${e?"center ":""}${t&&e?"are ":"is "}not needed when data are aggregated.`}function ke(e,t,i){return`${e} is not usually used with ${t} for ${i}.`}function Te(e,t){return`Continuous axis should not have customized aggregation function ${e}; ${t} already agregates the axis.`}function De(e){return`1D error band does not support ${e}.`}function Oe(e){return`Channel ${e} is required for "binned" bin.`}function Se(e){return`Channel ${e} should not be used with "binned" bin.`}function Re(e){return`Domain for ${e} is required for threshold scale.`}},71644:(e,t,i)=>{"use strict";function n(e){return!!e.or}function a(e){return!!e.and}function o(e){return!!e.not}function r(e,t){if(o(e))r(e.not,t);else if(a(e))for(const i of e.and)r(i,t);else if(n(e))for(const i of e.or)r(i,t);else t(e)}function s(e,t){return o(e)?{not:s(e.not,t)}:a(e)?{and:e.and.map((e=>s(e,t)))}:n(e)?{or:e.or.map((e=>s(e,t)))}:t(e)}i.d(t,{HU:()=>n,YK:()=>a,Tv:()=>o,XM:()=>r,qJ:()=>s})},78666:(e,t,i)=>{"use strict";i.d(t,{kt:()=>r,q1:()=>s,u3:()=>l,k4:()=>d,fq:()=>f,e_:()=>c,CH:()=>h,gv:()=>p,lD:()=>u,Bw:()=>g,P2:()=>m,Md:()=>b,Zp:()=>y,uK:()=>v,hx:()=>_,io:()=>x,z1:()=>w,QD:()=>$,ph:()=>k,FG:()=>T,rb:()=>D,$j:()=>O,A6:()=>S,d:()=>R,P1:()=>A,et:()=>E,g5:()=>F,NO:()=>q,TP:()=>P});var n=i(48823),a=i(59159);const o={arc:"arc",area:"area",bar:"bar",image:"image",line:"line",point:"point",rect:"rect",rule:"rule",text:"text",tick:"tick",trail:"trail",circle:"circle",square:"square",geoshape:"geoshape"},r=o.arc,s=o.area,l=o.bar,d=o.image,f=o.line,c=o.point,h=o.rect,p=o.rule,u=o.text,g=o.tick,m=o.trail,b=o.circle,y=o.square,v=o.geoshape;function _(e){return["line","area","trail"].includes(e)}function x(e){return["rect","bar","image","arc"].includes(e)}const w=(0,a.XP)(o);function $(e){return e.type}(0,n.Rg)(w);const k=["stroke","strokeWidth","strokeDash","strokeDashOffset","strokeOpacity","strokeJoin","strokeMiterLimit","fill","fillOpacity"],T=(0,a.XP)({color:1,filled:1,invalid:1,order:1,radius2:1,theta2:1,timeUnitBandSize:1,timeUnitBandPosition:1}),D={area:["line","point"],bar:["binSpacing","continuousBandSize","discreteBandSize"],rect:["binSpacing","continuousBandSize","discreteBandSize"],line:["point"],tick:["bandSize","thickness"]},O={color:"#4c78a8",invalid:"filter",timeUnitBandSize:1},S=(0,a.XP)({mark:1,arc:1,area:1,bar:1,circle:1,image:1,line:1,point:1,rect:1,rule:1,square:1,text:1,tick:1,trail:1,geoshape:1});function R(e){return e&&null!=e.band}const A={horizontal:["cornerRadiusTopRight","cornerRadiusBottomRight"],vertical:["cornerRadiusTopLeft","cornerRadiusTopRight"]},E={binSpacing:1,continuousBandSize:5,timeUnitBandPosition:.5},F={binSpacing:0,continuousBandSize:5,timeUnitBandPosition:.5},q={thickness:1};function P(e){return $(e)?e.type:e}},85602:(e,t,i)=>{"use strict";i.d(t,{K:()=>_});var n=i(48823),a=i(19387),o=i(7422),r=i(26634),s=i(62069),l=i(56302),d=i(20640),f=i(56997),c=i(41681),h=i(59672),p=i(78012),u=i(18886),g=i(59159),m=i(99185),b=i(23679),y=i(22692),v=i(31162);class _ extends h.c{constructor(){super(...arguments),this.nonFacetUnitNormalizers=[r.zD,l.BE,s.At,new b.q,new v.C]}map(e,t){if((0,u.G)(e)){const i=(0,d.zU)(e.encoding,a.rn),n=(0,d.zU)(e.encoding,a.aC),o=(0,d.zU)(e.encoding,a.Qd);if(i||n||o)return this.mapFacetedUnit(e,t)}return super.map(e,t)}mapUnit(e,t){const{parentEncoding:i,parentProjection:n}=t,a=(0,y.s)(e.encoding,t.repeater),o={...e,...a?{encoding:a}:{}};if(i||n)return this.mapUnitWithParentEncodingOrProjection(o,t);const r=this.mapLayerOrUnit.bind(this);for(const e of this.nonFacetUnitNormalizers)if(e.hasMatchingType(o,t.config))return e.run(o,t,r);return o}mapRepeat(e,t){return(0,p.j)(e)?this.mapLayerRepeat(e,t):this.mapNonLayerRepeat(e,t)}mapLayerRepeat(e,t){const{repeat:i,spec:n,...a}=e,{row:o,column:r,layer:s}=i,{repeater:l={},repeaterPrefix:d=""}=t;return o||r?this.mapRepeat({...e,repeat:{...o?{row:o}:{},...r?{column:r}:{}},spec:{repeat:{layer:s},spec:n}},t):{...a,layer:s.map((e=>{const i={...l,layer:e},a=`${(n.name||"")+d}child__layer_${(0,g.Xr)(e)}`,o=this.mapLayerOrUnit(n,{...t,repeater:i,repeaterPrefix:a});return o.name=a,o}))}}mapNonLayerRepeat(e,t){const{repeat:i,spec:a,data:o,...r}=e;!(0,n.kJ)(i)&&e.columns&&(e=(0,g.CE)(e,["columns"]),f.ZK(f.yw.columnsNotSupportByRowCol("repeat")));const s=[],{repeater:l={},repeaterPrefix:d=""}=t,c=!(0,n.kJ)(i)&&i.row||[l?l.row:null],h=!(0,n.kJ)(i)&&i.column||[l?l.column:null],p=(0,n.kJ)(i)&&i||[l?l.repeat:null];for(const e of p)for(const o of c)for(const r of h){const f={repeat:e,row:o,column:r,layer:l.layer},c=(a.name||"")+d+"child__"+((0,n.kJ)(i)?`${(0,g.Xr)(e)}`:(i.row?`row_${(0,g.Xr)(o)}`:"")+(i.column?`column_${(0,g.Xr)(r)}`:"")),h=this.map(a,{...t,repeater:f,repeaterPrefix:c});h.name=c,s.push((0,g.CE)(h,["data"]))}const u=(0,n.kJ)(i)?e.columns:i.column?i.column.length:1;return{data:a.data??o,align:"all",...r,columns:u,concat:s}}mapFacet(e,t){const{facet:i}=e;return(0,c.NA)(i)&&e.columns&&(e=(0,g.CE)(e,["columns"]),f.ZK(f.yw.columnsNotSupportByRowCol("facet"))),super.mapFacet(e,t)}mapUnitWithParentEncodingOrProjection(e,t){const{encoding:i,projection:n}=e,{parentEncoding:a,parentProjection:o,config:r}=t,s=w({parentProjection:o,projection:n}),l=x({parentEncoding:a,encoding:(0,y.s)(i,t.repeater)});return this.mapUnit({...e,...s?{projection:s}:{},...l?{encoding:l}:{}},{config:r})}mapFacetedUnit(e,t){const{row:i,column:n,facet:a,...o}=e.encoding,{mark:r,width:s,projection:l,height:d,view:f,params:c,encoding:h,...p}=e,{facetMapping:u,layout:g}=this.getFacetMappingAndLayout({row:i,column:n,facet:a},t),m=(0,y.s)(o,t.repeater);return this.mapFacet({...p,...g,facet:u,spec:{...s?{width:s}:{},...d?{height:d}:{},...f?{view:f}:{},...l?{projection:l}:{},mark:r,encoding:m,...c?{params:c}:{}}},t)}getFacetMappingAndLayout(e,t){const{row:i,column:n,facet:o}=e;if(i||n){o&&f.ZK(f.yw.facetChannelDropped([...i?[a.rn]:[],...n?[a.aC]:[]]));const t={},r={};for(const i of[a.rn,a.aC]){const n=e[i];if(n){const{align:e,center:a,spacing:o,columns:s,...l}=n;t[i]=l;for(const e of["align","center","spacing"])void 0!==n[e]&&(r[e]??(r[e]={}),r[e][i]=n[e])}}return{facetMapping:t,layout:r}}{const{align:e,center:i,spacing:n,columns:a,...r}=o;return{facetMapping:(0,y.c)(r,t.repeater),layout:{...e?{align:e}:{},...i?{center:i}:{},...n?{spacing:n}:{},...a?{columns:a}:{}}}}}mapLayer(e,{parentEncoding:t,parentProjection:i,...n}){const{encoding:a,projection:o,...r}=e,s={...n,parentEncoding:x({parentEncoding:t,encoding:a,layer:!0}),parentProjection:w({parentProjection:i,projection:o})};return super.mapLayer(r,s)}}function x({parentEncoding:e,encoding:t={},layer:i}){let a={};if(e){const r=new Set([...(0,g.XP)(e),...(0,g.XP)(t)]);for(const s of r){const r=t[s],l=e[s];if((0,o.v3)(r)){const e={...l,...r};a[s]=e}else(0,o.wb)(r)?a[s]={...r,condition:{...l,...r.condition}}:r||null===r?a[s]=r:(i||(0,o.kJ)(l)||(0,m.Lo)(l)||(0,o.v3)(l)||(0,n.kJ)(l))&&(a[s]=l)}}else a=t;return!a||(0,g.xb)(a)?void 0:a}function w(e){const{parentProjection:t,projection:i}=e;return t&&i&&f.ZK(f.yw.projectionOverridden({parentProjection:t,projection:i})),i??t}},18819:(e,t,i)=>{"use strict";i.d(t,{F:()=>c});var n=i(48823),a=i(52262),o=i(56997),r=i(13586),s=i(59159),l=i(85602),d=i(88430),f=i(3322);function c(e,t){void 0===t&&(t=(0,a.py)(e.config));const i=function(e,t={}){const i={config:t};return u.map(h.map(p.map(e,i),i),i)}(e,t),{width:n,height:l}=e,d=function(e,t,i){let{width:n,height:a}=t;const l=(0,r.Gw)(e)||(0,r.a3)(e),d={};l?"container"==n&&"container"==a?(d.type="fit",d.contains="padding"):"container"==n?(d.type="fit-x",d.contains="padding"):"container"==a&&(d.type="fit-y",d.contains="padding"):("container"==n&&(o.ZK(o.yw.containerSizeNonSingle("width")),n=void 0),"container"==a&&(o.ZK(o.yw.containerSizeNonSingle("height")),a=void 0));const f={type:"pad",...d,...i?g(i.autosize):{},...g(e.autosize)};if("fit"!==f.type||l||(o.ZK(o.yw.FIT_NON_SINGLE),f.type="pad"),"container"==n&&"fit"!=f.type&&"fit-x"!=f.type&&o.ZK(o.yw.containerSizeNotCompatibleWithAutosize("width")),"container"==a&&"fit"!=f.type&&"fit-y"!=f.type&&o.ZK(o.yw.containerSizeNotCompatibleWithAutosize("height")),!(0,s.vZ)(f,{type:"pad"}))return f}(i,{width:n,height:l,autosize:e.autosize},t);return{...i,...d?{autosize:d}:{}}}const h=new l.K,p=new d.u,u=new f.H;function g(e){return(0,n.HD)(e)?{type:e}:e??{}}},23679:(e,t,i)=>{"use strict";i.d(t,{q:()=>p});var n=i(48823),a=i(20640),o=i(78666),r=i(18886),s=i(36495),l=i(59159);function d(e){const{point:t,line:i,...n}=e;return(0,l.XP)(n).length>1?n:n.type}function f(e){for(const t of["line","area","rule","trail"])e[t]&&(e={...e,[t]:(0,l.CE)(e[t],["point","line"])});return e}function c(e,t={},i){return"transparent"===e.point?{opacity:0}:e.point?(0,n.Kn)(e.point)?e.point:{}:void 0!==e.point?null:t.point||i.shape?(0,n.Kn)(t.point)?t.point:{}:void 0}function h(e,t={}){return e.line?!0===e.line?{}:e.line:void 0!==e.line?null:t.line?!0===t.line?{}:t.line:void 0}class p{constructor(){this.name="path-overlay"}hasMatchingType(e,t){if((0,r.G)(e)){const{mark:i,encoding:n}=e,a=(0,o.QD)(i)?i:{type:i};switch(a.type){case"line":case"rule":case"trail":return!!c(a,t[a.type],n);case"area":return!!c(a,t[a.type],n)||!!h(a,t[a.type])}}return!1}run(e,t,i){const{config:n}=t,{params:r,projection:p,mark:u,encoding:g,...m}=e,b=(0,a.rC)(g,n),y=(0,o.QD)(u)?u:{type:u},v=c(y,n[y.type],b),_="area"===y.type&&h(y,n[y.type]),x=[{...r?{params:r}:{},mark:d({..."area"===y.type&&void 0===y.opacity&&void 0===y.fillOpacity?{opacity:.7}:{},...y}),encoding:(0,l.CE)(b,["shape"])}],w=(0,s.kn)(y,b);let $=b;if(w){const{fieldChannel:e,offset:t}=w;$={...b,[e]:{...b[e],...t?{stack:t}:{}}}}return _&&x.push({...p?{projection:p}:{},mark:{type:"line",...(0,l.ei)(y,["clip","interpolate","tension","tooltip"]),..._},encoding:$}),v&&x.push({...p?{projection:p}:{},mark:{type:"point",opacity:1,filled:!0,...(0,l.ei)(y,["clip","tooltip"]),...v},encoding:$}),i({...m,layer:x},{...t,config:f(n)})}}},22692:(e,t,i)=>{"use strict";i.d(t,{c:()=>l,s:()=>d});var n=i(48823),a=i(7422),o=i(56997),r=i(50579),s=i(41681);function l(e,t){return t?(0,s.NA)(e)?u(e,t):c(e,t):e}function d(e,t){return t?u(e,t):e}function f(e,t,i){const n=t[e];return(0,a.Ze)(n)?n.repeat in i?{...t,[e]:i[n.repeat]}:void o.ZK(o.yw.noSuchRepeatedValue(n.repeat)):t}function c(e,t){if(void 0!==(e=f("field",e,t))){if(null===e)return null;if((0,a.hQ)(e)&&(0,r.R_)(e.sort)){const i=f("field",e.sort,t);e={...e,...i?{sort:i}:{}}}return e}}function h(e,t){if((0,a.VQ)(e))return c(e,t);{const i=f("datum",e,t);return i===e||i.type||(i.type="nominal"),i}}function p(e,t){if(!(0,a.v3)(e)){if((0,a.wb)(e)){const i=h(e.condition,t);if(i)return{...e,condition:i};{const{condition:t,...i}=e;return i}}return e}{const i=h(e,t);if(i)return i;if((0,a.dB)(e))return{condition:e.condition}}}function u(e,t){const i={};for(const a in e)if((0,n.nr)(e,a)){const o=e[a];if((0,n.kJ)(o))i[a]=o.map((e=>p(e,t))).filter((e=>e));else{const e=p(o,t);void 0!==e&&(i[a]=e)}}return i}},31162:(e,t,i)=>{"use strict";i.d(t,{C:()=>f});var n=i(48823),a=i(35647),o=i(19387),r=i(7422),s=i(56997),l=i(78666),d=i(18886);class f{constructor(){this.name="RuleForRangedLine"}hasMatchingType(e){if((0,d.G)(e)){const{encoding:t,mark:i}=e;if("line"===i||(0,l.QD)(i)&&"line"===i.type)for(const e of o.K7){const i=t[(0,o.VY)(e)];if(t[e]&&((0,r.VQ)(i)&&!(0,a.YK)(i.bin)||(0,r.Iu)(i)))return!0}}return!1}run(e,t,i){const{encoding:a,mark:o}=e;return s.ZK(s.yw.lineWithRange(!!a.x2,!!a.y2)),console.log(o),i({...e,mark:(0,n.Kn)(o)?{...o,type:"rule"}:"rule"},t)}}},88430:(e,t,i)=>{"use strict";i.d(t,{u:()=>f});var n=i(22454),a=i(35647),o=i(7422),r=i(71644),s=i(59672),l=i(13261),d=i(59159);class f extends s.c{map(e,t){return t.emptySelections??(t.emptySelections={}),t.selectionPredicates??(t.selectionPredicates={}),e=c(e,t),super.map(e,t)}mapLayerOrUnit(e,t){if((e=c(e,t)).encoding){const i={};for(const[n,a]of(0,d.qh)(e.encoding))i[n]=h(a,t);e={...e,encoding:i}}return super.mapLayerOrUnit(e,t)}mapUnit(e,t){const{selection:i,...n}=e;return i?{...n,params:(0,d.qh)(i).map((([e,i])=>{const{init:n,bind:a,empty:o,...r}=i;"single"===r.type?(r.type="point",r.toggle=!1):"multi"===r.type&&(r.type="point"),t.emptySelections[e]="none"!==o;for(const i of(0,d.kd)(t.selectionPredicates[e]??{}))i.empty="none"!==o;return{name:e,value:n,select:r,bind:a}}))}:e}}function c(e,t){const{transform:i,...n}=e;return i?{...n,transform:i.map((e=>{if((0,l.nK)(e))return{filter:u(e,t)};if((0,l.K8)(e)&&(0,a.dt)(e.bin))return{...e,bin:p(e.bin)};if((0,l.Uh)(e)){const{selection:t,...i}=e.from;return t?{...e,from:{param:t,...i}}:e}return e}))}:e}function h(e,t){const i=(0,d.OM)(e);if((0,o.VQ)(i)&&(0,a.dt)(i.bin)&&(i.bin=p(i.bin)),(0,o.oH)(i)&&i.scale?.domain?.selection){const{selection:e,...t}=i.scale.domain;i.scale.domain={...t,...e?{param:e}:{}}}if((0,o.dB)(i))if((0,n.isArray)(i.condition))i.condition=i.condition.map((e=>{const{selection:i,param:n,test:a,...o}=e;return n?e:{...o,test:u(e,t)}}));else{const{selection:e,param:n,test:a,...o}=h(i.condition,t);i.condition=n?i.condition:{...o,test:u(i.condition,t)}}return i}function p(e){const t=e.extent;if(t?.selection){const{selection:i,...n}=t;return{...e,extent:{...n,param:i}}}return e}function u(e,t){const i=e=>(0,r.qJ)(e,(e=>{var i;const n={param:e,empty:t.emptySelections[e]??!0};return(i=t.selectionPredicates)[e]??(i[e]=[]),t.selectionPredicates[e].push(n),n}));return e.selection?i(e.selection):(0,r.qJ)(e.test||e.filter,(e=>e.selection?i(e.selection):e))}},3322:(e,t,i)=>{"use strict";i.d(t,{H:()=>s});var n=i(22454),a=i(98963),o=i(13586),r=i(59672);class s extends r.c{map(e,t){const i=t.selections??[];if(e.params&&!(0,o.Gw)(e)){const t=[];for(const n of e.params)(0,a.wY)(n)?i.push(n):t.push(n);e.params=t}return t.selections=i,super.map(e,l(e,t))}mapUnit(e,t){const i=t.selections;if(!i||!i.length)return e;const a=(t.path??[]).concat(e.name),o=[];for(const t of i)if(t.views&&t.views.length)for(const i of t.views)((0,n.isString)(i)&&(i===e.name||a.indexOf(i)>=0)||(0,n.isArray)(i)&&i.map((e=>a.indexOf(e))).every(((e,t,i)=>-1!==e&&(0===t||e>i[t-1]))))&&o.push(t);else o.push(t);return o.length&&(e.params=o),e}}for(const e of["mapFacet","mapRepeat","mapHConcat","mapVConcat","mapLayer"]){const t=s.prototype[e];s.prototype[e]=function(e,i){return t.call(this,e,l(e,i))}}function l(e,t){return e.name?{...t,path:(t.path??[]).concat(e.name)}:t}},60169:(e,t,i)=>{"use strict";i.d(t,{h:()=>a});var n=i(98963);function a(e){const t=[];for(const i of e||[]){if((0,n.wY)(i))continue;const{expr:e,bind:a,...o}=i;if(a&&e){const i={...o,bind:a,init:e};t.push(i)}else{const i={...o,...e?{update:e}:{},...a?{bind:a}:{}};t.push(i)}}return t}},21066:(e,t,i)=>{"use strict";i.d(t,{AW:()=>l,rC:()=>d,VM:()=>f,lk:()=>c,x3:()=>h,SR:()=>p,NM:()=>u,Cy:()=>g,Ul:()=>m,Gn:()=>y,B3:()=>v,$N:()=>_});var n=i(48823),a=i(7422),o=i(31021),r=i(59159),s=i(99185);function l(e){return e?.param}function d(e){return e&&!!e.field&&void 0!==e.equal}function f(e){return e&&!!e.field&&void 0!==e.lt}function c(e){return e&&!!e.field&&void 0!==e.lte}function h(e){return e&&!!e.field&&void 0!==e.gt}function p(e){return e&&!!e.field&&void 0!==e.gte}function u(e){if(e&&e.field){if((0,n.kJ)(e.range)&&2===e.range.length)return!0;if((0,s.Lo)(e.range))return!0}return!1}function g(e){return e&&!!e.field&&((0,n.kJ)(e.oneOf)||(0,n.kJ)(e.in))}function m(e){return g(e)||d(e)||u(e)||f(e)||h(e)||c(e)||p(e)}function b(e,t){return(0,a.He)(e,{timeUnit:t,wrapTime:!0})}function y(e,t=!0){const{field:i}=e,n=(0,o.Q8)(e.timeUnit)?.unit,l=n?`time(${(0,o.BD)(n,i)})`:(0,a.jd)(e,{expr:"datum"});if(d(e))return`${l}===${b(e.equal,n)}`;if(f(e))return`${l}<${b(e.lt,n)}`;if(h(e))return`${l}>${b(e.gt,n)}`;if(c(e))return`${l}<=${b(e.lte,n)}`;if(p(e))return`${l}>=${b(e.gte,n)}`;if(g(e))return`indexof([${function(e,t){return e.map((e=>b(e,t)))}(e.oneOf,n).join(",")}], ${l}) !== -1`;if(function(e){return e&&!!e.field&&void 0!==e.valid}(e))return v(l,e.valid);if(u(e)){const{range:i}=e,a=(0,s.Lo)(i)?{signal:`${i.signal}[0]`}:i[0],o=(0,s.Lo)(i)?{signal:`${i.signal}[1]`}:i[1];if(null!==a&&null!==o&&t)return"inrange("+l+", ["+b(a,n)+", "+b(o,n)+"])";const r=[];return null!==a&&r.push(`${l} >= ${b(a,n)}`),null!==o&&r.push(`${l} <= ${b(o,n)}`),r.length>0?r.join(" && "):"true"}throw new Error(`Invalid field predicate: ${(0,r.Pz)(e)}`)}function v(e,t=!0){return t?`isValid(${e}) && isFinite(+${e})`:`!isValid(${e}) || !isFinite(+${e})`}function _(e){return m(e)&&e.timeUnit?{...e,timeUnit:(0,o.Q8)(e.timeUnit)?.unit}:e}},42587:(e,t,i)=>{"use strict";i.d(t,{u:()=>n});const n=["type","clipAngle","clipExtent","center","rotate","precision","reflectX","reflectY","coefficient","distance","fraction","lobes","parallel","radius","ratio","spacing","tilt"]},49272:(e,t,i)=>{"use strict";i.d(t,{N3:()=>l,Hy:()=>d,am:()=>f,VI:()=>h,P6:()=>m,eO:()=>x,W8:()=>w,Ri:()=>$,Qe:()=>k,Vl:()=>T,NZ:()=>D,ku:()=>O,EI:()=>S,t8:()=>C,u1:()=>z,e7:()=>U,su:()=>N,Gl:()=>V});var n=i(48823),a=i(19387),o=i(56997),r=i(46689),s=i(59159);const l={LINEAR:"linear",LOG:"log",POW:"pow",SQRT:"sqrt",SYMLOG:"symlog",IDENTITY:"identity",SEQUENTIAL:"sequential",TIME:"time",UTC:"utc",QUANTILE:"quantile",QUANTIZE:"quantize",THRESHOLD:"threshold",BIN_ORDINAL:"bin-ordinal",ORDINAL:"ordinal",POINT:"point",BAND:"band"},d={linear:"numeric",log:"numeric",pow:"numeric",sqrt:"numeric",symlog:"numeric",identity:"numeric",sequential:"numeric",time:"time",utc:"time",ordinal:"ordinal","bin-ordinal":"bin-ordinal",point:"ordinal-position",band:"ordinal-position",quantile:"discretizing",quantize:"discretizing",threshold:"discretizing"};function f(e,t){const i=d[e],n=d[t];return i===n||"ordinal-position"===i&&"time"===n||"ordinal-position"===n&&"time"===i}(0,s.XP)(d);const c={linear:0,log:1,pow:1,sqrt:1,symlog:1,identity:1,sequential:1,time:0,utc:0,point:10,band:11,ordinal:0,"bin-ordinal":0,quantile:0,quantize:0,threshold:0};function h(e){return c[e]}const p=["linear","log","pow","sqrt","symlog","time","utc"],u=(0,n.Rg)(p),g=(0,n.Rg)(["linear","log","pow","sqrt","symlog"]);function m(e){return e in g}const b=(0,n.Rg)(["quantile","quantize","threshold"]),y=p.concat(["quantile","quantize","threshold","sequential","identity"]),v=(0,n.Rg)(y),_=(0,n.Rg)(["ordinal","bin-ordinal","point","band"]);function x(e){return e in _}function w(e){return e in v}function $(e){return e in u}function k(e){return e in b}const T={pointPadding:.5,barBandPaddingInner:.1,rectBandPaddingInner:0,minBandSize:2,minFontSize:8,maxFontSize:40,minOpacity:.3,maxOpacity:.8,minSize:9,minStrokeWidth:1,maxStrokeWidth:4,quantileCount:4,quantizeCount:4};function D(e){return!(0,n.HD)(e)&&!!e.name}function O(e){return e?.param}function S(e){return e&&e.unionWith}const R={type:1,domain:1,domainMax:1,domainMin:1,domainMid:1,align:1,range:1,rangeMax:1,rangeMin:1,scheme:1,bins:1,reverse:1,round:1,clamp:1,nice:1,base:1,exponent:1,constant:1,interpolate:1,zero:1,padding:1,paddingInner:1,paddingOuter:1},{type:A,domain:E,range:F,rangeMax:q,rangeMin:P,scheme:I,...j}=((0,s.XP)(R),R),C=(0,s.XP)(j);function z(e,t){switch(t){case"type":case"domain":case"reverse":case"range":return!0;case"scheme":case"interpolate":return!["point","band","identity"].includes(e);case"bins":return!["point","band","identity","ordinal"].includes(e);case"round":return $(e)||"band"===e||"point"===e;case"padding":case"rangeMin":case"rangeMax":return $(e)||["point","band"].includes(e);case"paddingOuter":case"align":return["point","band"].includes(e);case"paddingInner":return"band"===e;case"domainMax":case"domainMid":case"domainMin":case"clamp":return $(e);case"nice":return $(e)||"quantize"===e||"threshold"===e;case"exponent":return"pow"===e;case"base":return"log"===e;case"constant":return"symlog"===e;case"zero":return w(e)&&!(0,s.r3)(["log","time","utc","threshold","quantile"],e)}}function U(e,t){switch(t){case"interpolate":case"scheme":case"domainMid":return(0,a.tE)(e)?void 0:o.yw.cannotUseScalePropertyWithNonColor(e);case"align":case"type":case"bins":case"domain":case"domainMax":case"domainMin":case"range":case"base":case"exponent":case"constant":case"nice":case"padding":case"paddingInner":case"paddingOuter":case"rangeMax":case"rangeMin":case"reverse":case"round":case"clamp":case"zero":return}}function N(e,t){return(0,s.r3)([r.z1,r.NI],t)?void 0===e||x(e):t===r.Dw?(0,s.r3)([l.TIME,l.UTC,void 0],e):t!==r.ql||(0,s.r3)([l.LOG,l.POW,l.SQRT,l.SYMLOG,l.QUANTILE,l.QUANTIZE,l.THRESHOLD,l.LINEAR,void 0],e)}function V(e,t){if(!a.rP(e))return!1;switch(e){case a.X:case a.Y:case a.uD:case a.OU:return $(t)||(0,s.r3)(["band","point"],t);case a.NO:case a.KF:case a.JO:case a.I:case a.ky:case a.Ix:return $(t)||k(t)||(0,s.r3)(["band","point","ordinal"],t);case a.r$:case a.ur:case a.le:return"band"!==t;case a.wg:case a.X3:return"ordinal"===t||k(t)}}},98963:(e,t,i)=>{"use strict";i.d(t,{vV:()=>a,u_:()=>o,d4:()=>r,mB:()=>s,wY:()=>l});var n=i(48823);const a="_vgsid_",o={point:{on:"click",fields:[a],toggle:"event.shiftKey",resolve:"global",clear:"dblclick"},interval:{on:"[mousedown, window:mouseup] > window:mousemove!",encodings:["x","y"],translate:"[mousedown, window:mouseup] > window:mousemove!",zoom:"wheel!",mark:{fill:"#333",fillOpacity:.125,stroke:"white"},resolve:"global",clear:"dblclick"}};function r(e){return!(!e||"legend"!==e&&!e.legend)}function s(e){return r(e)&&(0,n.Kn)(e)}function l(e){return!!e.select}},50579:(e,t,i)=>{"use strict";i.d(t,{Az:()=>a,Xy:()=>r,tI:()=>s,R_:()=>l,es:()=>d});var n=i(48823);const a="min",o={x:1,y:1,color:1,fill:1,stroke:1,strokeWidth:1,size:1,shape:1,fillOpacity:1,strokeOpacity:1,opacity:1,text:1};function r(e){return e in o}function s(e){return!!e&&!!e.encoding}function l(e){return!(!e||"count"!==e.op&&!e.field)}function d(e){return!!e&&(0,n.kJ)(e)}},73651:(e,t,i)=>{"use strict";i.d(t,{Zz:()=>s,EQ:()=>l,Lu:()=>d,o1:()=>c});var n=i(48823),a=i(59159),o=i(31341),r=i(41681);function s(e){return(0,n.Kn)(e)&&void 0!==e.step}function l(e){return e.view||e.width||e.height}const d=20,f=(0,a.XP)({align:1,bounds:1,center:1,columns:1,spacing:1});function c(e,t,i){const a=i[t],s={},{spacing:l,columns:d}=a;void 0!==l&&(s.spacing=l),void 0!==d&&((0,r.wf)(e)&&!(0,r.NA)(e.facet)||(0,o.D4)(e))&&(s.columns=d),(0,o.z_)(e)&&(s.columns=1);for(const t of f)if(void 0!==e[t])if("spacing"===t){const i=e[t];s[t]=(0,n.hj)(i)?i:{row:i.row??l,column:i.column??l}}else s[t]=e[t];return s}},31341:(e,t,i)=>{"use strict";function n(e){return o(e)||r(e)||a(e)}function a(e){return"concat"in e}function o(e){return"vconcat"in e}function r(e){return"hconcat"in e}i.d(t,{o:()=>n,D4:()=>a,z_:()=>o,B:()=>r})},41681:(e,t,i)=>{"use strict";function n(e){return"row"in e||"column"in e}function a(e){return!!e&&"header"in e}function o(e){return"facet"in e}i.d(t,{NA:()=>n,Fw:()=>a,wf:()=>o})},13586:(e,t,i)=>{"use strict";i.d(t,{o:()=>n.o,B:()=>n.B,z_:()=>n.z_,wf:()=>a.wf,a3:()=>o.a,Gw:()=>r.G});var n=i(31341),a=i(41681),o=i(18198),r=(i(78012),i(18886))},18198:(e,t,i)=>{"use strict";function n(e){return"layer"in e}i.d(t,{a:()=>n})},59672:(e,t,i)=>{"use strict";i.d(t,{c:()=>d});var n=i(56997),a=i(31341),o=i(41681),r=i(18198),s=i(78012),l=i(18886);class d{map(e,t){return(0,o.wf)(e)?this.mapFacet(e,t):(0,s.b)(e)?this.mapRepeat(e,t):(0,a.B)(e)?this.mapHConcat(e,t):(0,a.z_)(e)?this.mapVConcat(e,t):(0,a.D4)(e)?this.mapConcat(e,t):this.mapLayerOrUnit(e,t)}mapLayerOrUnit(e,t){if((0,r.a)(e))return this.mapLayer(e,t);if((0,l.G)(e))return this.mapUnit(e,t);throw new Error(n.yw.invalidSpec(e))}mapLayer(e,t){return{...e,layer:e.layer.map((e=>this.mapLayerOrUnit(e,t)))}}mapHConcat(e,t){return{...e,hconcat:e.hconcat.map((e=>this.map(e,t)))}}mapVConcat(e,t){return{...e,vconcat:e.vconcat.map((e=>this.map(e,t)))}}mapConcat(e,t){const{concat:i,...n}=e;return{...n,concat:i.map((e=>this.map(e,t)))}}mapFacet(e,t){return{...e,spec:this.map(e.spec,t)}}mapRepeat(e,t){return{...e,spec:this.map(e.spec,t)}}}},78012:(e,t,i)=>{"use strict";i.d(t,{b:()=>a,j:()=>o});var n=i(48823);function a(e){return"repeat"in e}function o(e){return!(0,n.kJ)(e.repeat)&&e.repeat.layer}},84028:(e,t,i)=>{"use strict";i.d(t,{pw:()=>o,pQ:()=>r,Xf:()=>l});var n=i(19387),a=i(62334);function o(e){return"fit"===e||"fit-x"===e||"fit-y"===e}function r(e){return e?`fit-${(0,n.x1)(e)}`:"fit"}const s=["background","padding"];function l(e,t){const i={};for(const t of s)e&&void 0!==e[t]&&(i[t]=(0,a.cn)(e[t]));return t&&(i.params=e.params),i}},18886:(e,t,i)=>{"use strict";function n(e){return"mark"in e}i.d(t,{G:()=>n})},36495:(e,t,i)=>{"use strict";i.d(t,{kn:()=>m});var n=i(48823),a=i(24430),o=i(19387),r=i(7422),s=i(20640),l=i(56997),d=i(78666),f=i(49272),c=i(59159);const h={zero:1,center:1,normalize:1},p=new Set([d.kt,d.u3,d.q1,d.gv,d.e_,d.Md,d.Zp,d.fq,d.lD,d.Bw]),u=new Set([d.u3,d.q1,d.kt]);function g(e,t){const i="x"===t?"y":"radius",n=e[t],a=e[i];if((0,r.VQ)(n)&&(0,r.VQ)(a))if("quantitative"===(0,r.$v)(n)&&"quantitative"===(0,r.$v)(a)){if(n.stack)return t;if(a.stack)return i;const e=(0,r.VQ)(n)&&!!n.aggregate;if(e!==((0,r.VQ)(a)&&!!a.aggregate))return e?t:i;{const e=n.scale?.type,o=a.scale?.type;if(e&&"linear"!==e)return i;if(o&&"linear"!==o)return t}}else{if("quantitative"===(0,r.$v)(n))return t;if("quantitative"===(0,r.$v)(a))return i}else{if("quantitative"===(0,r.$v)(n))return t;if("quantitative"===(0,r.$v)(a))return i}}function m(e,t,i={}){const m=(0,d.QD)(e)?e.type:e;if(!p.has(m))return null;const b=g(t,"x")||g(t,"theta");if(!b)return null;const y=t[b],v=(0,r.VQ)(y)?(0,r.jd)(y,{}):void 0;let _=function(e){switch(e){case"x":return"y";case"y":return"x";case"theta":return"radius";case"radius":return"theta"}}(b),x=t[_],w=(0,r.VQ)(x)?(0,r.jd)(x,{}):void 0;w===v&&(w=void 0,x=void 0,_=void 0);const $=o.SV.reduce(((e,i)=>{if("tooltip"!==i&&(0,s.zU)(t,i)){const a=t[i];for(const t of(0,n.IX)(a)){const n=(0,r.Vm)(t);if(n.aggregate)continue;const a=(0,r.jd)(n,{});a&&a===w||e.push({channel:i,fieldDef:n})}}return e}),[]);let k;if(void 0!==y.stack?k=(0,n.jn)(y.stack)?y.stack?"zero":null:y.stack:u.has(m)&&(k="zero"),!k||!(k in h))return null;if((0,s.Oh)(t)&&0===$.length)return null;if(y?.scale?.type&&y?.scale?.type!==f.N3.LINEAR){if(i.disallowNonLinearStack)return null;l.ZK(l.yw.cannotStackNonLinearScale(y.scale.type))}return(0,r.v3)(t[(0,o.Hy)(b)])?(void 0!==y.stack&&l.ZK(l.yw.cannotStackRangedMark(b)),null):((0,r.VQ)(y)&&y.aggregate&&!(0,c.r3)(a.y,y.aggregate)&&l.ZK(l.yw.stackNonSummativeAggregate(y.aggregate)),{groupbyChannel:x?_:void 0,groupbyField:w,fieldChannel:b,impute:null!==y.impute&&(0,d.hx)(m),stackBy:$,offset:k})}},31021:(e,t,i)=>{"use strict";i.d(t,{vH:()=>s,L3:()=>l,m9:()=>c,BD:()=>p,nj:()=>u,i9:()=>g,Q8:()=>m,uF:()=>b});var n=i(48823),a=i(62343),o=i(59159);const r={year:1,quarter:1,month:1,week:1,day:1,dayofyear:1,date:1,hours:1,minutes:1,seconds:1,milliseconds:1},s=(0,o.XP)(r);function l(e){return!!r[e]}function d(e){return e.startsWith("utc")}const f={"year-month":"%b %Y ","year-month-date":"%b %d, %Y "};function c(e){return s.filter((t=>h(e,t)))}function h(e,t){const i=e.indexOf(t);return!(i<0||i>0&&"seconds"===t&&"i"===e.charAt(i-1)||e.length>i+3&&"day"===t&&"o"===e.charAt(i+3)||i>0&&"year"===t&&"f"===e.charAt(i-1))}function p(e,t,{end:i}={end:!1}){const n=(0,o.br)(t),r=d(e)?"utc":"";let l;const f={};for(const t of s)h(e,t)&&(f[t]="quarter"===(c=t)?`(${r}quarter(${n})-1)`:`${r}${c}(${n})`,l=t);var c;return i&&(f[l]+="+1"),(0,a.j)(f)}function u(e){if(!e)return;const t=c(e);return`timeUnitSpecifier(${(0,o.Pz)(t)}, ${(0,o.Pz)(f)})`}function g(e,t,i){if(!e)return;const n=u(e);return`${i||d(e)?"utc":"time"}Format(${t}, ${n})`}function m(e){if(!e)return;let t;return(0,n.HD)(e)?t={unit:e}:(0,n.Kn)(e)&&(t={...e,...e.unit?{unit:e.unit}:{}}),d(t.unit)&&(t.utc=!0,t.unit=t.unit.substr(3)),t}function b(e){const{utc:t,...i}=m(e);return i.unit?(t?"utc":"")+(0,o.XP)(i).map((e=>(0,o.Xr)(`${"unit"===e?"":`_${e}_`}${i[e]}`))).join(""):(t?"utc":"")+"timeunit"+(0,o.XP)(i).map((e=>(0,o.Xr)(`_${e}_${i[e]}`))).join("")}},53918:(e,t,i)=>{"use strict";i.d(t,{s:()=>o,G:()=>r});var n=i(48823),a=i(59159);function o(e){const{anchor:t,frame:i,offset:n,orient:o,color:r,subtitleColor:s,subtitleFont:l,subtitleFontSize:d,subtitleFontStyle:f,subtitleFontWeight:c,subtitleLineHeight:h,subtitlePadding:p,...u}=e,g={...u,...r?{fill:r}:{}},m={...t?{anchor:t}:{},...i?{frame:i}:{},...n?{offset:n}:{},...o?{orient:o}:{}},b={...s?{subtitleColor:s}:{},...l?{subtitleFont:l}:{},...d?{subtitleFontSize:d}:{},...f?{subtitleFontStyle:f}:{},...c?{subtitleFontWeight:c}:{},...h?{subtitleLineHeight:h}:{},...p?{subtitlePadding:p}:{}};return{titleMarkConfig:g,subtitleMarkConfig:(0,a.ei)(g,["align","baseline","dx","dy","limit"]),nonMark:m,subtitle:b}}function r(e){return(0,n.HD)(e)||(0,n.kJ)(e)&&(0,n.HD)(e[0])}},13261:(e,t,i)=>{"use strict";i.d(t,{nK:()=>o,MM:()=>r,Uh:()=>s,jV:()=>l,Aq:()=>d,I8:()=>f,fj:()=>c,W1:()=>h,kj:()=>p,TB:()=>u,rf:()=>g,FJ:()=>m,et:()=>b,Qf:()=>y,Es:()=>v,K8:()=>_,wu:()=>x,mb:()=>w,Oh:()=>$,V_:()=>k,vf:()=>T,oh:()=>D});var n=i(71644),a=i(21066);function o(e){return"filter"in e}function r(e){return void 0!==e?.stop}function s(e){return"lookup"in e}function l(e){return"data"in e}function d(e){return"param"in e}function f(e){return"pivot"in e}function c(e){return"density"in e}function h(e){return"quantile"in e}function p(e){return"regression"in e}function u(e){return"loess"in e}function g(e){return"sample"in e}function m(e){return"window"in e}function b(e){return"joinaggregate"in e}function y(e){return"flatten"in e}function v(e){return"calculate"in e}function _(e){return"bin"in e}function x(e){return"impute"in e}function w(e){return"timeUnit"in e}function $(e){return"aggregate"in e}function k(e){return"stack"in e}function T(e){return"fold"in e}function D(e){return e.map((e=>o(e)?{filter:(0,n.qJ)(e.filter,a.$N)}:e))}},46689:(e,t,i)=>{"use strict";i.d(t,{ql:()=>o,z1:()=>r,Dw:()=>s,NI:()=>l,zb:()=>d,Pp:()=>f});var n=i(59159);const a={quantitative:"quantitative",ordinal:"ordinal",temporal:"temporal",nominal:"nominal",geojson:"geojson"},o=a.quantitative,r=a.ordinal,s=a.temporal,l=a.nominal,d=a.geojson;function f(e){if(e)switch(e=e.toLowerCase()){case"q":case o:return"quantitative";case"t":case s:return"temporal";case"o":case r:return"ordinal";case"n":case l:return"nominal";case d:return"geojson"}}(0,n.XP)(a)},59159:(e,t,i)=>{"use strict";i.d(t,{vZ:()=>c,OM:()=>h,ei:()=>p,CE:()=>u,Pz:()=>g,vp:()=>m,$k:()=>b,r3:()=>y,G:()=>v,yW:()=>_,Ee:()=>x,Tw:()=>$,Xy:()=>k,$x:()=>T,dP:()=>D,ZW:()=>O,Uz:()=>S,xb:()=>R,XP:()=>A,kd:()=>E,qh:()=>F,jn:()=>q,Xr:()=>P,vS:()=>I,tL:()=>j,Qs:()=>C,br:()=>z,Io:()=>U,qO:()=>V,ko:()=>L,BX:()=>W,uD:()=>M,du:()=>B,EL:()=>G,Zx:()=>X,iw:()=>Y,_Y:()=>J,LW:()=>K,kE:()=>Z}),i(37932);var n=i(16313),a=i.n(n),o=i(64063),r=i.n(o),s=i(35035),l=i.n(s),d=i(48823),f=i(71644);const c=r(),h=a();function p(e,t){const i={};for(const n of t)(0,d.nr)(e,n)&&(i[n]=e[n]);return i}function u(e,t){const i={...e};for(const e of t)delete i[e];return i}Set.prototype.toJSON=function(){return`Set(${[...this].map((e=>l()(e))).join(",")})`};const g=l();function m(e){if((0,d.hj)(e))return e;const t=(0,d.HD)(e)?e:l()(e);if(t.length<250)return t;let i=0;for(let e=0;e<t.length;e++)i=(i<<5)-i+t.charCodeAt(e),i&=i;return i}function b(e){return!1===e||null===e}function y(e,t){return e.includes(t)}function v(e,t){let i=0;for(const[n,a]of e.entries())if(t(a,n,i++))return!0;return!1}function _(e,t){let i=0;for(const[n,a]of e.entries())if(!t(a,n,i++))return!1;return!0}function x(e,...t){for(const i of t)w(e,i??{});return e}function w(e,t){for(const i of A(t))(0,d.iL)(e,i,t[i],!0)}function $(e,t){const i=[],n={};let a;for(const o of e)a=t(o),a in n||(n[a]=1,i.push(o));return i}function k(e,t){const i=A(e),n=A(t);if(i.length!==n.length)return!1;for(const n of i)if(e[n]!==t[n])return!1;return!0}function T(e,t){if(e.size!==t.size)return!1;for(const i of e)if(!t.has(i))return!1;return!0}function D(e,t){for(const i of e)if(t.has(i))return!0;return!1}function O(e){const t=new Set;for(const i of e){const e=(0,d._k)(i).map(((e,t)=>0===t?e:`[${e}]`)),n=e.map(((t,i)=>e.slice(0,i+1).join("")));for(const e of n)t.add(e)}return t}function S(e,t){return void 0===e||void 0===t||D(O(e),O(t))}function R(e){return 0===A(e).length}const A=Object.keys,E=Object.values,F=Object.entries;function q(e){return!0===e||!1===e}function P(e){const t=e.replace(/\W/g,"_");return(e.match(/^\d+/)?"_":"")+t}function I(e,t){return(0,f.Tv)(e)?`!(${I(e.not,t)})`:(0,f.YK)(e)?`(${e.and.map((e=>I(e,t))).join(") && (")})`:(0,f.HU)(e)?`(${e.or.map((e=>I(e,t))).join(") || (")})`:t(e)}function j(e,t){if(0===t.length)return!0;const i=t.shift();return i in e&&j(e[i],t)&&delete e[i],R(e)}function C(e){return e.charAt(0).toUpperCase()+e.substr(1)}function z(e,t="datum"){const i=(0,d._k)(e),n=[];for(let e=1;e<=i.length;e++){const a=`[${i.slice(0,e).map(d.m8).join("][")}]`;n.push(`${t}${a}`)}return n.join(" && ")}function U(e,t="datum"){return`${t}[${(0,d.m8)((0,d._k)(e).join("."))}]`}function N(e){return e.replace(/(\[|\]|\.|'|")/g,"\\$1")}function V(e){return`${(0,d._k)(e).map(N).join("\\.")}`}function L(e,t,i){return e.replace(new RegExp(t.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&"),"g"),i)}function W(e){return`${(0,d._k)(e).join(".")}`}function M(e){return e?(0,d._k)(e).length:0}function B(...e){for(const t of e)if(void 0!==t)return t}let H=42;function G(e){const t=++H;return e?String(e)+t:t}function X(){H=42}function Y(e){return J(e)?e:`__${e}`}function J(e){return e.startsWith("__")}function K(e){if(void 0!==e)return(e%360+360)%360}function Z(e){return!!(0,d.hj)(e)||!isNaN(e)&&!isNaN(parseFloat(e))}},99185:(e,t,i)=>{"use strict";i.d(t,{Lo:()=>a,GC:()=>o,LS:()=>r,EO:()=>s,XL:()=>l,wW:()=>d,k0:()=>f,a_:()=>c});var n=i(48823);function a(e){return e&&!!e.signal}function o(e){return!!e.step}function r(e){return!(0,n.kJ)(e)&&"fields"in e&&!("data"in e)}function s(e){return!(0,n.kJ)(e)&&"fields"in e&&"data"in e}function l(e){return!(0,n.kJ)(e)&&"field"in e&&"data"in e}const d=(0,i(59159).XP)({aria:1,description:1,ariaRole:1,ariaRoleDescription:1,blend:1,opacity:1,fill:1,fillOpacity:1,stroke:1,strokeCap:1,strokeWidth:1,strokeOpacity:1,strokeDash:1,strokeDashOffset:1,strokeJoin:1,strokeOffset:1,strokeMiterLimit:1,startAngle:1,endAngle:1,padAngle:1,innerRadius:1,outerRadius:1,size:1,shape:1,interpolate:1,tension:1,orient:1,align:1,baseline:1,text:1,dir:1,dx:1,dy:1,ellipsis:1,limit:1,radius:1,theta:1,angle:1,font:1,fontSize:1,fontWeight:1,fontStyle:1,lineBreak:1,lineHeight:1,cursor:1,href:1,tooltip:1,cornerRadius:1,cornerRadiusTopLeft:1,cornerRadiusTopRight:1,cornerRadiusBottomLeft:1,cornerRadiusBottomRight:1,aspect:1,width:1,height:1,url:1,smooth:1}),f={arc:1,area:1,group:1,image:1,line:1,path:1,rect:1,rule:1,shape:1,symbol:1,text:1,trail:1},c=["cornerRadius","cornerRadiusTopLeft","cornerRadiusTopRight","cornerRadiusBottomLeft","cornerRadiusBottomRight"]},38096:e=>{"use strict";e.exports=JSON.parse('{"$ref":"#/definitions/TopLevelSpec","$schema":"http://json-schema.org/draft-07/schema#","definitions":{"Aggregate":{"anyOf":[{"$ref":"#/definitions/NonArgAggregateOp"},{"$ref":"#/definitions/ArgmaxDef"},{"$ref":"#/definitions/ArgminDef"}]},"AggregateOp":{"enum":["argmax","argmin","average","count","distinct","max","mean","median","min","missing","product","q1","q3","ci0","ci1","stderr","stdev","stdevp","sum","valid","values","variance","variancep"],"type":"string"},"AggregateTransform":{"additionalProperties":false,"properties":{"aggregate":{"description":"Array of objects that define fields to aggregate.","items":{"$ref":"#/definitions/AggregatedFieldDef"},"type":"array"},"groupby":{"description":"The data fields to group by. If not specified, a single group containing all data objects will be used.","items":{"$ref":"#/definitions/FieldName"},"type":"array"}},"required":["aggregate"],"type":"object"},"AggregatedFieldDef":{"additionalProperties":false,"properties":{"as":{"$ref":"#/definitions/FieldName","description":"The output field names to use for each aggregated field."},"field":{"$ref":"#/definitions/FieldName","description":"The data field for which to compute aggregate function. This is required for all aggregation operations except `\\"count\\"`."},"op":{"$ref":"#/definitions/AggregateOp","description":"The aggregation operation to apply to the fields (e.g., `\\"sum\\"`, `\\"average\\"`, or `\\"count\\"`). See the [full list of supported aggregation operations](https://vega.github.io/vega-lite/docs/aggregate.html#ops) for more information."}},"required":["op","as"],"type":"object"},"Align":{"enum":["left","center","right"],"type":"string"},"AllSortString":{"anyOf":[{"$ref":"#/definitions/SortOrder"},{"$ref":"#/definitions/SortByChannel"},{"$ref":"#/definitions/SortByChannelDesc"}]},"AnyMark":{"anyOf":[{"$ref":"#/definitions/CompositeMark"},{"$ref":"#/definitions/CompositeMarkDef"},{"$ref":"#/definitions/Mark"},{"$ref":"#/definitions/MarkDef"}]},"AnyMarkConfig":{"anyOf":[{"$ref":"#/definitions/MarkConfig"},{"$ref":"#/definitions/AreaConfig"},{"$ref":"#/definitions/BarConfig"},{"$ref":"#/definitions/RectConfig"},{"$ref":"#/definitions/LineConfig"},{"$ref":"#/definitions/TickConfig"}]},"AreaConfig":{"additionalProperties":false,"properties":{"align":{"anyOf":[{"$ref":"#/definitions/Align"},{"$ref":"#/definitions/ExprRef"}],"description":"The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `\\"left\\"`, `\\"right\\"`, `\\"center\\"`.\\n\\n__Note:__ Expression reference is *not* supported for range marks."},"angle":{"anyOf":[{"description":"The rotation angle of the text, in degrees.","maximum":360,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"aria":{"anyOf":[{"description":"A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \\"aria-hidden\\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"ariaRole":{"anyOf":[{"description":"Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \\"role\\" attribute. Warning: this property is experimental and may be changed in the future.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"ariaRoleDescription":{"anyOf":[{"description":"A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \\"aria-roledescription\\" attribute. Warning: this property is experimental and may be changed in the future.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"aspect":{"anyOf":[{"description":"Whether to keep aspect ratio of image marks.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"baseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline"},{"$ref":"#/definitions/ExprRef"}],"description":"For text marks, the vertical text baseline. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, `\\"line-bottom\\"`, or an expression reference that provides one of the valid values. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.\\n\\nFor range marks, the vertical alignment of the marks. One of `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`.\\n\\n__Note:__ Expression reference is *not* supported for range marks."},"blend":{"anyOf":[{"$ref":"#/definitions/Blend","description":"The color blend mode for drawing an item on its current background. Any valid [CSS mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value can be used.\\n\\n__Default value: `\\"source-over\\"`"},{"$ref":"#/definitions/ExprRef"}]},"color":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"$ref":"#/definitions/ExprRef"}],"description":"Default color.\\n\\n__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> `\\"#4682b4\\"`\\n\\n__Note:__\\n- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\\n- The `fill` and `stroke` properties have higher precedence than `color` and will override `color`."},"cornerRadius":{"anyOf":[{"description":"The radius in pixels of rounded rectangles or arcs\' corners.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusBottomLeft":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' bottom left corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusBottomRight":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' bottom right corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusTopLeft":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' top right corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusTopRight":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' top left corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cursor":{"anyOf":[{"$ref":"#/definitions/Cursor","description":"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},{"$ref":"#/definitions/ExprRef"}]},"description":{"anyOf":[{"description":"A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\\"aria-label\\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"dir":{"anyOf":[{"$ref":"#/definitions/TextDirection","description":"The direction of the text. One of `\\"ltr\\"` (left-to-right) or `\\"rtl\\"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\\n\\n__Default value:__ `\\"ltr\\"`"},{"$ref":"#/definitions/ExprRef"}]},"dx":{"anyOf":[{"description":"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"dy":{"anyOf":[{"description":"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"ellipsis":{"anyOf":[{"description":"The ellipsis string for text truncated in response to the limit parameter.\\n\\n__Default value:__ `\\"…\\"`","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"endAngle":{"anyOf":[{"description":"The end angle in radians for arc marks. A value of `0` indicates up (north), increasing values proceed clockwise.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fill":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.\\n\\n__Default value:__ (None)"},"fillOpacity":{"anyOf":[{"description":"The fill opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"filled":{"description":"Whether the mark\'s color should be used as fill color instead of stroke color.\\n\\n__Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.\\n\\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).","type":"boolean"},"font":{"anyOf":[{"description":"The typeface to set the text in (e.g., `\\"Helvetica Neue\\"`).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"fontSize":{"anyOf":[{"description":"The font size, in pixels.\\n\\n__Default value:__ `11`","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"The font style (e.g., `\\"italic\\"`)."},{"$ref":"#/definitions/ExprRef"}]},"fontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"The font weight. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},{"$ref":"#/definitions/ExprRef"}]},"height":{"anyOf":[{"description":"Height of the marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"href":{"anyOf":[{"$ref":"#/definitions/URI","description":"A URL to load upon mouse click. If defined, the mark acts as a hyperlink."},{"$ref":"#/definitions/ExprRef"}]},"innerRadius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`."},"interpolate":{"anyOf":[{"$ref":"#/definitions/Interpolate","description":"The line interpolation method to use for line and area marks. One of the following:\\n- `\\"linear\\"`: piecewise linear segments, as in a polyline.\\n- `\\"linear-closed\\"`: close the linear segments to form a polygon.\\n- `\\"step\\"`: alternate between horizontal and vertical segments, as in a step function.\\n- `\\"step-before\\"`: alternate between vertical and horizontal segments, as in a step function.\\n- `\\"step-after\\"`: alternate between horizontal and vertical segments, as in a step function.\\n- `\\"basis\\"`: a B-spline, with control point duplication on the ends.\\n- `\\"basis-open\\"`: an open B-spline; may not intersect the start or end.\\n- `\\"basis-closed\\"`: a closed B-spline, as in a loop.\\n- `\\"cardinal\\"`: a Cardinal spline, with control point duplication on the ends.\\n- `\\"cardinal-open\\"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\\n- `\\"cardinal-closed\\"`: a closed Cardinal spline, as in a loop.\\n- `\\"bundle\\"`: equivalent to basis, except the tension parameter is used to straighten the spline.\\n- `\\"monotone\\"`: cubic interpolation that preserves monotonicity in y."},{"$ref":"#/definitions/ExprRef"}]},"invalid":{"description":"Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).\\n- If set to `\\"filter\\"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).\\n- If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.","enum":["filter",null],"type":["string","null"]},"limit":{"anyOf":[{"description":"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\\n\\n__Default value:__ `0` -- indicating no limit","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"line":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/OverlayMarkDef"}],"description":"A flag for overlaying line on top of area marks, or an object defining the properties of the overlayed lines.\\n\\n- If this value is an empty object (`{}`) or `true`, lines with default properties will be used.\\n\\n- If this value is `false`, no lines would be automatically added to area marks.\\n\\n__Default value:__ `false`."},"lineBreak":{"anyOf":[{"description":"A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property is ignored if the text is array-valued.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"lineHeight":{"anyOf":[{"description":"The line height in pixels (the spacing between subsequent lines of text) for multi-line text marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"opacity":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The overall opacity (value between [0,1]).\\n\\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.","maximum":1,"minimum":0},"order":{"description":"For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.","type":["null","boolean"]},"orient":{"$ref":"#/definitions/Orientation","description":"The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.\\n- For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.\\n- For area, this property determines the orient property of the Vega output.\\n- For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored."},"outerRadius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`."},"padAngle":{"anyOf":[{"description":"The angular padding applied to sides of the arc, in radians.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"point":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/OverlayMarkDef"},{"const":"transparent","type":"string"}],"description":"A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.\\n\\n- If this property is `\\"transparent\\"`, transparent points will be used (for enhancing tooltips and selections).\\n\\n- If this property is an empty object (`{}`) or `true`, filled points with default properties will be used.\\n\\n- If this property is `false`, no points would be automatically added to line or area marks.\\n\\n__Default value:__ `false`."},"radius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"For arc mark, the primary (outer) radius in pixels.\\n\\nFor text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties."},"radius2":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The secondary (inner) radius in pixels of arc marks."},"shape":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/SymbolShape"},{"type":"string"}],"description":"Shape of the point marks. Supported values include:\\n- plotting shapes: `\\"circle\\"`, `\\"square\\"`, `\\"cross\\"`, `\\"diamond\\"`, `\\"triangle-up\\"`, `\\"triangle-down\\"`, `\\"triangle-right\\"`, or `\\"triangle-left\\"`.\\n- the line symbol `\\"stroke\\"`\\n- centered directional shapes `\\"arrow\\"`, `\\"wedge\\"`, or `\\"triangle\\"`\\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\\n\\n__Default value:__ `\\"circle\\"`"},{"$ref":"#/definitions/ExprRef"}]},"size":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Default size for marks.\\n- For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.\\n- For `bar`, this represents the band size of the bar, in pixels.\\n- For `text`, this represents the font size, in pixels.\\n\\n__Default value:__\\n- `30` for point, circle, square marks; width/height\'s `step`\\n- `2` for bar marks with discrete dimensions;\\n- `5` for bar marks with continuous dimensions;\\n- `11` for text marks.","minimum":0},"smooth":{"anyOf":[{"description":"A boolean flag (default true) indicating if the image should be smoothed when resized. If false, individual pixels should be scaled directly rather than interpolated with smoothing. For SVG rendering, this option may not work in some browsers due to lack of standardization.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"startAngle":{"anyOf":[{"description":"The start angle in radians for arc marks. A value of `0` indicates up (north), increasing values proceed clockwise.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"stroke":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.\\n\\n__Default value:__ (None)"},"strokeCap":{"anyOf":[{"$ref":"#/definitions/StrokeCap","description":"The stroke cap for line ending style. One of `\\"butt\\"`, `\\"round\\"`, or `\\"square\\"`.\\n\\n__Default value:__ `\\"butt\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeDash":{"anyOf":[{"description":"An array of alternating stroke, space lengths for creating dashed or dotted lines.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"strokeDashOffset":{"anyOf":[{"description":"The offset (in pixels) into which to begin drawing with the stroke dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeJoin":{"anyOf":[{"$ref":"#/definitions/StrokeJoin","description":"The stroke line join method. One of `\\"miter\\"`, `\\"round\\"` or `\\"bevel\\"`.\\n\\n__Default value:__ `\\"miter\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeMiterLimit":{"anyOf":[{"description":"The miter limit at which to bevel a line join.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOffset":{"anyOf":[{"description":"The offset in pixels at which to draw the group stroke and fill. If unspecified, the default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths align with the pixel grid.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOpacity":{"anyOf":[{"description":"The stroke opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeWidth":{"anyOf":[{"description":"The stroke width, in pixels.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"tension":{"anyOf":[{"description":"Depending on the interpolation type, sets the tension parameter (for line and area marks).","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"text":{"anyOf":[{"$ref":"#/definitions/Text","description":"Placeholder text if the `text` channel is not specified"},{"$ref":"#/definitions/ExprRef"}]},"theta":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"- For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)\\n\\n- For text marks, polar coordinate angle in radians.","maximum":360,"minimum":0},"theta2":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise."},"timeUnitBandPosition":{"description":"Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step. If set to `0.5`, the marks will be positioned in the middle of the time unit band step.","type":"number"},"timeUnitBandSize":{"description":"Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step. If set to `0.5`, bandwidth of the marks will be half of the time unit band step.","type":"number"},"tooltip":{"anyOf":[{"type":"number"},{"type":"string"},{"type":"boolean"},{"$ref":"#/definitions/TooltipContent"},{"$ref":"#/definitions/ExprRef"},{"type":"null"}],"description":"The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\\n\\n- If `tooltip` is `true` or `{\\"content\\": \\"encoding\\"}`, then all fields from `encoding` will be used.\\n- If `tooltip` is `{\\"content\\": \\"data\\"}`, then all fields that appear in the highlighted data point will be used.\\n- If set to `null` or `false`, then no tooltip will be used.\\n\\nSee the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.\\n\\n__Default value:__ `null`"},"url":{"anyOf":[{"$ref":"#/definitions/URI","description":"The URL of the image file for image marks."},{"$ref":"#/definitions/ExprRef"}]},"width":{"anyOf":[{"description":"Width of the marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"x":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"X coordinates of the marks, or width of horizontal `\\"bar\\"` and `\\"area\\"` without specified `x2` or `width`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"x2":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"X2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"y":{"anyOf":[{"type":"number"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Y coordinates of the marks, or height of vertical `\\"bar\\"` and `\\"area\\"` without specified `y2` or `height`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."},"y2":{"anyOf":[{"type":"number"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Y2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."}},"type":"object"},"ArgmaxDef":{"additionalProperties":false,"properties":{"argmax":{"$ref":"#/definitions/FieldName"}},"required":["argmax"],"type":"object"},"ArgminDef":{"additionalProperties":false,"properties":{"argmin":{"$ref":"#/definitions/FieldName"}},"required":["argmin"],"type":"object"},"AutoSizeParams":{"additionalProperties":false,"properties":{"contains":{"description":"Determines how size calculation should be performed, one of `\\"content\\"` or `\\"padding\\"`. The default setting (`\\"content\\"`) interprets the width and height settings as the data rectangle (plotting) dimensions, to which padding is then added. In contrast, the `\\"padding\\"` setting includes the padding within the view size calculations, such that the width and height settings indicate the **total** intended size of the view.\\n\\n__Default value__: `\\"content\\"`","enum":["content","padding"],"type":"string"},"resize":{"description":"A boolean flag indicating if autosize layout should be re-calculated on every view update.\\n\\n__Default value__: `false`","type":"boolean"},"type":{"$ref":"#/definitions/AutosizeType","description":"The sizing format type. One of `\\"pad\\"`, `\\"fit\\"`, `\\"fit-x\\"`, `\\"fit-y\\"`,  or `\\"none\\"`. See the [autosize type](https://vega.github.io/vega-lite/docs/size.html#autosize) documentation for descriptions of each.\\n\\n__Default value__: `\\"pad\\"`"}},"type":"object"},"AutosizeType":{"enum":["pad","none","fit","fit-x","fit-y"],"type":"string"},"Axis":{"additionalProperties":false,"properties":{"aria":{"anyOf":[{"description":"A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \\"aria-hidden\\" attribute will be set on the output SVG group, removing the axis from the ARIA accessibility tree.\\n\\n__Default value:__ `true`","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"bandPosition":{"anyOf":[{"description":"An interpolation fraction indicating where, for `band` scales, axis ticks should be positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5` places ticks in the middle of their bands.\\n\\n __Default value:__ `0.5`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"description":{"anyOf":[{"description":"A text description of this axis for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If the `aria` property is true, for SVG output the [\\"aria-label\\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute) will be set to this description. If the description is unspecified it will be automatically generated.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"domain":{"description":"A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.\\n\\n__Default value:__ `true`","type":"boolean"},"domainCap":{"anyOf":[{"$ref":"#/definitions/StrokeCap","description":"The stroke cap for the domain line\'s ending style. One of `\\"butt\\"`, `\\"round\\"` or `\\"square\\"`.\\n\\n__Default value:__ `\\"butt\\"`"},{"$ref":"#/definitions/ExprRef"}]},"domainColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Color of axis domain line.\\n\\n__Default value:__ `\\"gray\\"`."},{"$ref":"#/definitions/ExprRef"}]},"domainDash":{"anyOf":[{"description":"An array of alternating [stroke, space] lengths for dashed domain lines.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"domainDashOffset":{"anyOf":[{"description":"The pixel offset at which to start drawing with the domain dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"domainOpacity":{"anyOf":[{"description":"Opacity of the axis domain line.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"domainWidth":{"anyOf":[{"description":"Stroke width of axis domain line\\n\\n__Default value:__ `1`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"format":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/Dict"}],"description":"When used with the default `\\"number\\"` and `\\"time\\"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.\\n\\n- If the format type is `\\"number\\"` (e.g., for quantitative fields), this is D3\'s [number format pattern](https://github.com/d3/d3-format#locale_format).\\n- If the format type is `\\"time\\"` (e.g., for temporal fields), this is D3\'s [time format pattern](https://github.com/d3/d3-time-format#locale_format).\\n\\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.\\n\\nWhen used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.\\n\\n__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format."},"formatType":{"description":"The format type for labels. One of `\\"number\\"`, `\\"time\\"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).\\n\\n__Default value:__\\n- `\\"time\\"` for temporal fields and ordinal and nominal fields with `timeUnit`.\\n- `\\"number\\"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.","type":"string"},"grid":{"description":"A boolean flag indicating if grid lines should be included as part of the axis\\n\\n__Default value:__ `true` for [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous) that are not binned; otherwise, `false`.","type":"boolean"},"gridCap":{"anyOf":[{"$ref":"#/definitions/StrokeCap","description":"The stroke cap for grid lines\' ending style. One of `\\"butt\\"`, `\\"round\\"` or `\\"square\\"`.\\n\\n__Default value:__ `\\"butt\\"`"},{"$ref":"#/definitions/ExprRef"}]},"gridColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Color of gridlines.\\n\\n__Default value:__ `\\"lightGray\\"`."},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisColor"}]},"gridDash":{"anyOf":[{"description":"An array of alternating [stroke, space] lengths for dashed grid lines.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumberArray"}]},"gridDashOffset":{"anyOf":[{"description":"The pixel offset at which to start drawing with the grid dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"gridOpacity":{"anyOf":[{"description":"The stroke opacity of grid (value between [0,1])\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"gridWidth":{"anyOf":[{"description":"The grid width, in pixels.\\n\\n__Default value:__ `1`","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"labelAlign":{"anyOf":[{"$ref":"#/definitions/Align","description":"Horizontal text alignment of axis tick labels, overriding the default setting for the current axis orientation."},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisLabelAlign"}]},"labelAngle":{"anyOf":[{"description":"The rotation angle of the axis labels.\\n\\n__Default value:__ `-90` for nominal and ordinal fields; `0` otherwise.","maximum":360,"minimum":-360,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelBaseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline","description":"Vertical text baseline of axis tick labels, overriding the default setting for the current axis orientation. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, or `\\"line-bottom\\"`. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone."},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisLabelBaseline"}]},"labelBound":{"anyOf":[{"description":"Indicates if labels should be hidden if they exceed the axis range. If `false` (the default) no bounds overlap analysis is performed. If `true`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.\\n\\n__Default value:__ `false`.","type":["number","boolean"]},{"$ref":"#/definitions/ExprRef"}]},"labelColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"The color of the tick label, can be in hex color code or regular color name."},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisColor"}]},"labelExpr":{"description":"[Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.\\n\\n__Note:__ The label text and value can be assessed via the `label` and `value` properties of the axis\'s backing `datum` object.","type":"string"},"labelFlush":{"description":"Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.\\n\\n__Default value:__ `true` for axis of a continuous x-scale. Otherwise, `false`.","type":["boolean","number"]},"labelFlushOffset":{"anyOf":[{"description":"Indicates the number of pixels by which to offset flush-adjusted labels. For example, a value of `2` will push flush-adjusted labels 2 pixels outward from the center of the axis. Offsets can help the labels better visually group with corresponding axis ticks.\\n\\n__Default value:__ `0`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelFont":{"anyOf":[{"description":"The font of the tick label.","type":"string"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisString"}]},"labelFontSize":{"anyOf":[{"description":"The font size of the label, in pixels.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"labelFontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"Font style of the title."},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisLabelFontStyle"}]},"labelFontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"Font weight of axis tick labels."},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisLabelFontWeight"}]},"labelLimit":{"anyOf":[{"description":"Maximum allowed pixel width of axis tick labels.\\n\\n__Default value:__ `180`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelLineHeight":{"anyOf":[{"description":"Line height in pixels for multi-line label text or label text with `\\"line-top\\"` or `\\"line-bottom\\"` baseline.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelOffset":{"anyOf":[{"description":"Position offset in pixels to apply to labels, in addition to tickOffset.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"labelOpacity":{"anyOf":[{"description":"The opacity of the labels.","type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"labelOverlap":{"anyOf":[{"$ref":"#/definitions/LabelOverlap"},{"$ref":"#/definitions/ExprRef"}],"description":"The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `\\"parity\\"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `\\"greedy\\"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).\\n\\n__Default value:__ `true` for non-nominal fields with non-log scales; `\\"greedy\\"` for log scales; otherwise `false`."},"labelPadding":{"anyOf":[{"description":"The padding in pixels between labels and ticks.\\n\\n__Default value:__ `2`","type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"labelSeparation":{"anyOf":[{"description":"The minimum separation that must be between label bounding boxes for them to be considered non-overlapping (default `0`). This property is ignored if *labelOverlap* resolution is not enabled.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labels":{"description":"A boolean flag indicating if labels should be included as part of the axis.\\n\\n__Default value:__ `true`.","type":"boolean"},"maxExtent":{"anyOf":[{"description":"The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.\\n\\n__Default value:__ `undefined`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"minExtent":{"anyOf":[{"description":"The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.\\n\\n__Default value:__ `30` for y-axis; `undefined` for x-axis.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"offset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The offset, in pixels, by which to displace the axis from the edge of the enclosing group or data rectangle.\\n\\n__Default value:__ derived from the [axis config](https://vega.github.io/vega-lite/docs/config.html#facet-scale-config)\'s `offset` (`0` by default)"},"orient":{"anyOf":[{"$ref":"#/definitions/AxisOrient"},{"$ref":"#/definitions/ExprRef"}],"description":"The orientation of the axis. One of `\\"top\\"`, `\\"bottom\\"`, `\\"left\\"` or `\\"right\\"`. The orientation can be used to further specialize the axis type (e.g., a y-axis oriented towards the right edge of the chart).\\n\\n__Default value:__ `\\"bottom\\"` for x-axes and `\\"left\\"` for y-axes."},"position":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The anchor position of the axis in pixels. For x-axes with top or bottom orientation, this sets the axis group x coordinate. For y-axes with left or right orientation, this sets the axis group y coordinate.\\n\\n__Default value__: `0`"},"style":{"anyOf":[{"type":"string"},{"items":{"type":"string"},"type":"array"}],"description":"A string or array of strings indicating the name of custom styles to apply to the axis. A style is a named collection of axis property defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles.\\n\\n__Default value:__ (none) __Note:__ Any specified style will augment the default style. For example, an x-axis mark with `\\"style\\": \\"foo\\"` will use `config.axisX` and `config.style.foo` (the specified style `\\"foo\\"` has higher precedence)."},"tickBand":{"anyOf":[{"description":"For band scales, indicates if ticks and grid lines should be placed at the `\\"center\\"` of a band (default) or at the band `\\"extent\\"`s to indicate intervals","enum":["center","extent"],"type":"string"},{"$ref":"#/definitions/ExprRef"}]},"tickCap":{"anyOf":[{"$ref":"#/definitions/StrokeCap","description":"The stroke cap for the tick lines\' ending style. One of `\\"butt\\"`, `\\"round\\"` or `\\"square\\"`.\\n\\n__Default value:__ `\\"butt\\"`"},{"$ref":"#/definitions/ExprRef"}]},"tickColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"The color of the axis\'s tick.\\n\\n__Default value:__ `\\"gray\\"`"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisColor"}]},"tickCount":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/TimeInterval"},{"$ref":"#/definitions/TimeIntervalStep"},{"$ref":"#/definitions/ExprRef"}],"description":"A desired number of ticks, for axes visualizing quantitative scales. The resulting number may be different so that values are \\"nice\\" (multiples of 2, 5, 10) and lie within the underlying scale\'s range.\\n\\nFor scales of type `\\"time\\"` or `\\"utc\\"`, the tick count can instead be a time interval specifier. Legal string values are `\\"millisecond\\"`, `\\"second\\"`, `\\"minute\\"`, `\\"hour\\"`, `\\"day\\"`, `\\"week\\"`, `\\"month\\"`, and `\\"year\\"`. Alternatively, an object-valued interval specifier of the form `{\\"interval\\": \\"month\\", \\"step\\": 3}` includes a desired number of interval steps. Here, ticks are generated for each quarter (Jan, Apr, Jul, Oct) boundary.\\n\\n__Default value__: Determine using a formula `ceil(width/40)` for x and `ceil(height/40)` for y.","minimum":0},"tickDash":{"anyOf":[{"description":"An array of alternating [stroke, space] lengths for dashed tick mark lines.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumberArray"}]},"tickDashOffset":{"anyOf":[{"description":"The pixel offset at which to start drawing with the tick mark dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"tickExtra":{"description":"Boolean flag indicating if an extra axis tick should be added for the initial position of the axis. This flag is useful for styling axes for `band` scales such that ticks are placed on band boundaries rather in the middle of a band. Use in conjunction with `\\"bandPosition\\": 1` and an axis `\\"padding\\"` value of `0`.","type":"boolean"},"tickMinStep":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The minimum desired step between axis ticks, in terms of scale domain values. For example, a value of `1` indicates that ticks should not be less than 1 unit apart. If `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to enforce the minimum step value."},"tickOffset":{"anyOf":[{"description":"Position offset in pixels to apply to ticks, labels, and gridlines.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"tickOpacity":{"anyOf":[{"description":"Opacity of the ticks.","type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"tickRound":{"description":"Boolean flag indicating if pixel position values should be rounded to the nearest integer.\\n\\n__Default value:__ `true`","type":"boolean"},"tickSize":{"anyOf":[{"description":"The size in pixels of axis ticks.\\n\\n__Default value:__ `5`","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"tickWidth":{"anyOf":[{"description":"The width, in pixels, of ticks.\\n\\n__Default value:__ `1`","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"ticks":{"description":"Boolean value that determines whether the axis should include ticks.\\n\\n__Default value:__ `true`","type":"boolean"},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"titleAlign":{"anyOf":[{"$ref":"#/definitions/Align","description":"Horizontal text alignment of axis titles."},{"$ref":"#/definitions/ExprRef"}]},"titleAnchor":{"anyOf":[{"$ref":"#/definitions/TitleAnchor","description":"Text anchor position for placing axis titles."},{"$ref":"#/definitions/ExprRef"}]},"titleAngle":{"anyOf":[{"description":"Angle in degrees of axis titles.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleBaseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline","description":"Vertical text baseline for axis titles. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, or `\\"line-bottom\\"`. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone."},{"$ref":"#/definitions/ExprRef"}]},"titleColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Color of the title, can be in hex color code or regular color name."},{"$ref":"#/definitions/ExprRef"}]},"titleFont":{"anyOf":[{"description":"Font of the title. (e.g., `\\"Helvetica Neue\\"`).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"titleFontSize":{"anyOf":[{"description":"Font size of the title.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleFontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"Font style of the title."},{"$ref":"#/definitions/ExprRef"}]},"titleFontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"Font weight of the title. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},{"$ref":"#/definitions/ExprRef"}]},"titleLimit":{"anyOf":[{"description":"Maximum allowed pixel width of axis titles.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleLineHeight":{"anyOf":[{"description":"Line height in pixels for multi-line title text or title text with `\\"line-top\\"` or `\\"line-bottom\\"` baseline.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleOpacity":{"anyOf":[{"description":"Opacity of the axis title.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titlePadding":{"anyOf":[{"description":"The padding, in pixels, between title and axis.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleX":{"anyOf":[{"description":"X-coordinate of the axis title relative to the axis group.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleY":{"anyOf":[{"description":"Y-coordinate of the axis title relative to the axis group.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"translate":{"anyOf":[{"description":"Coordinate space translation offset for axis layout. By default, axes are translated by a 0.5 pixel offset for both the x and y coordinates in order to align stroked lines with the pixel grid. However, for vector graphics output these pixel-specific adjustments may be undesirable, in which case translate can be changed (for example, to zero).\\n\\n__Default value:__ `0.5`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"values":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"items":{"type":"string"},"type":"array"},{"items":{"type":"boolean"},"type":"array"},{"items":{"$ref":"#/definitions/DateTime"},"type":"array"},{"$ref":"#/definitions/ExprRef"}],"description":"Explicitly set the visible axis tick values."},"zindex":{"description":"A non-negative integer indicating the z-index of the axis. If zindex is 0, axes should be drawn behind all chart elements. To put them in front, set `zindex` to `1` or more.\\n\\n__Default value:__ `0` (behind the marks).","minimum":0,"type":"number"}},"type":"object"},"AxisConfig":{"additionalProperties":false,"properties":{"aria":{"anyOf":[{"description":"A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \\"aria-hidden\\" attribute will be set on the output SVG group, removing the axis from the ARIA accessibility tree.\\n\\n__Default value:__ `true`","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"bandPosition":{"anyOf":[{"description":"An interpolation fraction indicating where, for `band` scales, axis ticks should be positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5` places ticks in the middle of their bands.\\n\\n __Default value:__ `0.5`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"description":{"anyOf":[{"description":"A text description of this axis for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If the `aria` property is true, for SVG output the [\\"aria-label\\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute) will be set to this description. If the description is unspecified it will be automatically generated.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"disable":{"description":"Disable axis by default.","type":"boolean"},"domain":{"description":"A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.\\n\\n__Default value:__ `true`","type":"boolean"},"domainCap":{"anyOf":[{"$ref":"#/definitions/StrokeCap","description":"The stroke cap for the domain line\'s ending style. One of `\\"butt\\"`, `\\"round\\"` or `\\"square\\"`.\\n\\n__Default value:__ `\\"butt\\"`"},{"$ref":"#/definitions/ExprRef"}]},"domainColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Color of axis domain line.\\n\\n__Default value:__ `\\"gray\\"`."},{"$ref":"#/definitions/ExprRef"}]},"domainDash":{"anyOf":[{"description":"An array of alternating [stroke, space] lengths for dashed domain lines.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"domainDashOffset":{"anyOf":[{"description":"The pixel offset at which to start drawing with the domain dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"domainOpacity":{"anyOf":[{"description":"Opacity of the axis domain line.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"domainWidth":{"anyOf":[{"description":"Stroke width of axis domain line\\n\\n__Default value:__ `1`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"format":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/Dict"}],"description":"When used with the default `\\"number\\"` and `\\"time\\"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.\\n\\n- If the format type is `\\"number\\"` (e.g., for quantitative fields), this is D3\'s [number format pattern](https://github.com/d3/d3-format#locale_format).\\n- If the format type is `\\"time\\"` (e.g., for temporal fields), this is D3\'s [time format pattern](https://github.com/d3/d3-time-format#locale_format).\\n\\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.\\n\\nWhen used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.\\n\\n__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format."},"formatType":{"description":"The format type for labels. One of `\\"number\\"`, `\\"time\\"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).\\n\\n__Default value:__\\n- `\\"time\\"` for temporal fields and ordinal and nominal fields with `timeUnit`.\\n- `\\"number\\"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.","type":"string"},"grid":{"description":"A boolean flag indicating if grid lines should be included as part of the axis\\n\\n__Default value:__ `true` for [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous) that are not binned; otherwise, `false`.","type":"boolean"},"gridCap":{"anyOf":[{"$ref":"#/definitions/StrokeCap","description":"The stroke cap for grid lines\' ending style. One of `\\"butt\\"`, `\\"round\\"` or `\\"square\\"`.\\n\\n__Default value:__ `\\"butt\\"`"},{"$ref":"#/definitions/ExprRef"}]},"gridColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Color of gridlines.\\n\\n__Default value:__ `\\"lightGray\\"`."},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisColor"}]},"gridDash":{"anyOf":[{"description":"An array of alternating [stroke, space] lengths for dashed grid lines.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumberArray"}]},"gridDashOffset":{"anyOf":[{"description":"The pixel offset at which to start drawing with the grid dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"gridOpacity":{"anyOf":[{"description":"The stroke opacity of grid (value between [0,1])\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"gridWidth":{"anyOf":[{"description":"The grid width, in pixels.\\n\\n__Default value:__ `1`","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"labelAlign":{"anyOf":[{"$ref":"#/definitions/Align","description":"Horizontal text alignment of axis tick labels, overriding the default setting for the current axis orientation."},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisLabelAlign"}]},"labelAngle":{"anyOf":[{"description":"The rotation angle of the axis labels.\\n\\n__Default value:__ `-90` for nominal and ordinal fields; `0` otherwise.","maximum":360,"minimum":-360,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelBaseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline","description":"Vertical text baseline of axis tick labels, overriding the default setting for the current axis orientation. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, or `\\"line-bottom\\"`. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone."},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisLabelBaseline"}]},"labelBound":{"anyOf":[{"description":"Indicates if labels should be hidden if they exceed the axis range. If `false` (the default) no bounds overlap analysis is performed. If `true`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.\\n\\n__Default value:__ `false`.","type":["number","boolean"]},{"$ref":"#/definitions/ExprRef"}]},"labelColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"The color of the tick label, can be in hex color code or regular color name."},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisColor"}]},"labelExpr":{"description":"[Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.\\n\\n__Note:__ The label text and value can be assessed via the `label` and `value` properties of the axis\'s backing `datum` object.","type":"string"},"labelFlush":{"description":"Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.\\n\\n__Default value:__ `true` for axis of a continuous x-scale. Otherwise, `false`.","type":["boolean","number"]},"labelFlushOffset":{"anyOf":[{"description":"Indicates the number of pixels by which to offset flush-adjusted labels. For example, a value of `2` will push flush-adjusted labels 2 pixels outward from the center of the axis. Offsets can help the labels better visually group with corresponding axis ticks.\\n\\n__Default value:__ `0`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelFont":{"anyOf":[{"description":"The font of the tick label.","type":"string"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisString"}]},"labelFontSize":{"anyOf":[{"description":"The font size of the label, in pixels.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"labelFontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"Font style of the title."},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisLabelFontStyle"}]},"labelFontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"Font weight of axis tick labels."},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisLabelFontWeight"}]},"labelLimit":{"anyOf":[{"description":"Maximum allowed pixel width of axis tick labels.\\n\\n__Default value:__ `180`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelLineHeight":{"anyOf":[{"description":"Line height in pixels for multi-line label text or label text with `\\"line-top\\"` or `\\"line-bottom\\"` baseline.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelOffset":{"anyOf":[{"description":"Position offset in pixels to apply to labels, in addition to tickOffset.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"labelOpacity":{"anyOf":[{"description":"The opacity of the labels.","type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"labelOverlap":{"anyOf":[{"$ref":"#/definitions/LabelOverlap"},{"$ref":"#/definitions/ExprRef"}],"description":"The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `\\"parity\\"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `\\"greedy\\"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).\\n\\n__Default value:__ `true` for non-nominal fields with non-log scales; `\\"greedy\\"` for log scales; otherwise `false`."},"labelPadding":{"anyOf":[{"description":"The padding in pixels between labels and ticks.\\n\\n__Default value:__ `2`","type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"labelSeparation":{"anyOf":[{"description":"The minimum separation that must be between label bounding boxes for them to be considered non-overlapping (default `0`). This property is ignored if *labelOverlap* resolution is not enabled.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labels":{"description":"A boolean flag indicating if labels should be included as part of the axis.\\n\\n__Default value:__ `true`.","type":"boolean"},"maxExtent":{"anyOf":[{"description":"The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.\\n\\n__Default value:__ `undefined`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"minExtent":{"anyOf":[{"description":"The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.\\n\\n__Default value:__ `30` for y-axis; `undefined` for x-axis.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"offset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The offset, in pixels, by which to displace the axis from the edge of the enclosing group or data rectangle.\\n\\n__Default value:__ derived from the [axis config](https://vega.github.io/vega-lite/docs/config.html#facet-scale-config)\'s `offset` (`0` by default)"},"orient":{"anyOf":[{"$ref":"#/definitions/AxisOrient"},{"$ref":"#/definitions/ExprRef"}],"description":"The orientation of the axis. One of `\\"top\\"`, `\\"bottom\\"`, `\\"left\\"` or `\\"right\\"`. The orientation can be used to further specialize the axis type (e.g., a y-axis oriented towards the right edge of the chart).\\n\\n__Default value:__ `\\"bottom\\"` for x-axes and `\\"left\\"` for y-axes."},"position":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The anchor position of the axis in pixels. For x-axes with top or bottom orientation, this sets the axis group x coordinate. For y-axes with left or right orientation, this sets the axis group y coordinate.\\n\\n__Default value__: `0`"},"style":{"anyOf":[{"type":"string"},{"items":{"type":"string"},"type":"array"}],"description":"A string or array of strings indicating the name of custom styles to apply to the axis. A style is a named collection of axis property defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles.\\n\\n__Default value:__ (none) __Note:__ Any specified style will augment the default style. For example, an x-axis mark with `\\"style\\": \\"foo\\"` will use `config.axisX` and `config.style.foo` (the specified style `\\"foo\\"` has higher precedence)."},"tickBand":{"anyOf":[{"description":"For band scales, indicates if ticks and grid lines should be placed at the `\\"center\\"` of a band (default) or at the band `\\"extent\\"`s to indicate intervals","enum":["center","extent"],"type":"string"},{"$ref":"#/definitions/ExprRef"}]},"tickCap":{"anyOf":[{"$ref":"#/definitions/StrokeCap","description":"The stroke cap for the tick lines\' ending style. One of `\\"butt\\"`, `\\"round\\"` or `\\"square\\"`.\\n\\n__Default value:__ `\\"butt\\"`"},{"$ref":"#/definitions/ExprRef"}]},"tickColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"The color of the axis\'s tick.\\n\\n__Default value:__ `\\"gray\\"`"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisColor"}]},"tickCount":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/TimeInterval"},{"$ref":"#/definitions/TimeIntervalStep"},{"$ref":"#/definitions/ExprRef"}],"description":"A desired number of ticks, for axes visualizing quantitative scales. The resulting number may be different so that values are \\"nice\\" (multiples of 2, 5, 10) and lie within the underlying scale\'s range.\\n\\nFor scales of type `\\"time\\"` or `\\"utc\\"`, the tick count can instead be a time interval specifier. Legal string values are `\\"millisecond\\"`, `\\"second\\"`, `\\"minute\\"`, `\\"hour\\"`, `\\"day\\"`, `\\"week\\"`, `\\"month\\"`, and `\\"year\\"`. Alternatively, an object-valued interval specifier of the form `{\\"interval\\": \\"month\\", \\"step\\": 3}` includes a desired number of interval steps. Here, ticks are generated for each quarter (Jan, Apr, Jul, Oct) boundary.\\n\\n__Default value__: Determine using a formula `ceil(width/40)` for x and `ceil(height/40)` for y.","minimum":0},"tickDash":{"anyOf":[{"description":"An array of alternating [stroke, space] lengths for dashed tick mark lines.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumberArray"}]},"tickDashOffset":{"anyOf":[{"description":"The pixel offset at which to start drawing with the tick mark dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"tickExtra":{"description":"Boolean flag indicating if an extra axis tick should be added for the initial position of the axis. This flag is useful for styling axes for `band` scales such that ticks are placed on band boundaries rather in the middle of a band. Use in conjunction with `\\"bandPosition\\": 1` and an axis `\\"padding\\"` value of `0`.","type":"boolean"},"tickMinStep":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The minimum desired step between axis ticks, in terms of scale domain values. For example, a value of `1` indicates that ticks should not be less than 1 unit apart. If `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to enforce the minimum step value."},"tickOffset":{"anyOf":[{"description":"Position offset in pixels to apply to ticks, labels, and gridlines.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"tickOpacity":{"anyOf":[{"description":"Opacity of the ticks.","type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"tickRound":{"description":"Boolean flag indicating if pixel position values should be rounded to the nearest integer.\\n\\n__Default value:__ `true`","type":"boolean"},"tickSize":{"anyOf":[{"description":"The size in pixels of axis ticks.\\n\\n__Default value:__ `5`","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"tickWidth":{"anyOf":[{"description":"The width, in pixels, of ticks.\\n\\n__Default value:__ `1`","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ConditionalAxisNumber"}]},"ticks":{"description":"Boolean value that determines whether the axis should include ticks.\\n\\n__Default value:__ `true`","type":"boolean"},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"titleAlign":{"anyOf":[{"$ref":"#/definitions/Align","description":"Horizontal text alignment of axis titles."},{"$ref":"#/definitions/ExprRef"}]},"titleAnchor":{"anyOf":[{"$ref":"#/definitions/TitleAnchor","description":"Text anchor position for placing axis titles."},{"$ref":"#/definitions/ExprRef"}]},"titleAngle":{"anyOf":[{"description":"Angle in degrees of axis titles.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleBaseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline","description":"Vertical text baseline for axis titles. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, or `\\"line-bottom\\"`. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone."},{"$ref":"#/definitions/ExprRef"}]},"titleColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Color of the title, can be in hex color code or regular color name."},{"$ref":"#/definitions/ExprRef"}]},"titleFont":{"anyOf":[{"description":"Font of the title. (e.g., `\\"Helvetica Neue\\"`).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"titleFontSize":{"anyOf":[{"description":"Font size of the title.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleFontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"Font style of the title."},{"$ref":"#/definitions/ExprRef"}]},"titleFontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"Font weight of the title. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},{"$ref":"#/definitions/ExprRef"}]},"titleLimit":{"anyOf":[{"description":"Maximum allowed pixel width of axis titles.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleLineHeight":{"anyOf":[{"description":"Line height in pixels for multi-line title text or title text with `\\"line-top\\"` or `\\"line-bottom\\"` baseline.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleOpacity":{"anyOf":[{"description":"Opacity of the axis title.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titlePadding":{"anyOf":[{"description":"The padding, in pixels, between title and axis.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleX":{"anyOf":[{"description":"X-coordinate of the axis title relative to the axis group.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleY":{"anyOf":[{"description":"Y-coordinate of the axis title relative to the axis group.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"translate":{"anyOf":[{"description":"Coordinate space translation offset for axis layout. By default, axes are translated by a 0.5 pixel offset for both the x and y coordinates in order to align stroked lines with the pixel grid. However, for vector graphics output these pixel-specific adjustments may be undesirable, in which case translate can be changed (for example, to zero).\\n\\n__Default value:__ `0.5`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"values":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"items":{"type":"string"},"type":"array"},{"items":{"type":"boolean"},"type":"array"},{"items":{"$ref":"#/definitions/DateTime"},"type":"array"},{"$ref":"#/definitions/ExprRef"}],"description":"Explicitly set the visible axis tick values."},"zindex":{"description":"A non-negative integer indicating the z-index of the axis. If zindex is 0, axes should be drawn behind all chart elements. To put them in front, set `zindex` to `1` or more.\\n\\n__Default value:__ `0` (behind the marks).","minimum":0,"type":"number"}},"type":"object"},"AxisOrient":{"enum":["top","bottom","left","right"],"type":"string"},"AxisResolveMap":{"additionalProperties":false,"properties":{"x":{"$ref":"#/definitions/ResolveMode"},"y":{"$ref":"#/definitions/ResolveMode"}},"type":"object"},"BarConfig":{"additionalProperties":false,"properties":{"align":{"anyOf":[{"$ref":"#/definitions/Align"},{"$ref":"#/definitions/ExprRef"}],"description":"The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `\\"left\\"`, `\\"right\\"`, `\\"center\\"`.\\n\\n__Note:__ Expression reference is *not* supported for range marks."},"angle":{"anyOf":[{"description":"The rotation angle of the text, in degrees.","maximum":360,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"aria":{"anyOf":[{"description":"A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \\"aria-hidden\\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"ariaRole":{"anyOf":[{"description":"Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \\"role\\" attribute. Warning: this property is experimental and may be changed in the future.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"ariaRoleDescription":{"anyOf":[{"description":"A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \\"aria-roledescription\\" attribute. Warning: this property is experimental and may be changed in the future.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"aspect":{"anyOf":[{"description":"Whether to keep aspect ratio of image marks.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"baseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline"},{"$ref":"#/definitions/ExprRef"}],"description":"For text marks, the vertical text baseline. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, `\\"line-bottom\\"`, or an expression reference that provides one of the valid values. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.\\n\\nFor range marks, the vertical alignment of the marks. One of `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`.\\n\\n__Note:__ Expression reference is *not* supported for range marks."},"binSpacing":{"description":"Offset between bars for binned field. The ideal value for this is either 0 (preferred by statisticians) or 1 (Vega-Lite default, D3 example style).\\n\\n__Default value:__ `1`","minimum":0,"type":"number"},"blend":{"anyOf":[{"$ref":"#/definitions/Blend","description":"The color blend mode for drawing an item on its current background. Any valid [CSS mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value can be used.\\n\\n__Default value: `\\"source-over\\"`"},{"$ref":"#/definitions/ExprRef"}]},"color":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"$ref":"#/definitions/ExprRef"}],"description":"Default color.\\n\\n__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> `\\"#4682b4\\"`\\n\\n__Note:__\\n- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\\n- The `fill` and `stroke` properties have higher precedence than `color` and will override `color`."},"continuousBandSize":{"description":"The default size of the bars on continuous scales.\\n\\n__Default value:__ `5`","minimum":0,"type":"number"},"cornerRadius":{"anyOf":[{"description":"The radius in pixels of rounded rectangles or arcs\' corners.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusBottomLeft":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' bottom left corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusBottomRight":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' bottom right corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusEnd":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"- For vertical bars, top-left and top-right corner radius.\\n\\n- For horizontal bars, top-right and bottom-right corner radius."},"cornerRadiusTopLeft":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' top right corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusTopRight":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' top left corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cursor":{"anyOf":[{"$ref":"#/definitions/Cursor","description":"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},{"$ref":"#/definitions/ExprRef"}]},"description":{"anyOf":[{"description":"A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\\"aria-label\\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"dir":{"anyOf":[{"$ref":"#/definitions/TextDirection","description":"The direction of the text. One of `\\"ltr\\"` (left-to-right) or `\\"rtl\\"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\\n\\n__Default value:__ `\\"ltr\\"`"},{"$ref":"#/definitions/ExprRef"}]},"discreteBandSize":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/RelativeBandSize"}],"description":"The default size of the bars with discrete dimensions. If unspecified, the default size is  `step-2`, which provides 2 pixel offset between bars.","minimum":0},"dx":{"anyOf":[{"description":"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"dy":{"anyOf":[{"description":"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"ellipsis":{"anyOf":[{"description":"The ellipsis string for text truncated in response to the limit parameter.\\n\\n__Default value:__ `\\"…\\"`","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"endAngle":{"anyOf":[{"description":"The end angle in radians for arc marks. A value of `0` indicates up (north), increasing values proceed clockwise.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fill":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.\\n\\n__Default value:__ (None)"},"fillOpacity":{"anyOf":[{"description":"The fill opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"filled":{"description":"Whether the mark\'s color should be used as fill color instead of stroke color.\\n\\n__Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.\\n\\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).","type":"boolean"},"font":{"anyOf":[{"description":"The typeface to set the text in (e.g., `\\"Helvetica Neue\\"`).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"fontSize":{"anyOf":[{"description":"The font size, in pixels.\\n\\n__Default value:__ `11`","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"The font style (e.g., `\\"italic\\"`)."},{"$ref":"#/definitions/ExprRef"}]},"fontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"The font weight. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},{"$ref":"#/definitions/ExprRef"}]},"height":{"anyOf":[{"description":"Height of the marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"href":{"anyOf":[{"$ref":"#/definitions/URI","description":"A URL to load upon mouse click. If defined, the mark acts as a hyperlink."},{"$ref":"#/definitions/ExprRef"}]},"innerRadius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`."},"interpolate":{"anyOf":[{"$ref":"#/definitions/Interpolate","description":"The line interpolation method to use for line and area marks. One of the following:\\n- `\\"linear\\"`: piecewise linear segments, as in a polyline.\\n- `\\"linear-closed\\"`: close the linear segments to form a polygon.\\n- `\\"step\\"`: alternate between horizontal and vertical segments, as in a step function.\\n- `\\"step-before\\"`: alternate between vertical and horizontal segments, as in a step function.\\n- `\\"step-after\\"`: alternate between horizontal and vertical segments, as in a step function.\\n- `\\"basis\\"`: a B-spline, with control point duplication on the ends.\\n- `\\"basis-open\\"`: an open B-spline; may not intersect the start or end.\\n- `\\"basis-closed\\"`: a closed B-spline, as in a loop.\\n- `\\"cardinal\\"`: a Cardinal spline, with control point duplication on the ends.\\n- `\\"cardinal-open\\"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\\n- `\\"cardinal-closed\\"`: a closed Cardinal spline, as in a loop.\\n- `\\"bundle\\"`: equivalent to basis, except the tension parameter is used to straighten the spline.\\n- `\\"monotone\\"`: cubic interpolation that preserves monotonicity in y."},{"$ref":"#/definitions/ExprRef"}]},"invalid":{"description":"Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).\\n- If set to `\\"filter\\"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).\\n- If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.","enum":["filter",null],"type":["string","null"]},"limit":{"anyOf":[{"description":"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\\n\\n__Default value:__ `0` -- indicating no limit","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"lineBreak":{"anyOf":[{"description":"A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property is ignored if the text is array-valued.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"lineHeight":{"anyOf":[{"description":"The line height in pixels (the spacing between subsequent lines of text) for multi-line text marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"opacity":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The overall opacity (value between [0,1]).\\n\\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.","maximum":1,"minimum":0},"order":{"description":"For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.","type":["null","boolean"]},"orient":{"$ref":"#/definitions/Orientation","description":"The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.\\n- For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.\\n- For area, this property determines the orient property of the Vega output.\\n- For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored."},"outerRadius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`."},"padAngle":{"anyOf":[{"description":"The angular padding applied to sides of the arc, in radians.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"radius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"For arc mark, the primary (outer) radius in pixels.\\n\\nFor text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties."},"radius2":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The secondary (inner) radius in pixels of arc marks."},"shape":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/SymbolShape"},{"type":"string"}],"description":"Shape of the point marks. Supported values include:\\n- plotting shapes: `\\"circle\\"`, `\\"square\\"`, `\\"cross\\"`, `\\"diamond\\"`, `\\"triangle-up\\"`, `\\"triangle-down\\"`, `\\"triangle-right\\"`, or `\\"triangle-left\\"`.\\n- the line symbol `\\"stroke\\"`\\n- centered directional shapes `\\"arrow\\"`, `\\"wedge\\"`, or `\\"triangle\\"`\\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\\n\\n__Default value:__ `\\"circle\\"`"},{"$ref":"#/definitions/ExprRef"}]},"size":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Default size for marks.\\n- For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.\\n- For `bar`, this represents the band size of the bar, in pixels.\\n- For `text`, this represents the font size, in pixels.\\n\\n__Default value:__\\n- `30` for point, circle, square marks; width/height\'s `step`\\n- `2` for bar marks with discrete dimensions;\\n- `5` for bar marks with continuous dimensions;\\n- `11` for text marks.","minimum":0},"smooth":{"anyOf":[{"description":"A boolean flag (default true) indicating if the image should be smoothed when resized. If false, individual pixels should be scaled directly rather than interpolated with smoothing. For SVG rendering, this option may not work in some browsers due to lack of standardization.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"startAngle":{"anyOf":[{"description":"The start angle in radians for arc marks. A value of `0` indicates up (north), increasing values proceed clockwise.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"stroke":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.\\n\\n__Default value:__ (None)"},"strokeCap":{"anyOf":[{"$ref":"#/definitions/StrokeCap","description":"The stroke cap for line ending style. One of `\\"butt\\"`, `\\"round\\"`, or `\\"square\\"`.\\n\\n__Default value:__ `\\"butt\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeDash":{"anyOf":[{"description":"An array of alternating stroke, space lengths for creating dashed or dotted lines.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"strokeDashOffset":{"anyOf":[{"description":"The offset (in pixels) into which to begin drawing with the stroke dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeJoin":{"anyOf":[{"$ref":"#/definitions/StrokeJoin","description":"The stroke line join method. One of `\\"miter\\"`, `\\"round\\"` or `\\"bevel\\"`.\\n\\n__Default value:__ `\\"miter\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeMiterLimit":{"anyOf":[{"description":"The miter limit at which to bevel a line join.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOffset":{"anyOf":[{"description":"The offset in pixels at which to draw the group stroke and fill. If unspecified, the default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths align with the pixel grid.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOpacity":{"anyOf":[{"description":"The stroke opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeWidth":{"anyOf":[{"description":"The stroke width, in pixels.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"tension":{"anyOf":[{"description":"Depending on the interpolation type, sets the tension parameter (for line and area marks).","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"text":{"anyOf":[{"$ref":"#/definitions/Text","description":"Placeholder text if the `text` channel is not specified"},{"$ref":"#/definitions/ExprRef"}]},"theta":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"- For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)\\n\\n- For text marks, polar coordinate angle in radians.","maximum":360,"minimum":0},"theta2":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise."},"timeUnitBandPosition":{"description":"Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step. If set to `0.5`, the marks will be positioned in the middle of the time unit band step.","type":"number"},"timeUnitBandSize":{"description":"Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step. If set to `0.5`, bandwidth of the marks will be half of the time unit band step.","type":"number"},"tooltip":{"anyOf":[{"type":"number"},{"type":"string"},{"type":"boolean"},{"$ref":"#/definitions/TooltipContent"},{"$ref":"#/definitions/ExprRef"},{"type":"null"}],"description":"The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\\n\\n- If `tooltip` is `true` or `{\\"content\\": \\"encoding\\"}`, then all fields from `encoding` will be used.\\n- If `tooltip` is `{\\"content\\": \\"data\\"}`, then all fields that appear in the highlighted data point will be used.\\n- If set to `null` or `false`, then no tooltip will be used.\\n\\nSee the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.\\n\\n__Default value:__ `null`"},"url":{"anyOf":[{"$ref":"#/definitions/URI","description":"The URL of the image file for image marks."},{"$ref":"#/definitions/ExprRef"}]},"width":{"anyOf":[{"description":"Width of the marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"x":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"X coordinates of the marks, or width of horizontal `\\"bar\\"` and `\\"area\\"` without specified `x2` or `width`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"x2":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"X2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"y":{"anyOf":[{"type":"number"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Y coordinates of the marks, or height of vertical `\\"bar\\"` and `\\"area\\"` without specified `y2` or `height`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."},"y2":{"anyOf":[{"type":"number"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Y2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."}},"type":"object"},"BaseTitleNoValueRefs":{"additionalProperties":false,"properties":{"align":{"$ref":"#/definitions/Align","description":"Horizontal text alignment for title text. One of `\\"left\\"`, `\\"center\\"`, or `\\"right\\"`."},"anchor":{"anyOf":[{"$ref":"#/definitions/TitleAnchor","description":"The anchor position for placing the title and subtitle text. One of `\\"start\\"`, `\\"middle\\"`, or `\\"end\\"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title."},{"$ref":"#/definitions/ExprRef"}]},"angle":{"anyOf":[{"description":"Angle in degrees of title and subtitle text.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"aria":{"anyOf":[{"description":"A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \\"aria-hidden\\" attribute will be set on the output SVG group, removing the title from the ARIA accessibility tree.\\n\\n__Default value:__ `true`","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"baseline":{"$ref":"#/definitions/TextBaseline","description":"Vertical text baseline for title and subtitle text. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, or `\\"line-bottom\\"`. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone."},"color":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Text color for title text."},{"$ref":"#/definitions/ExprRef"}]},"dx":{"anyOf":[{"description":"Delta offset for title and subtitle text x-coordinate.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"dy":{"anyOf":[{"description":"Delta offset for title and subtitle text y-coordinate.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"font":{"anyOf":[{"description":"Font name for title text.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"fontSize":{"anyOf":[{"description":"Font size in pixels for title text.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"Font style for title text."},{"$ref":"#/definitions/ExprRef"}]},"fontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"Font weight for title text. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},{"$ref":"#/definitions/ExprRef"}]},"frame":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/TitleFrame"},{"type":"string"}],"description":"The reference frame for the anchor position, one of `\\"bounds\\"` (to anchor relative to the full bounding box) or `\\"group\\"` (to anchor relative to the group width or height)."},{"$ref":"#/definitions/ExprRef"}]},"limit":{"anyOf":[{"description":"The maximum allowed length in pixels of title and subtitle text.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"lineHeight":{"anyOf":[{"description":"Line height in pixels for multi-line title text or title text with `\\"line-top\\"` or `\\"line-bottom\\"` baseline.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"offset":{"anyOf":[{"description":"The orthogonal offset in pixels by which to displace the title group from its position along the edge of the chart.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"orient":{"anyOf":[{"$ref":"#/definitions/TitleOrient","description":"Default title orientation (`\\"top\\"`, `\\"bottom\\"`, `\\"left\\"`, or `\\"right\\"`)"},{"$ref":"#/definitions/ExprRef"}]},"subtitleColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Text color for subtitle text."},{"$ref":"#/definitions/ExprRef"}]},"subtitleFont":{"anyOf":[{"description":"Font name for subtitle text.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"subtitleFontSize":{"anyOf":[{"description":"Font size in pixels for subtitle text.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"subtitleFontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"Font style for subtitle text."},{"$ref":"#/definitions/ExprRef"}]},"subtitleFontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"Font weight for subtitle text. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},{"$ref":"#/definitions/ExprRef"}]},"subtitleLineHeight":{"anyOf":[{"description":"Line height in pixels for multi-line subtitle text.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"subtitlePadding":{"anyOf":[{"description":"The padding in pixels between title and subtitle text.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"zindex":{"anyOf":[{"description":"The integer z-index indicating the layering of the title group relative to other axis, mark, and legend groups.\\n\\n__Default value:__ `0`.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]}},"type":"object"},"Baseline":{"enum":["top","middle","bottom"],"type":"string"},"BinExtent":{"anyOf":[{"items":{"type":"number"},"maxItems":2,"minItems":2,"type":"array"},{"$ref":"#/definitions/ParameterExtent"}]},"BinParams":{"additionalProperties":false,"description":"Binning properties or boolean flag for determining whether to bin data or not.","properties":{"anchor":{"description":"A value in the binned domain at which to anchor the bins, shifting the bin boundaries if necessary to ensure that a boundary aligns with the anchor value.\\n\\n__Default value:__ the minimum bin extent value","type":"number"},"base":{"description":"The number base to use for automatic bin determination (default is base 10).\\n\\n__Default value:__ `10`","type":"number"},"binned":{"description":"When set to `true`, Vega-Lite treats the input data as already binned.","type":"boolean"},"divide":{"description":"Scale factors indicating allowable subdivisions. The default value is [5, 2], which indicates that for base 10 numbers (the default base), the method may consider dividing bin sizes by 5 and/or 2. For example, for an initial step size of 10, the method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1 (= 10/(5*2)) might also satisfy the given constraints.\\n\\n__Default value:__ `[5, 2]`","items":{"type":"number"},"maxItems":2,"minItems":1,"type":"array"},"extent":{"$ref":"#/definitions/BinExtent","description":"A two-element (`[min, max]`) array indicating the range of desired bin values."},"maxbins":{"description":"Maximum number of bins.\\n\\n__Default value:__ `6` for `row`, `column` and `shape` channels; `10` for other channels","minimum":2,"type":"number"},"minstep":{"description":"A minimum allowable step size (particularly useful for integer values).","type":"number"},"nice":{"description":"If true, attempts to make the bin boundaries use human-friendly boundaries, such as multiples of ten.\\n\\n__Default value:__ `true`","type":"boolean"},"step":{"description":"An exact step size to use between bins.\\n\\n__Note:__ If provided, options such as maxbins will be ignored.","type":"number"},"steps":{"description":"An array of allowable step sizes to choose from.","items":{"type":"number"},"minItems":1,"type":"array"}},"type":"object"},"BinTransform":{"additionalProperties":false,"properties":{"as":{"anyOf":[{"$ref":"#/definitions/FieldName"},{"items":{"$ref":"#/definitions/FieldName"},"type":"array"}],"description":"The output fields at which to write the start and end bin values. This can be either a string or an array of strings with two elements denoting the name for the fields for bin start and bin end respectively. If a single string (e.g., `\\"val\\"`) is provided, the end field will be `\\"val_end\\"`."},"bin":{"anyOf":[{"const":true,"type":"boolean"},{"$ref":"#/definitions/BinParams"}],"description":"An object indicating bin properties, or simply `true` for using default bin parameters."},"field":{"$ref":"#/definitions/FieldName","description":"The data field to bin."}},"required":["bin","field","as"],"type":"object"},"BindCheckbox":{"additionalProperties":false,"properties":{"debounce":{"description":"If defined, delays event handling until the specified milliseconds have elapsed since the last event was fired.","type":"number"},"element":{"$ref":"#/definitions/Element","description":"An optional CSS selector string indicating the parent element to which the input element should be added. By default, all input elements are added within the parent container of the Vega view."},"input":{"const":"checkbox","type":"string"},"name":{"description":"By default, the signal name is used to label input elements. This `name` property can be used instead to specify a custom label for the bound signal.","type":"string"}},"required":["input"],"type":"object"},"BindDirect":{"additionalProperties":false,"properties":{"debounce":{"description":"If defined, delays event handling until the specified milliseconds have elapsed since the last event was fired.","type":"number"},"element":{"anyOf":[{"$ref":"#/definitions/Element"},{"additionalProperties":false,"type":"object"}],"description":"An input element that exposes a _value_ property and supports the [EventTarget](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) interface, or a CSS selector string to such an element. When the element updates and dispatches an event, the _value_ property will be used as the new, bound signal value. When the signal updates independent of the element, the _value_ property will be set to the signal value and a new event will be dispatched on the element."},"event":{"description":"The event (default `\\"input\\"`) to listen for to track changes on the external element.","type":"string"}},"required":["element"],"type":"object"},"BindInput":{"additionalProperties":false,"properties":{"autocomplete":{"description":"A hint for form autofill. See the [HTML autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for additional information.","type":"string"},"debounce":{"description":"If defined, delays event handling until the specified milliseconds have elapsed since the last event was fired.","type":"number"},"element":{"$ref":"#/definitions/Element","description":"An optional CSS selector string indicating the parent element to which the input element should be added. By default, all input elements are added within the parent container of the Vega view."},"input":{"description":"The type of input element to use. The valid values are `\\"checkbox\\"`, `\\"radio\\"`, `\\"range\\"`, `\\"select\\"`, and any other legal [HTML form input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input).","type":"string"},"name":{"description":"By default, the signal name is used to label input elements. This `name` property can be used instead to specify a custom label for the bound signal.","type":"string"},"placeholder":{"description":"Text that appears in the form control when it has no value set.","type":"string"}},"type":"object"},"BindRadioSelect":{"additionalProperties":false,"properties":{"debounce":{"description":"If defined, delays event handling until the specified milliseconds have elapsed since the last event was fired.","type":"number"},"element":{"$ref":"#/definitions/Element","description":"An optional CSS selector string indicating the parent element to which the input element should be added. By default, all input elements are added within the parent container of the Vega view."},"input":{"enum":["radio","select"],"type":"string"},"labels":{"description":"An array of label strings to represent the `options` values. If unspecified, the `options` value will be coerced to a string and used as the label.","items":{"type":"string"},"type":"array"},"name":{"description":"By default, the signal name is used to label input elements. This `name` property can be used instead to specify a custom label for the bound signal.","type":"string"},"options":{"description":"An array of options to select from.","items":{},"type":"array"}},"required":["input","options"],"type":"object"},"BindRange":{"additionalProperties":false,"properties":{"debounce":{"description":"If defined, delays event handling until the specified milliseconds have elapsed since the last event was fired.","type":"number"},"element":{"$ref":"#/definitions/Element","description":"An optional CSS selector string indicating the parent element to which the input element should be added. By default, all input elements are added within the parent container of the Vega view."},"input":{"const":"range","type":"string"},"max":{"description":"Sets the maximum slider value. Defaults to the larger of the signal value and `100`.","type":"number"},"min":{"description":"Sets the minimum slider value. Defaults to the smaller of the signal value and `0`.","type":"number"},"name":{"description":"By default, the signal name is used to label input elements. This `name` property can be used instead to specify a custom label for the bound signal.","type":"string"},"step":{"description":"Sets the minimum slider increment. If undefined, the step size will be automatically determined based on the `min` and `max` values.","type":"number"}},"required":["input"],"type":"object"},"Binding":{"anyOf":[{"$ref":"#/definitions/BindCheckbox"},{"$ref":"#/definitions/BindRadioSelect"},{"$ref":"#/definitions/BindRange"},{"$ref":"#/definitions/BindInput"},{"$ref":"#/definitions/BindDirect"}]},"Blend":{"enum":[null,"multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","hue","saturation","color","luminosity"],"type":["null","string"]},"BoxPlot":{"const":"boxplot","type":"string"},"BoxPlotConfig":{"additionalProperties":false,"properties":{"box":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]},"extent":{"anyOf":[{"const":"min-max","type":"string"},{"type":"number"}],"description":"The extent of the whiskers. Available options include:\\n- `\\"min-max\\"`: min and max are the lower and upper whiskers respectively.\\n- A number representing multiple of the interquartile range. This number will be multiplied by the IQR to determine whisker boundary, which spans from the smallest data to the largest data within the range _[Q1 - k * IQR, Q3 + k * IQR]_ where _Q1_ and _Q3_ are the first and third quartiles while _IQR_ is the interquartile range (_Q3-Q1_).\\n\\n__Default value:__ `1.5`."},"median":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]},"outliers":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]},"rule":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]},"size":{"description":"Size of the box and median tick of a box plot","type":"number"},"ticks":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]}},"type":"object"},"BoxPlotDef":{"additionalProperties":false,"properties":{"box":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]},"clip":{"description":"Whether a composite mark be clipped to the enclosing group’s width and height.","type":"boolean"},"color":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"$ref":"#/definitions/ExprRef"}],"description":"Default color.\\n\\n__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> `\\"#4682b4\\"`\\n\\n__Note:__\\n- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\\n- The `fill` and `stroke` properties have higher precedence than `color` and will override `color`."},"extent":{"anyOf":[{"const":"min-max","type":"string"},{"type":"number"}],"description":"The extent of the whiskers. Available options include:\\n- `\\"min-max\\"`: min and max are the lower and upper whiskers respectively.\\n- A number representing multiple of the interquartile range. This number will be multiplied by the IQR to determine whisker boundary, which spans from the smallest data to the largest data within the range _[Q1 - k * IQR, Q3 + k * IQR]_ where _Q1_ and _Q3_ are the first and third quartiles while _IQR_ is the interquartile range (_Q3-Q1_).\\n\\n__Default value:__ `1.5`."},"median":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]},"opacity":{"description":"The opacity (value between [0,1]) of the mark.","maximum":1,"minimum":0,"type":"number"},"orient":{"$ref":"#/definitions/Orientation","description":"Orientation of the box plot. This is normally automatically determined based on types of fields on x and y channels. However, an explicit `orient` be specified when the orientation is ambiguous.\\n\\n__Default value:__ `\\"vertical\\"`."},"outliers":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]},"rule":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]},"size":{"description":"Size of the box and median tick of a box plot","type":"number"},"ticks":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]},"type":{"$ref":"#/definitions/BoxPlot","description":"The mark type. This could a primitive mark type (one of `\\"bar\\"`, `\\"circle\\"`, `\\"square\\"`, `\\"tick\\"`, `\\"line\\"`, `\\"area\\"`, `\\"point\\"`, `\\"geoshape\\"`, `\\"rule\\"`, and `\\"text\\"`) or a composite mark type (`\\"boxplot\\"`, `\\"errorband\\"`, `\\"errorbar\\"`)."}},"required":["type"],"type":"object"},"BrushConfig":{"additionalProperties":false,"properties":{"cursor":{"$ref":"#/definitions/Cursor","description":"The mouse cursor used over the interval mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},"fill":{"$ref":"#/definitions/Color","description":"The fill color of the interval mark.\\n\\n__Default value:__ `\\"#333333\\"`"},"fillOpacity":{"description":"The fill opacity of the interval mark (a value between `0` and `1`).\\n\\n__Default value:__ `0.125`","type":"number"},"stroke":{"$ref":"#/definitions/Color","description":"The stroke color of the interval mark.\\n\\n__Default value:__ `\\"#ffffff\\"`"},"strokeDash":{"description":"An array of alternating stroke and space lengths, for creating dashed or dotted lines.","items":{"type":"number"},"type":"array"},"strokeDashOffset":{"description":"The offset (in pixels) with which to begin drawing the stroke dash array.","type":"number"},"strokeOpacity":{"description":"The stroke opacity of the interval mark (a value between `0` and `1`).","type":"number"},"strokeWidth":{"description":"The stroke width of the interval mark.","type":"number"}},"type":"object"},"CalculateTransform":{"additionalProperties":false,"properties":{"as":{"$ref":"#/definitions/FieldName","description":"The field for storing the computed formula value."},"calculate":{"description":"A [expression](https://vega.github.io/vega-lite/docs/types.html#expression) string. Use the variable `datum` to refer to the current data object.","type":"string"}},"required":["calculate","as"],"type":"object"},"Categorical":{"enum":["accent","category10","category20","category20b","category20c","dark2","paired","pastel1","pastel2","set1","set2","set3","tableau10","tableau20"],"type":"string"},"Color":{"anyOf":[{"$ref":"#/definitions/ColorName"},{"$ref":"#/definitions/HexColor"},{"type":"string"}]},"ColorDef":{"$ref":"#/definitions/MarkPropDef<(Gradient|string|null)>"},"ColorName":{"enum":["black","silver","gray","white","maroon","red","purple","fuchsia","green","lime","olive","yellow","navy","blue","teal","aqua","orange","aliceblue","antiquewhite","aquamarine","azure","beige","bisque","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","gainsboro","ghostwhite","gold","goldenrod","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","limegreen","linen","magenta","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","oldlace","olivedrab","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","thistle","tomato","turquoise","violet","wheat","whitesmoke","yellowgreen","rebeccapurple"],"type":"string"},"ColorScheme":{"anyOf":[{"$ref":"#/definitions/Categorical"},{"$ref":"#/definitions/SequentialSingleHue"},{"$ref":"#/definitions/SequentialMultiHue"},{"$ref":"#/definitions/Diverging"},{"$ref":"#/definitions/Cyclical"}]},"Encoding":{"additionalProperties":false,"properties":{"angle":{"$ref":"#/definitions/NumericMarkPropDef","description":"Rotation angle of point and text marks."},"color":{"$ref":"#/definitions/ColorDef","description":"Color of the marks – either fill or stroke color based on  the `filled` property of mark definition. By default, `color` represents fill color for `\\"area\\"`, `\\"bar\\"`, `\\"tick\\"`, `\\"text\\"`, `\\"trail\\"`, `\\"circle\\"`, and `\\"square\\"` / stroke color for `\\"line\\"` and `\\"point\\"`.\\n\\n__Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)\'s `color` property.\\n\\n_Note:_ 1) For fine-grained control over both fill and stroke colors of the marks, please use the `fill` and `stroke` channels. The `fill` or `stroke` encodings have higher precedence than `color`, thus may override the `color` encoding if conflicting encodings are specified. 2) See the scale documentation for more information about customizing [color scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme)."},"description":{"anyOf":[{"$ref":"#/definitions/StringFieldDefWithCondition"},{"$ref":"#/definitions/StringValueDefWithCondition"}],"description":"A text description of this mark for ARIA accessibility (SVG output only). For SVG output the `\\"aria-label\\"` attribute will be set to this description."},"detail":{"anyOf":[{"$ref":"#/definitions/FieldDefWithoutScale"},{"items":{"$ref":"#/definitions/FieldDefWithoutScale"},"type":"array"}],"description":"Additional levels of detail for grouping data in aggregate views and in line, trail, and area marks without mapping data to a specific visual channel."},"fill":{"$ref":"#/definitions/ColorDef","description":"Fill color of the marks. __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)\'s `color` property.\\n\\n_Note:_ The `fill` encoding has higher precedence than `color`, thus may override the `color` encoding if conflicting encodings are specified."},"fillOpacity":{"$ref":"#/definitions/NumericMarkPropDef","description":"Fill opacity of the marks.\\n\\n__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)\'s `fillOpacity` property."},"href":{"anyOf":[{"$ref":"#/definitions/StringFieldDefWithCondition"},{"$ref":"#/definitions/StringValueDefWithCondition"}],"description":"A URL to load upon mouse click."},"key":{"$ref":"#/definitions/FieldDefWithoutScale","description":"A data field to use as a unique key for data binding. When a visualization’s data is updated, the key value will be used to match data elements to existing mark instances. Use a key channel to enable object constancy for transitions over dynamic data."},"latitude":{"$ref":"#/definitions/LatLongDef","description":"Latitude position of geographically projected marks."},"latitude2":{"$ref":"#/definitions/Position2Def","description":"Latitude-2 position for geographically projected ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`."},"longitude":{"$ref":"#/definitions/LatLongDef","description":"Longitude position of geographically projected marks."},"longitude2":{"$ref":"#/definitions/Position2Def","description":"Longitude-2 position for geographically projected ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`."},"opacity":{"$ref":"#/definitions/NumericMarkPropDef","description":"Opacity of the marks.\\n\\n__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)\'s `opacity` property."},"order":{"anyOf":[{"$ref":"#/definitions/OrderFieldDef"},{"items":{"$ref":"#/definitions/OrderFieldDef"},"type":"array"},{"$ref":"#/definitions/OrderValueDef"}],"description":"Order of the marks.\\n- For stacked marks, this `order` channel encodes [stack order](https://vega.github.io/vega-lite/docs/stack.html#order).\\n- For line and trail marks, this `order` channel encodes order of data points in the lines. This can be useful for creating [a connected scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html). Setting `order` to `{\\"value\\": null}` makes the line marks use the original order in the data sources.\\n- Otherwise, this `order` channel encodes layer order of the marks.\\n\\n__Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping."},"radius":{"$ref":"#/definitions/PolarDef","description":"The outer radius in pixels of arc marks."},"radius2":{"$ref":"#/definitions/Position2Def","description":"The inner radius in pixels of arc marks."},"shape":{"$ref":"#/definitions/ShapeDef","description":"Shape of the mark.\\n\\n1. For `point` marks the supported values include:   - plotting shapes: `\\"circle\\"`, `\\"square\\"`, `\\"cross\\"`, `\\"diamond\\"`, `\\"triangle-up\\"`, `\\"triangle-down\\"`, `\\"triangle-right\\"`, or `\\"triangle-left\\"`.   - the line symbol `\\"stroke\\"`   - centered directional shapes `\\"arrow\\"`, `\\"wedge\\"`, or `\\"triangle\\"`   - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\\n\\n2. For `geoshape` marks it should be a field definition of the geojson data\\n\\n__Default value:__ If undefined, the default shape depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#point-config)\'s `shape` property. (`\\"circle\\"` if unset.)"},"size":{"$ref":"#/definitions/NumericMarkPropDef","description":"Size of the mark.\\n- For `\\"point\\"`, `\\"square\\"` and `\\"circle\\"`, – the symbol size, or pixel area of the mark.\\n- For `\\"bar\\"` and `\\"tick\\"` – the bar and tick\'s size.\\n- For `\\"text\\"` – the text\'s font size.\\n- Size is unsupported for `\\"line\\"`, `\\"area\\"`, and `\\"rect\\"`. (Use `\\"trail\\"` instead of line with varying size)"},"stroke":{"$ref":"#/definitions/ColorDef","description":"Stroke color of the marks. __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)\'s `color` property.\\n\\n_Note:_ The `stroke` encoding has higher precedence than `color`, thus may override the `color` encoding if conflicting encodings are specified."},"strokeDash":{"$ref":"#/definitions/NumericArrayMarkPropDef","description":"Stroke dash of the marks.\\n\\n__Default value:__ `[1,0]` (No dash)."},"strokeOpacity":{"$ref":"#/definitions/NumericMarkPropDef","description":"Stroke opacity of the marks.\\n\\n__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)\'s `strokeOpacity` property."},"strokeWidth":{"$ref":"#/definitions/NumericMarkPropDef","description":"Stroke width of the marks.\\n\\n__Default value:__ If undefined, the default stroke width depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)\'s `strokeWidth` property."},"text":{"$ref":"#/definitions/TextDef","description":"Text of the `text` mark."},"theta":{"$ref":"#/definitions/PolarDef","description":"- For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)\\n\\n- For text marks, polar coordinate angle in radians."},"theta2":{"$ref":"#/definitions/Position2Def","description":"The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise."},"tooltip":{"anyOf":[{"$ref":"#/definitions/StringFieldDefWithCondition"},{"$ref":"#/definitions/StringValueDefWithCondition"},{"items":{"$ref":"#/definitions/StringFieldDef"},"type":"array"},{"type":"null"}],"description":"The tooltip text to show upon mouse hover. Specifying `tooltip` encoding overrides [the `tooltip` property in the mark definition](https://vega.github.io/vega-lite/docs/mark.html#mark-def).\\n\\nSee the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip in Vega-Lite."},"url":{"anyOf":[{"$ref":"#/definitions/StringFieldDefWithCondition"},{"$ref":"#/definitions/StringValueDefWithCondition"}],"description":"The URL of an image mark."},"x":{"$ref":"#/definitions/PositionDef","description":"X coordinates of the marks, or width of horizontal `\\"bar\\"` and `\\"area\\"` without specified `x2` or `width`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"x2":{"$ref":"#/definitions/Position2Def","description":"X2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"xError":{"anyOf":[{"$ref":"#/definitions/SecondaryFieldDef"},{"$ref":"#/definitions/ValueDef<number>"}],"description":"Error value of x coordinates for error specified `\\"errorbar\\"` and `\\"errorband\\"`."},"xError2":{"anyOf":[{"$ref":"#/definitions/SecondaryFieldDef"},{"$ref":"#/definitions/ValueDef<number>"}],"description":"Secondary error value of x coordinates for error specified `\\"errorbar\\"` and `\\"errorband\\"`."},"y":{"$ref":"#/definitions/PositionDef","description":"Y coordinates of the marks, or height of vertical `\\"bar\\"` and `\\"area\\"` without specified `y2` or `height`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."},"y2":{"$ref":"#/definitions/Position2Def","description":"Y2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."},"yError":{"anyOf":[{"$ref":"#/definitions/SecondaryFieldDef"},{"$ref":"#/definitions/ValueDef<number>"}],"description":"Error value of y coordinates for error specified `\\"errorbar\\"` and `\\"errorband\\"`."},"yError2":{"anyOf":[{"$ref":"#/definitions/SecondaryFieldDef"},{"$ref":"#/definitions/ValueDef<number>"}],"description":"Secondary error value of y coordinates for error specified `\\"errorbar\\"` and `\\"errorband\\"`."}},"type":"object"},"CompositeMark":{"anyOf":[{"$ref":"#/definitions/BoxPlot"},{"$ref":"#/definitions/ErrorBar"},{"$ref":"#/definitions/ErrorBand"}]},"CompositeMarkDef":{"anyOf":[{"$ref":"#/definitions/BoxPlotDef"},{"$ref":"#/definitions/ErrorBarDef"},{"$ref":"#/definitions/ErrorBandDef"}]},"CompositionConfig":{"additionalProperties":false,"properties":{"columns":{"description":"The number of columns to include in the view composition layout.\\n\\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\\n\\n__Note__:\\n\\n1) This property is only for:\\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\\n\\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).","type":"number"},"spacing":{"description":"The default spacing in pixels between composed sub-views.\\n\\n__Default value__: `20`","type":"number"}},"type":"object"},"ConditionalMarkPropFieldOrDatumDef":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<MarkPropFieldOrDatumDef>"},{"$ref":"#/definitions/ConditionalParameter<MarkPropFieldOrDatumDef>"}]},"ConditionalMarkPropFieldOrDatumDef<TypeForShape>":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<MarkPropFieldOrDatumDef<TypeForShape>>"},{"$ref":"#/definitions/ConditionalParameter<MarkPropFieldOrDatumDef<TypeForShape>>"}]},"ConditionalStringFieldDef":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<StringFieldDef>"},{"$ref":"#/definitions/ConditionalParameter<StringFieldDef>"}]},"ConditionalValueDef<(Gradient|string|null|ExprRef)>":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<ValueDef<(Gradient|string|null|ExprRef)>>"},{"$ref":"#/definitions/ConditionalParameter<ValueDef<(Gradient|string|null|ExprRef)>>"}]},"ConditionalValueDef<(Text|ExprRef)>":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<ValueDef<(Text|ExprRef)>>"},{"$ref":"#/definitions/ConditionalParameter<ValueDef<(Text|ExprRef)>>"}]},"ConditionalValueDef<(number[]|ExprRef)>":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<ValueDef<(number[]|ExprRef)>>"},{"$ref":"#/definitions/ConditionalParameter<ValueDef<(number[]|ExprRef)>>"}]},"ConditionalValueDef<(number|ExprRef)>":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<ValueDef<(number|ExprRef)>>"},{"$ref":"#/definitions/ConditionalParameter<ValueDef<(number|ExprRef)>>"}]},"ConditionalValueDef<(string|ExprRef)>":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<ValueDef<(string|ExprRef)>>"},{"$ref":"#/definitions/ConditionalParameter<ValueDef<(string|ExprRef)>>"}]},"ConditionalValueDef<(string|null|ExprRef)>":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<ValueDef<(string|null|ExprRef)>>"},{"$ref":"#/definitions/ConditionalParameter<ValueDef<(string|null|ExprRef)>>"}]},"ConditionalValueDef<number>":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<ValueDef<number>>"},{"$ref":"#/definitions/ConditionalParameter<ValueDef<number>>"}]},"ConditionalAxisColor":{"$ref":"#/definitions/ConditionalAxisProperty<(Color|null)>"},"ConditionalAxisLabelAlign":{"$ref":"#/definitions/ConditionalAxisProperty<(Align|null)>"},"ConditionalAxisLabelBaseline":{"$ref":"#/definitions/ConditionalAxisProperty<(TextBaseline|null)>"},"ConditionalAxisLabelFontStyle":{"$ref":"#/definitions/ConditionalAxisProperty<(FontStyle|null)>"},"ConditionalAxisLabelFontWeight":{"$ref":"#/definitions/ConditionalAxisProperty<(FontWeight|null)>"},"ConditionalAxisNumber":{"$ref":"#/definitions/ConditionalAxisProperty<(number|null)>"},"ConditionalAxisNumberArray":{"$ref":"#/definitions/ConditionalAxisProperty<(number[]|null)>"},"ConditionalAxisProperty<(Align|null)>":{"anyOf":[{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(Align|null)>|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(Align|null)>|ExprRef)>"},"type":"array"}]},"value":{"anyOf":[{"$ref":"#/definitions/Align"},{"type":"null"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["condition","value"],"type":"object"},{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(Align|null)>|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(Align|null)>|ExprRef)>"},"type":"array"}]},"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"}},"required":["condition","expr"],"type":"object"}]},"ConditionalAxisProperty<(Color|null)>":{"anyOf":[{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(Color|null)>|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(Color|null)>|ExprRef)>"},"type":"array"}]},"value":{"anyOf":[{"$ref":"#/definitions/Color"},{"type":"null"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["condition","value"],"type":"object"},{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(Color|null)>|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(Color|null)>|ExprRef)>"},"type":"array"}]},"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"}},"required":["condition","expr"],"type":"object"}]},"ConditionalAxisProperty<(FontStyle|null)>":{"anyOf":[{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(FontStyle|null)>|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(FontStyle|null)>|ExprRef)>"},"type":"array"}]},"value":{"anyOf":[{"$ref":"#/definitions/FontStyle"},{"type":"null"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["condition","value"],"type":"object"},{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(FontStyle|null)>|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(FontStyle|null)>|ExprRef)>"},"type":"array"}]},"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"}},"required":["condition","expr"],"type":"object"}]},"ConditionalAxisProperty<(FontWeight|null)>":{"anyOf":[{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(FontWeight|null)>|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(FontWeight|null)>|ExprRef)>"},"type":"array"}]},"value":{"anyOf":[{"$ref":"#/definitions/FontWeight"},{"type":"null"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["condition","value"],"type":"object"},{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(FontWeight|null)>|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(FontWeight|null)>|ExprRef)>"},"type":"array"}]},"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"}},"required":["condition","expr"],"type":"object"}]},"ConditionalAxisProperty<(TextBaseline|null)>":{"anyOf":[{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(TextBaseline|null)>|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(TextBaseline|null)>|ExprRef)>"},"type":"array"}]},"value":{"anyOf":[{"$ref":"#/definitions/TextBaseline"},{"type":"null"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["condition","value"],"type":"object"},{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(TextBaseline|null)>|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(TextBaseline|null)>|ExprRef)>"},"type":"array"}]},"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"}},"required":["condition","expr"],"type":"object"}]},"ConditionalAxisProperty<(number[]|null)>":{"anyOf":[{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(number[]|null)>|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(number[]|null)>|ExprRef)>"},"type":"array"}]},"value":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"type":"null"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["condition","value"],"type":"object"},{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(number[]|null)>|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(number[]|null)>|ExprRef)>"},"type":"array"}]},"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"}},"required":["condition","expr"],"type":"object"}]},"ConditionalAxisProperty<(number|null)>":{"anyOf":[{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(number|null)>|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(number|null)>|ExprRef)>"},"type":"array"}]},"value":{"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).","type":["number","null"]}},"required":["condition","value"],"type":"object"},{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(number|null)>|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(number|null)>|ExprRef)>"},"type":"array"}]},"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"}},"required":["condition","expr"],"type":"object"}]},"ConditionalAxisProperty<(string|null)>":{"anyOf":[{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(string|null)>|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(string|null)>|ExprRef)>"},"type":"array"}]},"value":{"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).","type":["string","null"]}},"required":["condition","value"],"type":"object"},{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(string|null)>|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalPredicate<(ValueDef<(string|null)>|ExprRef)>"},"type":"array"}]},"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"}},"required":["condition","expr"],"type":"object"}]},"ConditionalAxisString":{"$ref":"#/definitions/ConditionalAxisProperty<(string|null)>"},"ConditionalParameter<MarkPropFieldOrDatumDef>":{"anyOf":[{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"empty":{"description":"For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.","type":"boolean"},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"param":{"$ref":"#/definitions/ParameterName","description":"Filter using a parameter name."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"required":["param"],"type":"object"},{"additionalProperties":false,"properties":{"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"empty":{"description":"For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.","type":"boolean"},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"param":{"$ref":"#/definitions/ParameterName","description":"Filter using a parameter name."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"required":["param"],"type":"object"}]},"ConditionalParameter<MarkPropFieldOrDatumDef<TypeForShape>>":{"anyOf":[{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"empty":{"description":"For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.","type":"boolean"},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"param":{"$ref":"#/definitions/ParameterName","description":"Filter using a parameter name."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/TypeForShape","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"required":["param"],"type":"object"},{"additionalProperties":false,"properties":{"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"empty":{"description":"For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.","type":"boolean"},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"param":{"$ref":"#/definitions/ParameterName","description":"Filter using a parameter name."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"required":["param"],"type":"object"}]},"ConditionalParameter<StringFieldDef>":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"empty":{"description":"For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.","type":"boolean"},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"format":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/Dict"}],"description":"When used with the default `\\"number\\"` and `\\"time\\"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.\\n\\n- If the format type is `\\"number\\"` (e.g., for quantitative fields), this is D3\'s [number format pattern](https://github.com/d3/d3-format#locale_format).\\n- If the format type is `\\"time\\"` (e.g., for temporal fields), this is D3\'s [time format pattern](https://github.com/d3/d3-time-format#locale_format).\\n\\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.\\n\\nWhen used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.\\n\\n__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format."},"formatType":{"description":"The format type for labels. One of `\\"number\\"`, `\\"time\\"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).\\n\\n__Default value:__\\n- `\\"time\\"` for temporal fields and ordinal and nominal fields with `timeUnit`.\\n- `\\"number\\"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.","type":"string"},"param":{"$ref":"#/definitions/ParameterName","description":"Filter using a parameter name."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"required":["param"],"type":"object"},"ConditionalParameter<ValueDef<(Gradient|string|null|ExprRef)>>":{"additionalProperties":false,"properties":{"empty":{"description":"For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.","type":"boolean"},"param":{"$ref":"#/definitions/ParameterName","description":"Filter using a parameter name."},"value":{"anyOf":[{"$ref":"#/definitions/Gradient"},{"type":"string"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["param","value"],"type":"object"},"ConditionalParameter<ValueDef<(Text|ExprRef)>>":{"additionalProperties":false,"properties":{"empty":{"description":"For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.","type":"boolean"},"param":{"$ref":"#/definitions/ParameterName","description":"Filter using a parameter name."},"value":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["param","value"],"type":"object"},"ConditionalParameter<ValueDef<(number[]|ExprRef)>>":{"additionalProperties":false,"properties":{"empty":{"description":"For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.","type":"boolean"},"param":{"$ref":"#/definitions/ParameterName","description":"Filter using a parameter name."},"value":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["param","value"],"type":"object"},"ConditionalParameter<ValueDef<(number|ExprRef)>>":{"additionalProperties":false,"properties":{"empty":{"description":"For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.","type":"boolean"},"param":{"$ref":"#/definitions/ParameterName","description":"Filter using a parameter name."},"value":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["param","value"],"type":"object"},"ConditionalParameter<ValueDef<(string|ExprRef)>>":{"additionalProperties":false,"properties":{"empty":{"description":"For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.","type":"boolean"},"param":{"$ref":"#/definitions/ParameterName","description":"Filter using a parameter name."},"value":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["param","value"],"type":"object"},"ConditionalParameter<ValueDef<(string|null|ExprRef)>>":{"additionalProperties":false,"properties":{"empty":{"description":"For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.","type":"boolean"},"param":{"$ref":"#/definitions/ParameterName","description":"Filter using a parameter name."},"value":{"anyOf":[{"type":"string"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["param","value"],"type":"object"},"ConditionalParameter<ValueDef<number>>":{"additionalProperties":false,"properties":{"empty":{"description":"For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.","type":"boolean"},"param":{"$ref":"#/definitions/ParameterName","description":"Filter using a parameter name."},"value":{"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).","type":"number"}},"required":["param","value"],"type":"object"},"ConditionalPredicate<(ValueDef<(Align|null)>|ExprRef)>":{"anyOf":[{"additionalProperties":false,"properties":{"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"value":{"anyOf":[{"$ref":"#/definitions/Align"},{"type":"null"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["test","value"],"type":"object"},{"additionalProperties":false,"properties":{"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"},"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"}},"required":["expr","test"],"type":"object"}]},"ConditionalPredicate<(ValueDef<(Color|null)>|ExprRef)>":{"anyOf":[{"additionalProperties":false,"properties":{"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"value":{"anyOf":[{"$ref":"#/definitions/Color"},{"type":"null"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["test","value"],"type":"object"},{"additionalProperties":false,"properties":{"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"},"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"}},"required":["expr","test"],"type":"object"}]},"ConditionalPredicate<(ValueDef<(FontStyle|null)>|ExprRef)>":{"anyOf":[{"additionalProperties":false,"properties":{"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"value":{"anyOf":[{"$ref":"#/definitions/FontStyle"},{"type":"null"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["test","value"],"type":"object"},{"additionalProperties":false,"properties":{"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"},"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"}},"required":["expr","test"],"type":"object"}]},"ConditionalPredicate<(ValueDef<(FontWeight|null)>|ExprRef)>":{"anyOf":[{"additionalProperties":false,"properties":{"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"value":{"anyOf":[{"$ref":"#/definitions/FontWeight"},{"type":"null"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["test","value"],"type":"object"},{"additionalProperties":false,"properties":{"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"},"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"}},"required":["expr","test"],"type":"object"}]},"ConditionalPredicate<(ValueDef<(TextBaseline|null)>|ExprRef)>":{"anyOf":[{"additionalProperties":false,"properties":{"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"value":{"anyOf":[{"$ref":"#/definitions/TextBaseline"},{"type":"null"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["test","value"],"type":"object"},{"additionalProperties":false,"properties":{"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"},"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"}},"required":["expr","test"],"type":"object"}]},"ConditionalPredicate<(ValueDef<(number[]|null)>|ExprRef)>":{"anyOf":[{"additionalProperties":false,"properties":{"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"value":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"type":"null"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["test","value"],"type":"object"},{"additionalProperties":false,"properties":{"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"},"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"}},"required":["expr","test"],"type":"object"}]},"ConditionalPredicate<(ValueDef<(number|null)>|ExprRef)>":{"anyOf":[{"additionalProperties":false,"properties":{"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"value":{"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).","type":["number","null"]}},"required":["test","value"],"type":"object"},{"additionalProperties":false,"properties":{"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"},"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"}},"required":["expr","test"],"type":"object"}]},"ConditionalPredicate<(ValueDef<(string|null)>|ExprRef)>":{"anyOf":[{"additionalProperties":false,"properties":{"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"value":{"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).","type":["string","null"]}},"required":["test","value"],"type":"object"},{"additionalProperties":false,"properties":{"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"},"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"}},"required":["expr","test"],"type":"object"}]},"ConditionalPredicate<MarkPropFieldOrDatumDef>":{"anyOf":[{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"required":["test"],"type":"object"},{"additionalProperties":false,"properties":{"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"required":["test"],"type":"object"}]},"ConditionalPredicate<MarkPropFieldOrDatumDef<TypeForShape>>":{"anyOf":[{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/TypeForShape","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"required":["test"],"type":"object"},{"additionalProperties":false,"properties":{"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"required":["test"],"type":"object"}]},"ConditionalPredicate<StringFieldDef>":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"format":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/Dict"}],"description":"When used with the default `\\"number\\"` and `\\"time\\"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.\\n\\n- If the format type is `\\"number\\"` (e.g., for quantitative fields), this is D3\'s [number format pattern](https://github.com/d3/d3-format#locale_format).\\n- If the format type is `\\"time\\"` (e.g., for temporal fields), this is D3\'s [time format pattern](https://github.com/d3/d3-time-format#locale_format).\\n\\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.\\n\\nWhen used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.\\n\\n__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format."},"formatType":{"description":"The format type for labels. One of `\\"number\\"`, `\\"time\\"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).\\n\\n__Default value:__\\n- `\\"time\\"` for temporal fields and ordinal and nominal fields with `timeUnit`.\\n- `\\"number\\"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.","type":"string"},"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"required":["test"],"type":"object"},"ConditionalPredicate<ValueDef<(Gradient|string|null|ExprRef)>>":{"additionalProperties":false,"properties":{"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"value":{"anyOf":[{"$ref":"#/definitions/Gradient"},{"type":"string"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["test","value"],"type":"object"},"ConditionalPredicate<ValueDef<(Text|ExprRef)>>":{"additionalProperties":false,"properties":{"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"value":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["test","value"],"type":"object"},"ConditionalPredicate<ValueDef<(number[]|ExprRef)>>":{"additionalProperties":false,"properties":{"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"value":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["test","value"],"type":"object"},"ConditionalPredicate<ValueDef<(number|ExprRef)>>":{"additionalProperties":false,"properties":{"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"value":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["test","value"],"type":"object"},"ConditionalPredicate<ValueDef<(string|ExprRef)>>":{"additionalProperties":false,"properties":{"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"value":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["test","value"],"type":"object"},"ConditionalPredicate<ValueDef<(string|null|ExprRef)>>":{"additionalProperties":false,"properties":{"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"value":{"anyOf":[{"type":"string"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["test","value"],"type":"object"},"ConditionalPredicate<ValueDef<number>>":{"additionalProperties":false,"properties":{"test":{"$ref":"#/definitions/PredicateComposition","description":"Predicate for triggering the condition"},"value":{"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).","type":"number"}},"required":["test","value"],"type":"object"},"Config":{"additionalProperties":false,"properties":{"arc":{"$ref":"#/definitions/RectConfig","description":"Arc-specific Config"},"area":{"$ref":"#/definitions/AreaConfig","description":"Area-Specific Config"},"aria":{"description":"A boolean flag indicating if ARIA default attributes should be included for marks and guides (SVG output only). If false, the `\\"aria-hidden\\"` attribute will be set for all guides, removing them from the ARIA accessibility tree and Vega-Lite will not generate default descriptions for marks.\\n\\n__Default value:__ `true`.","type":"boolean"},"autosize":{"anyOf":[{"$ref":"#/definitions/AutosizeType"},{"$ref":"#/definitions/AutoSizeParams"}],"description":"How the visualization size should be determined. If a string, should be one of `\\"pad\\"`, `\\"fit\\"` or `\\"none\\"`. Object values can additionally specify parameters for content sizing and automatic resizing.\\n\\n__Default value__: `pad`"},"axis":{"$ref":"#/definitions/AxisConfig","description":"Axis configuration, which determines default properties for all `x` and `y` [axes](https://vega.github.io/vega-lite/docs/axis.html). For a full list of axis configuration options, please see the [corresponding section of the axis documentation](https://vega.github.io/vega-lite/docs/axis.html#config)."},"axisBand":{"$ref":"#/definitions/AxisConfig","description":"Config for axes with \\"band\\" scales."},"axisBottom":{"$ref":"#/definitions/AxisConfig","description":"Config for x-axis along the bottom edge of the chart."},"axisDiscrete":{"$ref":"#/definitions/AxisConfig","description":"Config for axes with \\"point\\" or \\"band\\" scales."},"axisLeft":{"$ref":"#/definitions/AxisConfig","description":"Config for y-axis along the left edge of the chart."},"axisPoint":{"$ref":"#/definitions/AxisConfig","description":"Config for axes with \\"point\\" scales."},"axisQuantitative":{"$ref":"#/definitions/AxisConfig","description":"Config for quantitative axes."},"axisRight":{"$ref":"#/definitions/AxisConfig","description":"Config for y-axis along the right edge of the chart."},"axisTemporal":{"$ref":"#/definitions/AxisConfig","description":"Config for temporal axes."},"axisTop":{"$ref":"#/definitions/AxisConfig","description":"Config for x-axis along the top edge of the chart."},"axisX":{"$ref":"#/definitions/AxisConfig","description":"X-axis specific config."},"axisXBand":{"$ref":"#/definitions/AxisConfig","description":"Config for x-axes with \\"band\\" scales."},"axisXDiscrete":{"$ref":"#/definitions/AxisConfig","description":"Config for x-axes with \\"point\\" or \\"band\\" scales."},"axisXPoint":{"$ref":"#/definitions/AxisConfig","description":"Config for x-axes with \\"point\\" scales."},"axisXQuantitative":{"$ref":"#/definitions/AxisConfig","description":"Config for x-quantitative axes."},"axisXTemporal":{"$ref":"#/definitions/AxisConfig","description":"Config for x-temporal axes."},"axisY":{"$ref":"#/definitions/AxisConfig","description":"Y-axis specific config."},"axisYBand":{"$ref":"#/definitions/AxisConfig","description":"Config for y-axes with \\"band\\" scales."},"axisYDiscrete":{"$ref":"#/definitions/AxisConfig","description":"Config for y-axes with \\"point\\" or \\"band\\" scales."},"axisYPoint":{"$ref":"#/definitions/AxisConfig","description":"Config for y-axes with \\"point\\" scales."},"axisYQuantitative":{"$ref":"#/definitions/AxisConfig","description":"Config for y-quantitative axes."},"axisYTemporal":{"$ref":"#/definitions/AxisConfig","description":"Config for y-temporal axes."},"background":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/ExprRef"}],"description":"CSS color property to use as the background of the entire view.\\n\\n__Default value:__ `\\"white\\"`"},"bar":{"$ref":"#/definitions/BarConfig","description":"Bar-Specific Config"},"boxplot":{"$ref":"#/definitions/BoxPlotConfig","description":"Box Config"},"circle":{"$ref":"#/definitions/MarkConfig","description":"Circle-Specific Config"},"concat":{"$ref":"#/definitions/CompositionConfig","description":"Default configuration for all concatenation and repeat view composition operators (`concat`, `hconcat`, `vconcat`, and `repeat`)"},"countTitle":{"description":"Default axis and legend title for count fields.\\n\\n__Default value:__ `\'Count of Records`.","type":"string"},"customFormatTypes":{"description":"Allow the `formatType` property for text marks and guides to accept a custom formatter function [registered as a Vega expression](https://vega.github.io/vega-lite/usage/compile.html#format-type).","type":"boolean"},"errorband":{"$ref":"#/definitions/ErrorBandConfig","description":"ErrorBand Config"},"errorbar":{"$ref":"#/definitions/ErrorBarConfig","description":"ErrorBar Config"},"facet":{"$ref":"#/definitions/CompositionConfig","description":"Default configuration for the `facet` view composition operator"},"fieldTitle":{"description":"Defines how Vega-Lite generates title for fields. There are three possible styles:\\n- `\\"verbal\\"` (Default) - displays function in a verbal style (e.g., \\"Sum of field\\", \\"Year-month of date\\", \\"field (binned)\\").\\n- `\\"function\\"` - displays function using parentheses and capitalized texts (e.g., \\"SUM(field)\\", \\"YEARMONTH(date)\\", \\"BIN(field)\\").\\n- `\\"plain\\"` - displays only the field name without functions (e.g., \\"field\\", \\"date\\", \\"field\\").","enum":["verbal","functional","plain"],"type":"string"},"font":{"description":"Default font for all text marks, titles, and labels.","type":"string"},"geoshape":{"$ref":"#/definitions/MarkConfig","description":"Geoshape-Specific Config"},"header":{"$ref":"#/definitions/HeaderConfig","description":"Header configuration, which determines default properties for all [headers](https://vega.github.io/vega-lite/docs/header.html).\\n\\nFor a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config)."},"headerColumn":{"$ref":"#/definitions/HeaderConfig","description":"Header configuration, which determines default properties for column [headers](https://vega.github.io/vega-lite/docs/header.html).\\n\\nFor a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config)."},"headerFacet":{"$ref":"#/definitions/HeaderConfig","description":"Header configuration, which determines default properties for non-row/column facet [headers](https://vega.github.io/vega-lite/docs/header.html).\\n\\nFor a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config)."},"headerRow":{"$ref":"#/definitions/HeaderConfig","description":"Header configuration, which determines default properties for row [headers](https://vega.github.io/vega-lite/docs/header.html).\\n\\nFor a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config)."},"image":{"$ref":"#/definitions/RectConfig","description":"Image-specific Config"},"legend":{"$ref":"#/definitions/LegendConfig","description":"Legend configuration, which determines default properties for all [legends](https://vega.github.io/vega-lite/docs/legend.html). For a full list of legend configuration options, please see the [corresponding section of in the legend documentation](https://vega.github.io/vega-lite/docs/legend.html#config)."},"line":{"$ref":"#/definitions/LineConfig","description":"Line-Specific Config"},"lineBreak":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property provides a global default for text marks, which is overridden by mark or style config settings, and by the lineBreak mark encoding channel. If signal-valued, either string or regular expression (regexp) values are valid."},"locale":{"$ref":"#/definitions/Locale","description":"Locale definitions for string parsing and formatting of number and date values. The locale object should contain `number` and/or `time` properties with [locale definitions](https://vega.github.io/vega/docs/api/locale/). Locale definitions provided in the config block may be overridden by the View constructor locale option."},"mark":{"$ref":"#/definitions/MarkConfig","description":"Mark Config"},"numberFormat":{"description":"D3 Number format for guide labels and text marks. For example `\\"s\\"` for SI units. Use [D3\'s number format pattern](https://github.com/d3/d3-format#locale_format).","type":"string"},"padding":{"anyOf":[{"$ref":"#/definitions/Padding"},{"$ref":"#/definitions/ExprRef"}],"description":"The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}` to specify padding for each side of the visualization.\\n\\n__Default value__: `5`"},"params":{"description":"Dynamic variables or selections that parameterize a visualization.","items":{"anyOf":[{"$ref":"#/definitions/VariableParameter"},{"$ref":"#/definitions/TopLevelSelectionParameter"}]},"type":"array"},"point":{"$ref":"#/definitions/MarkConfig","description":"Point-Specific Config"},"projection":{"$ref":"#/definitions/ProjectionConfig","description":"Projection configuration, which determines default properties for all [projections](https://vega.github.io/vega-lite/docs/projection.html). For a full list of projection configuration options, please see the [corresponding section of the projection documentation](https://vega.github.io/vega-lite/docs/projection.html#config)."},"range":{"$ref":"#/definitions/RangeConfig","description":"An object hash that defines default range arrays or schemes for using with scales. For a full list of scale range configuration options, please see the [corresponding section of the scale documentation](https://vega.github.io/vega-lite/docs/scale.html#config)."},"rect":{"$ref":"#/definitions/RectConfig","description":"Rect-Specific Config"},"rule":{"$ref":"#/definitions/MarkConfig","description":"Rule-Specific Config"},"scale":{"$ref":"#/definitions/ScaleConfig","description":"Scale configuration determines default properties for all [scales](https://vega.github.io/vega-lite/docs/scale.html). For a full list of scale configuration options, please see the [corresponding section of the scale documentation](https://vega.github.io/vega-lite/docs/scale.html#config)."},"selection":{"$ref":"#/definitions/SelectionConfig","description":"An object hash for defining default properties for each type of selections."},"square":{"$ref":"#/definitions/MarkConfig","description":"Square-Specific Config"},"style":{"$ref":"#/definitions/StyleConfigIndex","description":"An object hash that defines key-value mappings to determine default properties for marks with a given [style](https://vega.github.io/vega-lite/docs/mark.html#mark-def). The keys represent styles names; the values have to be valid [mark configuration objects](https://vega.github.io/vega-lite/docs/mark.html#config)."},"text":{"$ref":"#/definitions/MarkConfig","description":"Text-Specific Config"},"tick":{"$ref":"#/definitions/TickConfig","description":"Tick-Specific Config"},"timeFormat":{"description":"Default time format for raw time values (without time units) in text marks, legend labels and header labels.\\n\\n__Default value:__ `\\"%b %d, %Y\\"` __Note:__ Axes automatically determine the format for each label automatically so this config does not affect axes.","type":"string"},"title":{"$ref":"#/definitions/TitleConfig","description":"Title configuration, which determines default properties for all [titles](https://vega.github.io/vega-lite/docs/title.html). For a full list of title configuration options, please see the [corresponding section of the title documentation](https://vega.github.io/vega-lite/docs/title.html#config)."},"trail":{"$ref":"#/definitions/LineConfig","description":"Trail-Specific Config"},"view":{"$ref":"#/definitions/ViewConfig","description":"Default properties for [single view plots](https://vega.github.io/vega-lite/docs/spec.html#single)."}},"type":"object"},"CsvDataFormat":{"additionalProperties":false,"properties":{"parse":{"anyOf":[{"$ref":"#/definitions/Parse"},{"type":"null"}],"description":"If set to `null`, disable type inference based on the spec and only use type inference based on the data. Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `\\"number\\"`, `\\"boolean\\"`, `\\"date\\"`, or null (do not parse the field)). For example, `\\"parse\\": {\\"modified_on\\": \\"date\\"}` parses the `modified_on` field in each input record a Date value.\\n\\nFor `\\"date\\"`, we parse data based using JavaScript\'s [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse). For Specific date formats can be provided (e.g., `{foo: \\"date:\'%m%d%Y\'\\"}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: \\"utc:\'%m%d%Y\'\\"}`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)"},"type":{"description":"Type of input data: `\\"json\\"`, `\\"csv\\"`, `\\"tsv\\"`, `\\"dsv\\"`.\\n\\n__Default value:__  The default format type is determined by the extension of the file URL. If no extension is detected, `\\"json\\"` will be used by default.","enum":["csv","tsv"],"type":"string"}},"type":"object"},"Cursor":{"enum":["auto","default","none","context-menu","help","pointer","progress","wait","cell","crosshair","text","vertical-text","alias","copy","move","no-drop","not-allowed","e-resize","n-resize","ne-resize","nw-resize","s-resize","se-resize","sw-resize","w-resize","ew-resize","ns-resize","nesw-resize","nwse-resize","col-resize","row-resize","all-scroll","zoom-in","zoom-out","grab","grabbing"],"type":"string"},"Cyclical":{"enum":["rainbow","sinebow"],"type":"string"},"Data":{"anyOf":[{"$ref":"#/definitions/DataSource"},{"$ref":"#/definitions/Generator"}]},"DataFormat":{"anyOf":[{"$ref":"#/definitions/CsvDataFormat"},{"$ref":"#/definitions/DsvDataFormat"},{"$ref":"#/definitions/JsonDataFormat"},{"$ref":"#/definitions/TopoDataFormat"}]},"DataSource":{"anyOf":[{"$ref":"#/definitions/UrlData"},{"$ref":"#/definitions/InlineData"},{"$ref":"#/definitions/NamedData"}]},"Datasets":{"$ref":"#/definitions/Dict<InlineDataset>"},"DateTime":{"additionalProperties":false,"description":"Object for defining datetime in Vega-Lite Filter. If both month and quarter are provided, month has higher precedence. `day` cannot be combined with other date. We accept string for month and day names.","properties":{"date":{"description":"Integer value representing the date (day of the month) from 1-31.","maximum":31,"minimum":1,"type":"number"},"day":{"anyOf":[{"$ref":"#/definitions/Day"},{"type":"string"}],"description":"Value representing the day of a week. This can be one of: (1) integer value -- `1` represents Monday; (2) case-insensitive day name (e.g., `\\"Monday\\"`); (3) case-insensitive, 3-character short day name (e.g., `\\"Mon\\"`).\\n\\n**Warning:** A DateTime definition object with `day`** should not be combined with `year`, `quarter`, `month`, or `date`."},"hours":{"description":"Integer value representing the hour of a day from 0-23.","maximum":24,"minimum":0,"type":"number"},"milliseconds":{"description":"Integer value representing the millisecond segment of time.","maximum":1000,"minimum":0,"type":"number"},"minutes":{"description":"Integer value representing the minute segment of time from 0-59.","maximum":60,"minimum":0,"type":"number"},"month":{"anyOf":[{"$ref":"#/definitions/Month"},{"type":"string"}],"description":"One of: (1) integer value representing the month from `1`-`12`. `1` represents January; (2) case-insensitive month name (e.g., `\\"January\\"`); (3) case-insensitive, 3-character short month name (e.g., `\\"Jan\\"`)."},"quarter":{"description":"Integer value representing the quarter of the year (from 1-4).","maximum":4,"minimum":1,"type":"number"},"seconds":{"description":"Integer value representing the second segment (0-59) of a time value","maximum":60,"minimum":0,"type":"number"},"utc":{"description":"A boolean flag indicating if date time is in utc time. If false, the date time is in local time","type":"boolean"},"year":{"description":"Integer value representing the year.","type":"number"}},"type":"object"},"DatumDef":{"additionalProperties":false,"properties":{"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"Day":{"maximum":7,"minimum":1,"type":"number"},"DensityTransform":{"additionalProperties":false,"properties":{"as":{"description":"The output fields for the sample value and corresponding density estimate.\\n\\n__Default value:__ `[\\"value\\", \\"density\\"]`","items":{"$ref":"#/definitions/FieldName"},"maxItems":2,"minItems":2,"type":"array"},"bandwidth":{"description":"The bandwidth (standard deviation) of the Gaussian kernel. If unspecified or set to zero, the bandwidth value is automatically estimated from the input data using Scott’s rule.","type":"number"},"counts":{"description":"A boolean flag indicating if the output values should be probability estimates (false) or smoothed counts (true).\\n\\n__Default value:__ `false`","type":"boolean"},"cumulative":{"description":"A boolean flag indicating whether to produce density estimates (false) or cumulative density estimates (true).\\n\\n__Default value:__ `false`","type":"boolean"},"density":{"$ref":"#/definitions/FieldName","description":"The data field for which to perform density estimation."},"extent":{"description":"A [min, max] domain from which to sample the distribution. If unspecified, the extent will be determined by the observed minimum and maximum values of the density value field.","items":{"type":"number"},"maxItems":2,"minItems":2,"type":"array"},"groupby":{"description":"The data fields to group by. If not specified, a single group containing all data objects will be used.","items":{"$ref":"#/definitions/FieldName"},"type":"array"},"maxsteps":{"description":"The maximum number of samples to take along the extent domain for plotting the density.\\n\\n__Default value:__ `200`","type":"number"},"minsteps":{"description":"The minimum number of samples to take along the extent domain for plotting the density.\\n\\n__Default value:__ `25`","type":"number"},"steps":{"description":"The exact number of samples to take along the extent domain for plotting the density. If specified, overrides both minsteps and maxsteps to set an exact number of uniform samples. Potentially useful in conjunction with a fixed extent to ensure consistent sample points for stacked densities.","type":"number"}},"required":["density"],"type":"object"},"DerivedStream":{"additionalProperties":false,"properties":{"between":{"items":{"$ref":"#/definitions/Stream"},"type":"array"},"consume":{"type":"boolean"},"debounce":{"type":"number"},"filter":{"anyOf":[{"$ref":"#/definitions/Expr"},{"items":{"$ref":"#/definitions/Expr"},"type":"array"}]},"markname":{"type":"string"},"marktype":{"$ref":"#/definitions/MarkType"},"stream":{"$ref":"#/definitions/Stream"},"throttle":{"type":"number"}},"required":["stream"],"type":"object"},"Dict<InlineDataset>":{"additionalProperties":{"$ref":"#/definitions/InlineDataset"},"type":"object"},"Dict<SelectionInit>":{"additionalProperties":{"$ref":"#/definitions/SelectionInit"},"type":"object"},"Dict<SelectionInitInterval>":{"additionalProperties":{"$ref":"#/definitions/SelectionInitInterval"},"type":"object"},"Dict":{"additionalProperties":{},"type":"object"},"Diverging":{"enum":["blueorange","blueorange-3","blueorange-4","blueorange-5","blueorange-6","blueorange-7","blueorange-8","blueorange-9","blueorange-10","blueorange-11","brownbluegreen","brownbluegreen-3","brownbluegreen-4","brownbluegreen-5","brownbluegreen-6","brownbluegreen-7","brownbluegreen-8","brownbluegreen-9","brownbluegreen-10","brownbluegreen-11","purplegreen","purplegreen-3","purplegreen-4","purplegreen-5","purplegreen-6","purplegreen-7","purplegreen-8","purplegreen-9","purplegreen-10","purplegreen-11","pinkyellowgreen","pinkyellowgreen-3","pinkyellowgreen-4","pinkyellowgreen-5","pinkyellowgreen-6","pinkyellowgreen-7","pinkyellowgreen-8","pinkyellowgreen-9","pinkyellowgreen-10","pinkyellowgreen-11","purpleorange","purpleorange-3","purpleorange-4","purpleorange-5","purpleorange-6","purpleorange-7","purpleorange-8","purpleorange-9","purpleorange-10","purpleorange-11","redblue","redblue-3","redblue-4","redblue-5","redblue-6","redblue-7","redblue-8","redblue-9","redblue-10","redblue-11","redgrey","redgrey-3","redgrey-4","redgrey-5","redgrey-6","redgrey-7","redgrey-8","redgrey-9","redgrey-10","redgrey-11","redyellowblue","redyellowblue-3","redyellowblue-4","redyellowblue-5","redyellowblue-6","redyellowblue-7","redyellowblue-8","redyellowblue-9","redyellowblue-10","redyellowblue-11","redyellowgreen","redyellowgreen-3","redyellowgreen-4","redyellowgreen-5","redyellowgreen-6","redyellowgreen-7","redyellowgreen-8","redyellowgreen-9","redyellowgreen-10","redyellowgreen-11","spectral","spectral-3","spectral-4","spectral-5","spectral-6","spectral-7","spectral-8","spectral-9","spectral-10","spectral-11"],"type":"string"},"DomainUnionWith":{"additionalProperties":false,"properties":{"unionWith":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"items":{"type":"string"},"type":"array"},{"items":{"type":"boolean"},"type":"array"},{"items":{"$ref":"#/definitions/DateTime"},"type":"array"}],"description":"Customized domain values to be union with the field\'s values or explicitly defined domain. Should be an array of valid scale domain values."}},"required":["unionWith"],"type":"object"},"DsvDataFormat":{"additionalProperties":false,"properties":{"delimiter":{"description":"The delimiter between records. The delimiter must be a single character (i.e., a single 16-bit code unit); so, ASCII delimiters are fine, but emoji delimiters are not.","maxLength":1,"minLength":1,"type":"string"},"parse":{"anyOf":[{"$ref":"#/definitions/Parse"},{"type":"null"}],"description":"If set to `null`, disable type inference based on the spec and only use type inference based on the data. Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `\\"number\\"`, `\\"boolean\\"`, `\\"date\\"`, or null (do not parse the field)). For example, `\\"parse\\": {\\"modified_on\\": \\"date\\"}` parses the `modified_on` field in each input record a Date value.\\n\\nFor `\\"date\\"`, we parse data based using JavaScript\'s [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse). For Specific date formats can be provided (e.g., `{foo: \\"date:\'%m%d%Y\'\\"}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: \\"utc:\'%m%d%Y\'\\"}`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)"},"type":{"const":"dsv","description":"Type of input data: `\\"json\\"`, `\\"csv\\"`, `\\"tsv\\"`, `\\"dsv\\"`.\\n\\n__Default value:__  The default format type is determined by the extension of the file URL. If no extension is detected, `\\"json\\"` will be used by default.","type":"string"}},"required":["delimiter"],"type":"object"},"Element":{"type":"string"},"EncodingSortField":{"additionalProperties":false,"description":"A sort definition for sorting a discrete scale in an encoding field definition.","properties":{"field":{"$ref":"#/definitions/Field","description":"The data [field](https://vega.github.io/vega-lite/docs/field.html) to sort by.\\n\\n__Default value:__ If unspecified, defaults to the field specified in the outer data reference."},"op":{"$ref":"#/definitions/NonArgAggregateOp","description":"An [aggregate operation](https://vega.github.io/vega-lite/docs/aggregate.html#ops) to perform on the field prior to sorting (e.g., `\\"count\\"`, `\\"mean\\"` and `\\"median\\"`). An aggregation is required when there are multiple values of the sort field for each encoded data field. The input data objects will be aggregated, grouped by the encoded data field.\\n\\nFor a full list of operations, please see the documentation for [aggregate](https://vega.github.io/vega-lite/docs/aggregate.html#ops).\\n\\n__Default value:__ `\\"sum\\"` for stacked plots. Otherwise, `\\"min\\"`."},"order":{"anyOf":[{"$ref":"#/definitions/SortOrder"},{"type":"null"}],"description":"The sort order. One of `\\"ascending\\"` (default), `\\"descending\\"`, or `null` (no not sort)."}},"type":"object"},"ErrorBand":{"const":"errorband","type":"string"},"ErrorBandConfig":{"additionalProperties":false,"properties":{"band":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]},"borders":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]},"extent":{"$ref":"#/definitions/ErrorBarExtent","description":"The extent of the band. Available options include:\\n- `\\"ci\\"`: Extend the band to the confidence interval of the mean.\\n- `\\"stderr\\"`: The size of band are set to the value of standard error, extending from the mean.\\n- `\\"stdev\\"`: The size of band are set to the value of standard deviation, extending from the mean.\\n- `\\"iqr\\"`: Extend the band to the q1 and q3.\\n\\n__Default value:__ `\\"stderr\\"`."},"interpolate":{"$ref":"#/definitions/Interpolate","description":"The line interpolation method for the error band. One of the following:\\n- `\\"linear\\"`: piecewise linear segments, as in a polyline.\\n- `\\"linear-closed\\"`: close the linear segments to form a polygon.\\n- `\\"step\\"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes at the midpoint of each pair of adjacent x-values.\\n- `\\"step-before\\"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes before the x-value.\\n- `\\"step-after\\"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes after the x-value.\\n- `\\"basis\\"`: a B-spline, with control point duplication on the ends.\\n- `\\"basis-open\\"`: an open B-spline; may not intersect the start or end.\\n- `\\"basis-closed\\"`: a closed B-spline, as in a loop.\\n- `\\"cardinal\\"`: a Cardinal spline, with control point duplication on the ends.\\n- `\\"cardinal-open\\"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\\n- `\\"cardinal-closed\\"`: a closed Cardinal spline, as in a loop.\\n- `\\"bundle\\"`: equivalent to basis, except the tension parameter is used to straighten the spline.\\n- `\\"monotone\\"`: cubic interpolation that preserves monotonicity in y."},"tension":{"description":"The tension parameter for the interpolation type of the error band.","maximum":1,"minimum":0,"type":"number"}},"type":"object"},"ErrorBandDef":{"additionalProperties":false,"properties":{"band":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]},"borders":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]},"clip":{"description":"Whether a composite mark be clipped to the enclosing group’s width and height.","type":"boolean"},"color":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"$ref":"#/definitions/ExprRef"}],"description":"Default color.\\n\\n__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> `\\"#4682b4\\"`\\n\\n__Note:__\\n- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\\n- The `fill` and `stroke` properties have higher precedence than `color` and will override `color`."},"extent":{"$ref":"#/definitions/ErrorBarExtent","description":"The extent of the band. Available options include:\\n- `\\"ci\\"`: Extend the band to the confidence interval of the mean.\\n- `\\"stderr\\"`: The size of band are set to the value of standard error, extending from the mean.\\n- `\\"stdev\\"`: The size of band are set to the value of standard deviation, extending from the mean.\\n- `\\"iqr\\"`: Extend the band to the q1 and q3.\\n\\n__Default value:__ `\\"stderr\\"`."},"interpolate":{"$ref":"#/definitions/Interpolate","description":"The line interpolation method for the error band. One of the following:\\n- `\\"linear\\"`: piecewise linear segments, as in a polyline.\\n- `\\"linear-closed\\"`: close the linear segments to form a polygon.\\n- `\\"step\\"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes at the midpoint of each pair of adjacent x-values.\\n- `\\"step-before\\"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes before the x-value.\\n- `\\"step-after\\"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes after the x-value.\\n- `\\"basis\\"`: a B-spline, with control point duplication on the ends.\\n- `\\"basis-open\\"`: an open B-spline; may not intersect the start or end.\\n- `\\"basis-closed\\"`: a closed B-spline, as in a loop.\\n- `\\"cardinal\\"`: a Cardinal spline, with control point duplication on the ends.\\n- `\\"cardinal-open\\"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\\n- `\\"cardinal-closed\\"`: a closed Cardinal spline, as in a loop.\\n- `\\"bundle\\"`: equivalent to basis, except the tension parameter is used to straighten the spline.\\n- `\\"monotone\\"`: cubic interpolation that preserves monotonicity in y."},"opacity":{"description":"The opacity (value between [0,1]) of the mark.","maximum":1,"minimum":0,"type":"number"},"orient":{"$ref":"#/definitions/Orientation","description":"Orientation of the error band. This is normally automatically determined, but can be specified when the orientation is ambiguous and cannot be automatically determined."},"tension":{"description":"The tension parameter for the interpolation type of the error band.","maximum":1,"minimum":0,"type":"number"},"type":{"$ref":"#/definitions/ErrorBand","description":"The mark type. This could a primitive mark type (one of `\\"bar\\"`, `\\"circle\\"`, `\\"square\\"`, `\\"tick\\"`, `\\"line\\"`, `\\"area\\"`, `\\"point\\"`, `\\"geoshape\\"`, `\\"rule\\"`, and `\\"text\\"`) or a composite mark type (`\\"boxplot\\"`, `\\"errorband\\"`, `\\"errorbar\\"`)."}},"required":["type"],"type":"object"},"ErrorBar":{"const":"errorbar","type":"string"},"ErrorBarConfig":{"additionalProperties":false,"properties":{"extent":{"$ref":"#/definitions/ErrorBarExtent","description":"The extent of the rule. Available options include:\\n- `\\"ci\\"`: Extend the rule to the confidence interval of the mean.\\n- `\\"stderr\\"`: The size of rule are set to the value of standard error, extending from the mean.\\n- `\\"stdev\\"`: The size of rule are set to the value of standard deviation, extending from the mean.\\n- `\\"iqr\\"`: Extend the rule to the q1 and q3.\\n\\n__Default value:__ `\\"stderr\\"`."},"rule":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]},"size":{"description":"Size of the ticks of an error bar","type":"number"},"thickness":{"description":"Thickness of the ticks and the bar of an error bar","type":"number"},"ticks":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]}},"type":"object"},"ErrorBarDef":{"additionalProperties":false,"properties":{"clip":{"description":"Whether a composite mark be clipped to the enclosing group’s width and height.","type":"boolean"},"color":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"$ref":"#/definitions/ExprRef"}],"description":"Default color.\\n\\n__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> `\\"#4682b4\\"`\\n\\n__Note:__\\n- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\\n- The `fill` and `stroke` properties have higher precedence than `color` and will override `color`."},"extent":{"$ref":"#/definitions/ErrorBarExtent","description":"The extent of the rule. Available options include:\\n- `\\"ci\\"`: Extend the rule to the confidence interval of the mean.\\n- `\\"stderr\\"`: The size of rule are set to the value of standard error, extending from the mean.\\n- `\\"stdev\\"`: The size of rule are set to the value of standard deviation, extending from the mean.\\n- `\\"iqr\\"`: Extend the rule to the q1 and q3.\\n\\n__Default value:__ `\\"stderr\\"`."},"opacity":{"description":"The opacity (value between [0,1]) of the mark.","maximum":1,"minimum":0,"type":"number"},"orient":{"$ref":"#/definitions/Orientation","description":"Orientation of the error bar. This is normally automatically determined, but can be specified when the orientation is ambiguous and cannot be automatically determined."},"rule":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]},"size":{"description":"Size of the ticks of an error bar","type":"number"},"thickness":{"description":"Thickness of the ticks and the bar of an error bar","type":"number"},"ticks":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/MarkConfig"}]},"type":{"$ref":"#/definitions/ErrorBar","description":"The mark type. This could a primitive mark type (one of `\\"bar\\"`, `\\"circle\\"`, `\\"square\\"`, `\\"tick\\"`, `\\"line\\"`, `\\"area\\"`, `\\"point\\"`, `\\"geoshape\\"`, `\\"rule\\"`, and `\\"text\\"`) or a composite mark type (`\\"boxplot\\"`, `\\"errorband\\"`, `\\"errorbar\\"`)."}},"required":["type"],"type":"object"},"ErrorBarExtent":{"enum":["ci","iqr","stderr","stdev"],"type":"string"},"EventStream":{"anyOf":[{"additionalProperties":false,"properties":{"between":{"items":{"$ref":"#/definitions/Stream"},"type":"array"},"consume":{"type":"boolean"},"debounce":{"type":"number"},"filter":{"anyOf":[{"$ref":"#/definitions/Expr"},{"items":{"$ref":"#/definitions/Expr"},"type":"array"}]},"markname":{"type":"string"},"marktype":{"$ref":"#/definitions/MarkType"},"source":{"enum":["view","scope"],"type":"string"},"throttle":{"type":"number"},"type":{"$ref":"#/definitions/EventType"}},"required":["type"],"type":"object"},{"additionalProperties":false,"properties":{"between":{"items":{"$ref":"#/definitions/Stream"},"type":"array"},"consume":{"type":"boolean"},"debounce":{"type":"number"},"filter":{"anyOf":[{"$ref":"#/definitions/Expr"},{"items":{"$ref":"#/definitions/Expr"},"type":"array"}]},"markname":{"type":"string"},"marktype":{"$ref":"#/definitions/MarkType"},"source":{"const":"window","type":"string"},"throttle":{"type":"number"},"type":{"$ref":"#/definitions/WindowEventType"}},"required":["source","type"],"type":"object"}]},"EventType":{"enum":["click","dblclick","dragenter","dragleave","dragover","keydown","keypress","keyup","mousedown","mousemove","mouseout","mouseover","mouseup","mousewheel","timer","touchend","touchmove","touchstart","wheel"],"type":"string"},"Expr":{"type":"string"},"ExprRef":{"additionalProperties":false,"properties":{"expr":{"description":"Vega expression (which can refer to Vega-Lite parameters).","type":"string"}},"required":["expr"],"type":"object"},"FacetEncodingFieldDef":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"align":{"anyOf":[{"$ref":"#/definitions/LayoutAlign"},{"$ref":"#/definitions/RowCol<LayoutAlign>"}],"description":"The alignment to apply to grid rows and columns. The supported string values are `\\"all\\"`, `\\"each\\"`, and `\\"none\\"`.\\n\\n- For `\\"none\\"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\\n- For `\\"each\\"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\\n- For `\\"all\\"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\\n\\nAlternatively, an object value of the form `{\\"row\\": string, \\"column\\": string}` can be used to supply different alignments for rows and columns.\\n\\n__Default value:__ `\\"all\\"`."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"bounds":{"description":"The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\\n\\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\\n\\n__Default value:__ `\\"full\\"`","enum":["full","flush"],"type":"string"},"center":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/RowCol<boolean>"}],"description":"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\\n\\nAn object value of the form `{\\"row\\": boolean, \\"column\\": boolean}` can be used to supply different centering values for rows and columns.\\n\\n__Default value:__ `false`"},"columns":{"description":"The number of columns to include in the view composition layout.\\n\\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\\n\\n__Note__:\\n\\n1) This property is only for:\\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\\n\\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).","type":"number"},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"header":{"anyOf":[{"$ref":"#/definitions/Header"},{"type":"null"}],"description":"An object defining properties of a facet\'s header."},"sort":{"anyOf":[{"$ref":"#/definitions/SortArray"},{"$ref":"#/definitions/SortOrder"},{"$ref":"#/definitions/EncodingSortField"},{"type":"null"}],"description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` is not supported for `row` and `column`."},"spacing":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/RowCol<number>"}],"description":"The spacing in pixels between sub-views of the composition operator. An object of the form `{\\"row\\": number, \\"column\\": number}` can be used to set different spacing values for rows and columns.\\n\\n__Default value__: Depends on `\\"spacing\\"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)"},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"FacetFieldDef":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"header":{"anyOf":[{"$ref":"#/definitions/Header"},{"type":"null"}],"description":"An object defining properties of a facet\'s header."},"sort":{"anyOf":[{"$ref":"#/definitions/SortArray"},{"$ref":"#/definitions/SortOrder"},{"$ref":"#/definitions/EncodingSortField"},{"type":"null"}],"description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` is not supported for `row` and `column`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"FacetMapping":{"additionalProperties":false,"properties":{"column":{"$ref":"#/definitions/FacetFieldDef","description":"A field definition for the horizontal facet of trellis plots."},"row":{"$ref":"#/definitions/FacetFieldDef","description":"A field definition for the vertical facet of trellis plots."}},"type":"object"},"FacetedEncoding":{"additionalProperties":false,"properties":{"angle":{"$ref":"#/definitions/NumericMarkPropDef","description":"Rotation angle of point and text marks."},"color":{"$ref":"#/definitions/ColorDef","description":"Color of the marks – either fill or stroke color based on  the `filled` property of mark definition. By default, `color` represents fill color for `\\"area\\"`, `\\"bar\\"`, `\\"tick\\"`, `\\"text\\"`, `\\"trail\\"`, `\\"circle\\"`, and `\\"square\\"` / stroke color for `\\"line\\"` and `\\"point\\"`.\\n\\n__Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)\'s `color` property.\\n\\n_Note:_ 1) For fine-grained control over both fill and stroke colors of the marks, please use the `fill` and `stroke` channels. The `fill` or `stroke` encodings have higher precedence than `color`, thus may override the `color` encoding if conflicting encodings are specified. 2) See the scale documentation for more information about customizing [color scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme)."},"column":{"$ref":"#/definitions/RowColumnEncodingFieldDef","description":"A field definition for the horizontal facet of trellis plots."},"description":{"anyOf":[{"$ref":"#/definitions/StringFieldDefWithCondition"},{"$ref":"#/definitions/StringValueDefWithCondition"}],"description":"A text description of this mark for ARIA accessibility (SVG output only). For SVG output the `\\"aria-label\\"` attribute will be set to this description."},"detail":{"anyOf":[{"$ref":"#/definitions/FieldDefWithoutScale"},{"items":{"$ref":"#/definitions/FieldDefWithoutScale"},"type":"array"}],"description":"Additional levels of detail for grouping data in aggregate views and in line, trail, and area marks without mapping data to a specific visual channel."},"facet":{"$ref":"#/definitions/FacetEncodingFieldDef","description":"A field definition for the (flexible) facet of trellis plots.\\n\\nIf either `row` or `column` is specified, this channel will be ignored."},"fill":{"$ref":"#/definitions/ColorDef","description":"Fill color of the marks. __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)\'s `color` property.\\n\\n_Note:_ The `fill` encoding has higher precedence than `color`, thus may override the `color` encoding if conflicting encodings are specified."},"fillOpacity":{"$ref":"#/definitions/NumericMarkPropDef","description":"Fill opacity of the marks.\\n\\n__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)\'s `fillOpacity` property."},"href":{"anyOf":[{"$ref":"#/definitions/StringFieldDefWithCondition"},{"$ref":"#/definitions/StringValueDefWithCondition"}],"description":"A URL to load upon mouse click."},"key":{"$ref":"#/definitions/FieldDefWithoutScale","description":"A data field to use as a unique key for data binding. When a visualization’s data is updated, the key value will be used to match data elements to existing mark instances. Use a key channel to enable object constancy for transitions over dynamic data."},"latitude":{"$ref":"#/definitions/LatLongDef","description":"Latitude position of geographically projected marks."},"latitude2":{"$ref":"#/definitions/Position2Def","description":"Latitude-2 position for geographically projected ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`."},"longitude":{"$ref":"#/definitions/LatLongDef","description":"Longitude position of geographically projected marks."},"longitude2":{"$ref":"#/definitions/Position2Def","description":"Longitude-2 position for geographically projected ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`."},"opacity":{"$ref":"#/definitions/NumericMarkPropDef","description":"Opacity of the marks.\\n\\n__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)\'s `opacity` property."},"order":{"anyOf":[{"$ref":"#/definitions/OrderFieldDef"},{"items":{"$ref":"#/definitions/OrderFieldDef"},"type":"array"},{"$ref":"#/definitions/OrderValueDef"}],"description":"Order of the marks.\\n- For stacked marks, this `order` channel encodes [stack order](https://vega.github.io/vega-lite/docs/stack.html#order).\\n- For line and trail marks, this `order` channel encodes order of data points in the lines. This can be useful for creating [a connected scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html). Setting `order` to `{\\"value\\": null}` makes the line marks use the original order in the data sources.\\n- Otherwise, this `order` channel encodes layer order of the marks.\\n\\n__Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping."},"radius":{"$ref":"#/definitions/PolarDef","description":"The outer radius in pixels of arc marks."},"radius2":{"$ref":"#/definitions/Position2Def","description":"The inner radius in pixels of arc marks."},"row":{"$ref":"#/definitions/RowColumnEncodingFieldDef","description":"A field definition for the vertical facet of trellis plots."},"shape":{"$ref":"#/definitions/ShapeDef","description":"Shape of the mark.\\n\\n1. For `point` marks the supported values include:   - plotting shapes: `\\"circle\\"`, `\\"square\\"`, `\\"cross\\"`, `\\"diamond\\"`, `\\"triangle-up\\"`, `\\"triangle-down\\"`, `\\"triangle-right\\"`, or `\\"triangle-left\\"`.   - the line symbol `\\"stroke\\"`   - centered directional shapes `\\"arrow\\"`, `\\"wedge\\"`, or `\\"triangle\\"`   - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\\n\\n2. For `geoshape` marks it should be a field definition of the geojson data\\n\\n__Default value:__ If undefined, the default shape depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#point-config)\'s `shape` property. (`\\"circle\\"` if unset.)"},"size":{"$ref":"#/definitions/NumericMarkPropDef","description":"Size of the mark.\\n- For `\\"point\\"`, `\\"square\\"` and `\\"circle\\"`, – the symbol size, or pixel area of the mark.\\n- For `\\"bar\\"` and `\\"tick\\"` – the bar and tick\'s size.\\n- For `\\"text\\"` – the text\'s font size.\\n- Size is unsupported for `\\"line\\"`, `\\"area\\"`, and `\\"rect\\"`. (Use `\\"trail\\"` instead of line with varying size)"},"stroke":{"$ref":"#/definitions/ColorDef","description":"Stroke color of the marks. __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)\'s `color` property.\\n\\n_Note:_ The `stroke` encoding has higher precedence than `color`, thus may override the `color` encoding if conflicting encodings are specified."},"strokeDash":{"$ref":"#/definitions/NumericArrayMarkPropDef","description":"Stroke dash of the marks.\\n\\n__Default value:__ `[1,0]` (No dash)."},"strokeOpacity":{"$ref":"#/definitions/NumericMarkPropDef","description":"Stroke opacity of the marks.\\n\\n__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)\'s `strokeOpacity` property."},"strokeWidth":{"$ref":"#/definitions/NumericMarkPropDef","description":"Stroke width of the marks.\\n\\n__Default value:__ If undefined, the default stroke width depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)\'s `strokeWidth` property."},"text":{"$ref":"#/definitions/TextDef","description":"Text of the `text` mark."},"theta":{"$ref":"#/definitions/PolarDef","description":"- For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)\\n\\n- For text marks, polar coordinate angle in radians."},"theta2":{"$ref":"#/definitions/Position2Def","description":"The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise."},"tooltip":{"anyOf":[{"$ref":"#/definitions/StringFieldDefWithCondition"},{"$ref":"#/definitions/StringValueDefWithCondition"},{"items":{"$ref":"#/definitions/StringFieldDef"},"type":"array"},{"type":"null"}],"description":"The tooltip text to show upon mouse hover. Specifying `tooltip` encoding overrides [the `tooltip` property in the mark definition](https://vega.github.io/vega-lite/docs/mark.html#mark-def).\\n\\nSee the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip in Vega-Lite."},"url":{"anyOf":[{"$ref":"#/definitions/StringFieldDefWithCondition"},{"$ref":"#/definitions/StringValueDefWithCondition"}],"description":"The URL of an image mark."},"x":{"$ref":"#/definitions/PositionDef","description":"X coordinates of the marks, or width of horizontal `\\"bar\\"` and `\\"area\\"` without specified `x2` or `width`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"x2":{"$ref":"#/definitions/Position2Def","description":"X2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"xError":{"anyOf":[{"$ref":"#/definitions/SecondaryFieldDef"},{"$ref":"#/definitions/ValueDef<number>"}],"description":"Error value of x coordinates for error specified `\\"errorbar\\"` and `\\"errorband\\"`."},"xError2":{"anyOf":[{"$ref":"#/definitions/SecondaryFieldDef"},{"$ref":"#/definitions/ValueDef<number>"}],"description":"Secondary error value of x coordinates for error specified `\\"errorbar\\"` and `\\"errorband\\"`."},"y":{"$ref":"#/definitions/PositionDef","description":"Y coordinates of the marks, or height of vertical `\\"bar\\"` and `\\"area\\"` without specified `y2` or `height`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."},"y2":{"$ref":"#/definitions/Position2Def","description":"Y2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."},"yError":{"anyOf":[{"$ref":"#/definitions/SecondaryFieldDef"},{"$ref":"#/definitions/ValueDef<number>"}],"description":"Error value of y coordinates for error specified `\\"errorbar\\"` and `\\"errorband\\"`."},"yError2":{"anyOf":[{"$ref":"#/definitions/SecondaryFieldDef"},{"$ref":"#/definitions/ValueDef<number>"}],"description":"Secondary error value of y coordinates for error specified `\\"errorbar\\"` and `\\"errorband\\"`."}},"type":"object"},"FacetedUnitSpec":{"additionalProperties":false,"description":"Unit spec that can have a composite mark and row or column channels (shorthand for a facet spec).","properties":{"align":{"anyOf":[{"$ref":"#/definitions/LayoutAlign"},{"$ref":"#/definitions/RowCol<LayoutAlign>"}],"description":"The alignment to apply to grid rows and columns. The supported string values are `\\"all\\"`, `\\"each\\"`, and `\\"none\\"`.\\n\\n- For `\\"none\\"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\\n- For `\\"each\\"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\\n- For `\\"all\\"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\\n\\nAlternatively, an object value of the form `{\\"row\\": string, \\"column\\": string}` can be used to supply different alignments for rows and columns.\\n\\n__Default value:__ `\\"all\\"`."},"bounds":{"description":"The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\\n\\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\\n\\n__Default value:__ `\\"full\\"`","enum":["full","flush"],"type":"string"},"center":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/RowCol<boolean>"}],"description":"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\\n\\nAn object value of the form `{\\"row\\": boolean, \\"column\\": boolean}` can be used to supply different centering values for rows and columns.\\n\\n__Default value:__ `false`"},"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"encoding":{"$ref":"#/definitions/FacetedEncoding","description":"A key-value mapping between encoding channels and definition of fields."},"height":{"anyOf":[{"type":"number"},{"const":"container","type":"string"},{"$ref":"#/definitions/Step"}],"description":"The height of a visualization.\\n\\n- For a plot with a continuous y-field, height should be a number.\\n- For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)\\n- To enable responsive sizing on height, it should be set to `\\"container\\"`.\\n\\n__Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous y-field and `config.view.discreteHeight` otherwise.\\n\\n__Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the `\\"container\\"` option cannot be used.\\n\\n__See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation."},"mark":{"$ref":"#/definitions/AnyMark","description":"A string describing the mark type (one of `\\"bar\\"`, `\\"circle\\"`, `\\"square\\"`, `\\"tick\\"`, `\\"line\\"`, `\\"area\\"`, `\\"point\\"`, `\\"rule\\"`, `\\"geoshape\\"`, and `\\"text\\"`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def)."},"name":{"description":"Name of the visualization for later reference.","type":"string"},"params":{"description":"An array of parameters that may either be simple variables, or more complex selections that map user input to data queries.","items":{"anyOf":[{"$ref":"#/definitions/VariableParameter"},{"$ref":"#/definitions/SelectionParameter"}]},"type":"array"},"projection":{"$ref":"#/definitions/Projection","description":"An object defining properties of geographic projection, which will be applied to `shape` path for `\\"geoshape\\"` marks and to `latitude` and `\\"longitude\\"` channels for other marks."},"resolve":{"$ref":"#/definitions/Resolve","description":"Scale, axis, and legend resolutions for view composition specifications."},"spacing":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/RowCol<number>"}],"description":"The spacing in pixels between sub-views of the composition operator. An object of the form `{\\"row\\": number, \\"column\\": number}` can be used to set different spacing values for rows and columns.\\n\\n__Default value__: Depends on `\\"spacing\\"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)"},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"},"view":{"$ref":"#/definitions/ViewBackground","description":"An object defining the view background\'s fill and stroke.\\n\\n__Default value:__ none (transparent)"},"width":{"anyOf":[{"type":"number"},{"const":"container","type":"string"},{"$ref":"#/definitions/Step"}],"description":"The width of a visualization.\\n\\n- For a plot with a continuous x-field, width should be a number.\\n- For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)\\n- To enable responsive sizing on width, it should be set to `\\"container\\"`.\\n\\n__Default value:__ Based on `config.view.continuousWidth` for a plot with a continuous x-field and `config.view.discreteWidth` otherwise.\\n\\n__Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the `\\"container\\"` option cannot be used.\\n\\n__See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation."}},"required":["mark"],"type":"object"},"Field":{"anyOf":[{"$ref":"#/definitions/FieldName"},{"$ref":"#/definitions/RepeatRef"}]},"FieldDefWithoutScale":{"$ref":"#/definitions/TypedFieldDef","description":"Field Def without scale (and without bin: \\"binned\\" support)."},"FieldEqualPredicate":{"additionalProperties":false,"properties":{"equal":{"anyOf":[{"type":"string"},{"type":"number"},{"type":"boolean"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"}],"description":"The value that the field should be equal to."},"field":{"$ref":"#/definitions/FieldName","description":"Field to be tested."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit for the field to be tested."}},"required":["equal","field"],"type":"object"},"FieldGTEPredicate":{"additionalProperties":false,"properties":{"field":{"$ref":"#/definitions/FieldName","description":"Field to be tested."},"gte":{"anyOf":[{"type":"string"},{"type":"number"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"}],"description":"The value that the field should be greater than or equals to."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit for the field to be tested."}},"required":["field","gte"],"type":"object"},"FieldGTPredicate":{"additionalProperties":false,"properties":{"field":{"$ref":"#/definitions/FieldName","description":"Field to be tested."},"gt":{"anyOf":[{"type":"string"},{"type":"number"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"}],"description":"The value that the field should be greater than."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit for the field to be tested."}},"required":["field","gt"],"type":"object"},"FieldLTEPredicate":{"additionalProperties":false,"properties":{"field":{"$ref":"#/definitions/FieldName","description":"Field to be tested."},"lte":{"anyOf":[{"type":"string"},{"type":"number"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"}],"description":"The value that the field should be less than or equals to."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit for the field to be tested."}},"required":["field","lte"],"type":"object"},"FieldLTPredicate":{"additionalProperties":false,"properties":{"field":{"$ref":"#/definitions/FieldName","description":"Field to be tested."},"lt":{"anyOf":[{"type":"string"},{"type":"number"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"}],"description":"The value that the field should be less than."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit for the field to be tested."}},"required":["field","lt"],"type":"object"},"FieldName":{"type":"string"},"FieldOneOfPredicate":{"additionalProperties":false,"properties":{"field":{"$ref":"#/definitions/FieldName","description":"Field to be tested."},"oneOf":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"items":{"type":"number"},"type":"array"},{"items":{"type":"boolean"},"type":"array"},{"items":{"$ref":"#/definitions/DateTime"},"type":"array"}],"description":"A set of values that the `field`\'s value should be a member of, for a data item included in the filtered data."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit for the field to be tested."}},"required":["field","oneOf"],"type":"object"},"FieldOrDatumDefWithCondition<DatumDef,(Gradient|string|null)>":{"additionalProperties":false,"description":"A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }","properties":{"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"FieldOrDatumDefWithCondition<DatumDef,(string|null)>":{"additionalProperties":false,"description":"A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }","properties":{"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"FieldOrDatumDefWithCondition<DatumDef,number>":{"additionalProperties":false,"description":"A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }","properties":{"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"FieldOrDatumDefWithCondition<DatumDef,number[]>":{"additionalProperties":false,"description":"A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }","properties":{"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(number[]|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number[]|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"FieldOrDatumDefWithCondition<MarkPropFieldDef,(Gradient|string|null)>":{"additionalProperties":false,"description":"A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }","properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"FieldOrDatumDefWithCondition<MarkPropFieldDef,number>":{"additionalProperties":false,"description":"A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }","properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"FieldOrDatumDefWithCondition<MarkPropFieldDef,number[]>":{"additionalProperties":false,"description":"A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }","properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(number[]|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number[]|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"FieldOrDatumDefWithCondition<MarkPropFieldDef<TypeForShape>,(string|null)>":{"additionalProperties":false,"description":"A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }","properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/TypeForShape","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"FieldOrDatumDefWithCondition<StringDatumDef,Text>":{"additionalProperties":false,"description":"A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }","properties":{"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(Text|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(Text|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"format":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/Dict"}],"description":"When used with the default `\\"number\\"` and `\\"time\\"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.\\n\\n- If the format type is `\\"number\\"` (e.g., for quantitative fields), this is D3\'s [number format pattern](https://github.com/d3/d3-format#locale_format).\\n- If the format type is `\\"time\\"` (e.g., for temporal fields), this is D3\'s [time format pattern](https://github.com/d3/d3-time-format#locale_format).\\n\\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.\\n\\nWhen used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.\\n\\n__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format."},"formatType":{"description":"The format type for labels. One of `\\"number\\"`, `\\"time\\"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).\\n\\n__Default value:__\\n- `\\"time\\"` for temporal fields and ordinal and nominal fields with `timeUnit`.\\n- `\\"number\\"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.","type":"string"},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"FieldOrDatumDefWithCondition<StringFieldDef,Text>":{"additionalProperties":false,"description":"A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }","properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(Text|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(Text|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"format":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/Dict"}],"description":"When used with the default `\\"number\\"` and `\\"time\\"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.\\n\\n- If the format type is `\\"number\\"` (e.g., for quantitative fields), this is D3\'s [number format pattern](https://github.com/d3/d3-format#locale_format).\\n- If the format type is `\\"time\\"` (e.g., for temporal fields), this is D3\'s [time format pattern](https://github.com/d3/d3-time-format#locale_format).\\n\\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.\\n\\nWhen used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.\\n\\n__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format."},"formatType":{"description":"The format type for labels. One of `\\"number\\"`, `\\"time\\"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).\\n\\n__Default value:__\\n- `\\"time\\"` for temporal fields and ordinal and nominal fields with `timeUnit`.\\n- `\\"number\\"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.","type":"string"},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"FieldOrDatumDefWithCondition<StringFieldDef,string>":{"additionalProperties":false,"description":"A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }","properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(string|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(string|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"format":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/Dict"}],"description":"When used with the default `\\"number\\"` and `\\"time\\"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.\\n\\n- If the format type is `\\"number\\"` (e.g., for quantitative fields), this is D3\'s [number format pattern](https://github.com/d3/d3-format#locale_format).\\n- If the format type is `\\"time\\"` (e.g., for temporal fields), this is D3\'s [time format pattern](https://github.com/d3/d3-time-format#locale_format).\\n\\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.\\n\\nWhen used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.\\n\\n__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format."},"formatType":{"description":"The format type for labels. One of `\\"number\\"`, `\\"time\\"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).\\n\\n__Default value:__\\n- `\\"time\\"` for temporal fields and ordinal and nominal fields with `timeUnit`.\\n- `\\"number\\"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.","type":"string"},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"FieldRangePredicate":{"additionalProperties":false,"properties":{"field":{"$ref":"#/definitions/FieldName","description":"Field to be tested."},"range":{"anyOf":[{"items":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/DateTime"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}]},"type":"array"},{"$ref":"#/definitions/ExprRef"}],"description":"An array of inclusive minimum and maximum values for a field value of a data item to be included in the filtered data.","maxItems":2,"minItems":2},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit for the field to be tested."}},"required":["field","range"],"type":"object"},"FieldValidPredicate":{"additionalProperties":false,"properties":{"field":{"$ref":"#/definitions/FieldName","description":"Field to be tested."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit for the field to be tested."},"valid":{"description":"If set to true the field\'s value has to be valid, meaning both not `null` and not [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).","type":"boolean"}},"required":["field","valid"],"type":"object"},"FilterTransform":{"additionalProperties":false,"properties":{"filter":{"$ref":"#/definitions/PredicateComposition","description":"The `filter` property must be a predication definition, which can take one of the following forms:\\n\\n1) an [expression](https://vega.github.io/vega-lite/docs/types.html#expression) string, where `datum` can be used to refer to the current data object. For example, `{filter: \\"datum.b2 > 60\\"}` would make the output data includes only items that have values in the field `b2` over 60.\\n\\n2) one of the [field predicates](https://vega.github.io/vega-lite/docs/predicate.html#field-predicate): [`equal`](https://vega.github.io/vega-lite/docs/predicate.html#field-equal-predicate), [`lt`](https://vega.github.io/vega-lite/docs/predicate.html#lt-predicate), [`lte`](https://vega.github.io/vega-lite/docs/predicate.html#lte-predicate), [`gt`](https://vega.github.io/vega-lite/docs/predicate.html#gt-predicate), [`gte`](https://vega.github.io/vega-lite/docs/predicate.html#gte-predicate), [`range`](https://vega.github.io/vega-lite/docs/predicate.html#range-predicate), [`oneOf`](https://vega.github.io/vega-lite/docs/predicate.html#one-of-predicate), or [`valid`](https://vega.github.io/vega-lite/docs/predicate.html#valid-predicate),\\n\\n3) a [selection predicate](https://vega.github.io/vega-lite/docs/predicate.html#selection-predicate), which define the names of a selection that the data point should belong to (or a logical composition of selections).\\n\\n4) a [logical composition](https://vega.github.io/vega-lite/docs/predicate.html#composition) of (1), (2), or (3)."}},"required":["filter"],"type":"object"},"Fit":{"anyOf":[{"$ref":"#/definitions/GeoJsonFeature"},{"$ref":"#/definitions/GeoJsonFeatureCollection"},{"items":{"$ref":"#/definitions/GeoJsonFeature"},"type":"array"}]},"FlattenTransform":{"additionalProperties":false,"properties":{"as":{"description":"The output field names for extracted array values.\\n\\n__Default value:__ The field name of the corresponding array field","items":{"$ref":"#/definitions/FieldName"},"type":"array"},"flatten":{"description":"An array of one or more data fields containing arrays to flatten. If multiple fields are specified, their array values should have a parallel structure, ideally with the same length. If the lengths of parallel arrays do not match, the longest array will be used with `null` values added for missing entries.","items":{"$ref":"#/definitions/FieldName"},"type":"array"}},"required":["flatten"],"type":"object"},"FoldTransform":{"additionalProperties":false,"properties":{"as":{"description":"The output field names for the key and value properties produced by the fold transform. __Default value:__ `[\\"key\\", \\"value\\"]`","items":{"$ref":"#/definitions/FieldName"},"maxItems":2,"minItems":2,"type":"array"},"fold":{"description":"An array of data fields indicating the properties to fold.","items":{"$ref":"#/definitions/FieldName"},"type":"array"}},"required":["fold"],"type":"object"},"FontStyle":{"type":"string"},"FontWeight":{"enum":["normal","bold","lighter","bolder",100,200,300,400,500,600,700,800,900],"type":["string","number"]},"Generator":{"anyOf":[{"$ref":"#/definitions/SequenceGenerator"},{"$ref":"#/definitions/SphereGenerator"},{"$ref":"#/definitions/GraticuleGenerator"}]},"ConcatSpec<GenericSpec>":{"additionalProperties":false,"description":"Base interface for a generalized concatenation specification.","properties":{"align":{"anyOf":[{"$ref":"#/definitions/LayoutAlign"},{"$ref":"#/definitions/RowCol<LayoutAlign>"}],"description":"The alignment to apply to grid rows and columns. The supported string values are `\\"all\\"`, `\\"each\\"`, and `\\"none\\"`.\\n\\n- For `\\"none\\"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\\n- For `\\"each\\"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\\n- For `\\"all\\"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\\n\\nAlternatively, an object value of the form `{\\"row\\": string, \\"column\\": string}` can be used to supply different alignments for rows and columns.\\n\\n__Default value:__ `\\"all\\"`."},"bounds":{"description":"The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\\n\\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\\n\\n__Default value:__ `\\"full\\"`","enum":["full","flush"],"type":"string"},"center":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/RowCol<boolean>"}],"description":"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\\n\\nAn object value of the form `{\\"row\\": boolean, \\"column\\": boolean}` can be used to supply different centering values for rows and columns.\\n\\n__Default value:__ `false`"},"columns":{"description":"The number of columns to include in the view composition layout.\\n\\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\\n\\n__Note__:\\n\\n1) This property is only for:\\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\\n\\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).","type":"number"},"concat":{"description":"A list of views to be concatenated.","items":{"$ref":"#/definitions/Spec"},"type":"array"},"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"name":{"description":"Name of the visualization for later reference.","type":"string"},"resolve":{"$ref":"#/definitions/Resolve","description":"Scale, axis, and legend resolutions for view composition specifications."},"spacing":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/RowCol<number>"}],"description":"The spacing in pixels between sub-views of the composition operator. An object of the form `{\\"row\\": number, \\"column\\": number}` can be used to set different spacing values for rows and columns.\\n\\n__Default value__: Depends on `\\"spacing\\"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)"},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"}},"required":["concat"],"type":"object"},"FacetSpec":{"additionalProperties":false,"description":"Base interface for a facet specification.","properties":{"align":{"anyOf":[{"$ref":"#/definitions/LayoutAlign"},{"$ref":"#/definitions/RowCol<LayoutAlign>"}],"description":"The alignment to apply to grid rows and columns. The supported string values are `\\"all\\"`, `\\"each\\"`, and `\\"none\\"`.\\n\\n- For `\\"none\\"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\\n- For `\\"each\\"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\\n- For `\\"all\\"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\\n\\nAlternatively, an object value of the form `{\\"row\\": string, \\"column\\": string}` can be used to supply different alignments for rows and columns.\\n\\n__Default value:__ `\\"all\\"`."},"bounds":{"description":"The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\\n\\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\\n\\n__Default value:__ `\\"full\\"`","enum":["full","flush"],"type":"string"},"center":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/RowCol<boolean>"}],"description":"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\\n\\nAn object value of the form `{\\"row\\": boolean, \\"column\\": boolean}` can be used to supply different centering values for rows and columns.\\n\\n__Default value:__ `false`"},"columns":{"description":"The number of columns to include in the view composition layout.\\n\\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\\n\\n__Note__:\\n\\n1) This property is only for:\\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\\n\\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).","type":"number"},"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"facet":{"anyOf":[{"$ref":"#/definitions/FacetFieldDef"},{"$ref":"#/definitions/FacetMapping"}],"description":"Definition for how to facet the data. One of: 1) [a field definition for faceting the plot by one field](https://vega.github.io/vega-lite/docs/facet.html#field-def) 2) [An object that maps `row` and `column` channels to their field definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)"},"name":{"description":"Name of the visualization for later reference.","type":"string"},"resolve":{"$ref":"#/definitions/Resolve","description":"Scale, axis, and legend resolutions for view composition specifications."},"spacing":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/RowCol<number>"}],"description":"The spacing in pixels between sub-views of the composition operator. An object of the form `{\\"row\\": number, \\"column\\": number}` can be used to set different spacing values for rows and columns.\\n\\n__Default value__: Depends on `\\"spacing\\"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)"},"spec":{"anyOf":[{"$ref":"#/definitions/LayerSpec"},{"$ref":"#/definitions/FacetedUnitSpec"}],"description":"A specification of the view that gets faceted."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"}},"required":["facet","spec"],"type":"object"},"HConcatSpec<GenericSpec>":{"additionalProperties":false,"description":"Base interface for a horizontal concatenation specification.","properties":{"bounds":{"description":"The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\\n\\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\\n\\n__Default value:__ `\\"full\\"`","enum":["full","flush"],"type":"string"},"center":{"description":"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\\n\\n__Default value:__ `false`","type":"boolean"},"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"hconcat":{"description":"A list of views to be concatenated and put into a row.","items":{"$ref":"#/definitions/Spec"},"type":"array"},"name":{"description":"Name of the visualization for later reference.","type":"string"},"resolve":{"$ref":"#/definitions/Resolve","description":"Scale, axis, and legend resolutions for view composition specifications."},"spacing":{"description":"The spacing in pixels between sub-views of the concat operator.\\n\\n__Default value__: `10`","type":"number"},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"}},"required":["hconcat"],"type":"object"},"Spec":{"anyOf":[{"$ref":"#/definitions/FacetedUnitSpec"},{"$ref":"#/definitions/LayerSpec"},{"$ref":"#/definitions/RepeatSpec"},{"$ref":"#/definitions/FacetSpec"},{"$ref":"#/definitions/ConcatSpec<GenericSpec>"},{"$ref":"#/definitions/VConcatSpec<GenericSpec>"},{"$ref":"#/definitions/HConcatSpec<GenericSpec>"}],"description":"Any specification in Vega-Lite."},"GenericUnitSpec<Encoding,AnyMark>":{"additionalProperties":false,"description":"Base interface for a unit (single-view) specification.","properties":{"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"encoding":{"$ref":"#/definitions/Encoding","description":"A key-value mapping between encoding channels and definition of fields."},"mark":{"$ref":"#/definitions/AnyMark","description":"A string describing the mark type (one of `\\"bar\\"`, `\\"circle\\"`, `\\"square\\"`, `\\"tick\\"`, `\\"line\\"`, `\\"area\\"`, `\\"point\\"`, `\\"rule\\"`, `\\"geoshape\\"`, and `\\"text\\"`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def)."},"name":{"description":"Name of the visualization for later reference.","type":"string"},"params":{"description":"An array of parameters that may either be simple variables, or more complex selections that map user input to data queries.","items":{"anyOf":[{"$ref":"#/definitions/VariableParameter"},{"$ref":"#/definitions/SelectionParameter"}]},"type":"array"},"projection":{"$ref":"#/definitions/Projection","description":"An object defining properties of geographic projection, which will be applied to `shape` path for `\\"geoshape\\"` marks and to `latitude` and `\\"longitude\\"` channels for other marks."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"}},"required":["mark"],"type":"object"},"VConcatSpec<GenericSpec>":{"additionalProperties":false,"description":"Base interface for a vertical concatenation specification.","properties":{"bounds":{"description":"The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\\n\\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\\n\\n__Default value:__ `\\"full\\"`","enum":["full","flush"],"type":"string"},"center":{"description":"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\\n\\n__Default value:__ `false`","type":"boolean"},"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"name":{"description":"Name of the visualization for later reference.","type":"string"},"resolve":{"$ref":"#/definitions/Resolve","description":"Scale, axis, and legend resolutions for view composition specifications."},"spacing":{"description":"The spacing in pixels between sub-views of the concat operator.\\n\\n__Default value__: `10`","type":"number"},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"},"vconcat":{"description":"A list of views to be concatenated and put into a column.","items":{"$ref":"#/definitions/Spec"},"type":"array"}},"required":["vconcat"],"type":"object"},"GeoJsonFeature":{},"GeoJsonFeatureCollection":{},"Gradient":{"anyOf":[{"$ref":"#/definitions/LinearGradient"},{"$ref":"#/definitions/RadialGradient"}]},"GradientStop":{"additionalProperties":false,"properties":{"color":{"$ref":"#/definitions/Color","description":"The color value at this point in the gradient."},"offset":{"description":"The offset fraction for the color stop, indicating its position within the gradient.","type":"number"}},"required":["offset","color"],"type":"object"},"GraticuleGenerator":{"additionalProperties":false,"properties":{"graticule":{"anyOf":[{"const":true,"type":"boolean"},{"$ref":"#/definitions/GraticuleParams"}],"description":"Generate graticule GeoJSON data for geographic reference lines."},"name":{"description":"Provide a placeholder name and bind data at runtime.","type":"string"}},"required":["graticule"],"type":"object"},"GraticuleParams":{"additionalProperties":false,"properties":{"extent":{"$ref":"#/definitions/Vector2<Vector2<number>>","description":"Sets both the major and minor extents to the same values."},"extentMajor":{"$ref":"#/definitions/Vector2<Vector2<number>>","description":"The major extent of the graticule as a two-element array of coordinates."},"extentMinor":{"$ref":"#/definitions/Vector2<Vector2<number>>","description":"The minor extent of the graticule as a two-element array of coordinates."},"precision":{"description":"The precision of the graticule in degrees.\\n\\n__Default value:__ `2.5`","type":"number"},"step":{"$ref":"#/definitions/Vector2<number>","description":"Sets both the major and minor step angles to the same values."},"stepMajor":{"$ref":"#/definitions/Vector2<number>","description":"The major step angles of the graticule.\\n\\n\\n__Default value:__ `[90, 360]`"},"stepMinor":{"$ref":"#/definitions/Vector2<number>","description":"The minor step angles of the graticule.\\n\\n__Default value:__ `[10, 10]`"}},"type":"object"},"Header":{"additionalProperties":false,"description":"Headers of row / column channels for faceted plots.","properties":{"format":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/Dict"}],"description":"When used with the default `\\"number\\"` and `\\"time\\"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.\\n\\n- If the format type is `\\"number\\"` (e.g., for quantitative fields), this is D3\'s [number format pattern](https://github.com/d3/d3-format#locale_format).\\n- If the format type is `\\"time\\"` (e.g., for temporal fields), this is D3\'s [time format pattern](https://github.com/d3/d3-time-format#locale_format).\\n\\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.\\n\\nWhen used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.\\n\\n__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format."},"formatType":{"description":"The format type for labels. One of `\\"number\\"`, `\\"time\\"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).\\n\\n__Default value:__\\n- `\\"time\\"` for temporal fields and ordinal and nominal fields with `timeUnit`.\\n- `\\"number\\"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.","type":"string"},"labelAlign":{"anyOf":[{"$ref":"#/definitions/Align"},{"$ref":"#/definitions/ExprRef"}],"description":"Horizontal text alignment of header labels. One of `\\"left\\"`, `\\"center\\"`, or `\\"right\\"`."},"labelAnchor":{"$ref":"#/definitions/TitleAnchor","description":"The anchor position for placing the labels. One of `\\"start\\"`, `\\"middle\\"`, or `\\"end\\"`. For example, with a label orientation of top these anchor positions map to a left-, center-, or right-aligned label."},"labelAngle":{"description":"The rotation angle of the header labels.\\n\\n__Default value:__ `0` for column header, `-90` for row header.","maximum":360,"minimum":-360,"type":"number"},"labelBaseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline"},{"$ref":"#/definitions/ExprRef"}],"description":"The vertical text baseline for the header labels. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, or `\\"line-bottom\\"`. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone."},"labelColor":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/ExprRef"}],"description":"The color of the header label, can be in hex color code or regular color name."},"labelExpr":{"description":"[Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.\\n\\n__Note:__ The label text and value can be assessed via the `label` and `value` properties of the header\'s backing `datum` object.","type":"string"},"labelFont":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"The font of the header label."},"labelFontSize":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The font size of the header label, in pixels.","minimum":0},"labelFontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle"},{"$ref":"#/definitions/ExprRef"}],"description":"The font style of the header label."},"labelFontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight"},{"$ref":"#/definitions/ExprRef"}],"description":"The font weight of the header label."},"labelLimit":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The maximum length of the header label in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\\n\\n__Default value:__ `0`, indicating no limit"},"labelLineHeight":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Line height in pixels for multi-line header labels or title text with `\\"line-top\\"` or `\\"line-bottom\\"` baseline."},"labelOrient":{"$ref":"#/definitions/Orient","description":"The orientation of the header label. One of `\\"top\\"`, `\\"bottom\\"`, `\\"left\\"` or `\\"right\\"`."},"labelPadding":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The padding, in pixel, between facet header\'s label and the plot.\\n\\n__Default value:__ `10`"},"labels":{"description":"A boolean flag indicating if labels should be included as part of the header.\\n\\n__Default value:__ `true`.","type":"boolean"},"orient":{"$ref":"#/definitions/Orient","description":"Shortcut for setting both labelOrient and titleOrient."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"titleAlign":{"anyOf":[{"$ref":"#/definitions/Align"},{"$ref":"#/definitions/ExprRef"}],"description":"Horizontal text alignment (to the anchor) of header titles."},"titleAnchor":{"$ref":"#/definitions/TitleAnchor","description":"The anchor position for placing the title. One of `\\"start\\"`, `\\"middle\\"`, or `\\"end\\"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title."},"titleAngle":{"description":"The rotation angle of the header title.\\n\\n__Default value:__ `0`.","maximum":360,"minimum":-360,"type":"number"},"titleBaseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline"},{"$ref":"#/definitions/ExprRef"}],"description":"The vertical text baseline for the header title. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, or `\\"line-bottom\\"`. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone.\\n\\n__Default value:__ `\\"middle\\"`"},"titleColor":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/ExprRef"}],"description":"Color of the header title, can be in hex color code or regular color name."},"titleFont":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Font of the header title. (e.g., `\\"Helvetica Neue\\"`)."},"titleFontSize":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Font size of the header title.","minimum":0},"titleFontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle"},{"$ref":"#/definitions/ExprRef"}],"description":"The font style of the header title."},"titleFontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight"},{"$ref":"#/definitions/ExprRef"}],"description":"Font weight of the header title. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},"titleLimit":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The maximum length of the header title in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\\n\\n__Default value:__ `0`, indicating no limit"},"titleLineHeight":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Line height in pixels for multi-line header title text or title text with `\\"line-top\\"` or `\\"line-bottom\\"` baseline."},"titleOrient":{"$ref":"#/definitions/Orient","description":"The orientation of the header title. One of `\\"top\\"`, `\\"bottom\\"`, `\\"left\\"` or `\\"right\\"`."},"titlePadding":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The padding, in pixel, between facet header\'s title and the label.\\n\\n__Default value:__ `10`"}},"type":"object"},"HeaderConfig":{"additionalProperties":false,"properties":{"format":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/Dict"}],"description":"When used with the default `\\"number\\"` and `\\"time\\"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.\\n\\n- If the format type is `\\"number\\"` (e.g., for quantitative fields), this is D3\'s [number format pattern](https://github.com/d3/d3-format#locale_format).\\n- If the format type is `\\"time\\"` (e.g., for temporal fields), this is D3\'s [time format pattern](https://github.com/d3/d3-time-format#locale_format).\\n\\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.\\n\\nWhen used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.\\n\\n__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format."},"formatType":{"description":"The format type for labels. One of `\\"number\\"`, `\\"time\\"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).\\n\\n__Default value:__\\n- `\\"time\\"` for temporal fields and ordinal and nominal fields with `timeUnit`.\\n- `\\"number\\"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.","type":"string"},"labelAlign":{"anyOf":[{"$ref":"#/definitions/Align"},{"$ref":"#/definitions/ExprRef"}],"description":"Horizontal text alignment of header labels. One of `\\"left\\"`, `\\"center\\"`, or `\\"right\\"`."},"labelAnchor":{"$ref":"#/definitions/TitleAnchor","description":"The anchor position for placing the labels. One of `\\"start\\"`, `\\"middle\\"`, or `\\"end\\"`. For example, with a label orientation of top these anchor positions map to a left-, center-, or right-aligned label."},"labelAngle":{"description":"The rotation angle of the header labels.\\n\\n__Default value:__ `0` for column header, `-90` for row header.","maximum":360,"minimum":-360,"type":"number"},"labelBaseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline"},{"$ref":"#/definitions/ExprRef"}],"description":"The vertical text baseline for the header labels. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, or `\\"line-bottom\\"`. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone."},"labelColor":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/ExprRef"}],"description":"The color of the header label, can be in hex color code or regular color name."},"labelExpr":{"description":"[Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.\\n\\n__Note:__ The label text and value can be assessed via the `label` and `value` properties of the header\'s backing `datum` object.","type":"string"},"labelFont":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"The font of the header label."},"labelFontSize":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The font size of the header label, in pixels.","minimum":0},"labelFontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle"},{"$ref":"#/definitions/ExprRef"}],"description":"The font style of the header label."},"labelFontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight"},{"$ref":"#/definitions/ExprRef"}],"description":"The font weight of the header label."},"labelLimit":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The maximum length of the header label in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\\n\\n__Default value:__ `0`, indicating no limit"},"labelLineHeight":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Line height in pixels for multi-line header labels or title text with `\\"line-top\\"` or `\\"line-bottom\\"` baseline."},"labelOrient":{"$ref":"#/definitions/Orient","description":"The orientation of the header label. One of `\\"top\\"`, `\\"bottom\\"`, `\\"left\\"` or `\\"right\\"`."},"labelPadding":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The padding, in pixel, between facet header\'s label and the plot.\\n\\n__Default value:__ `10`"},"labels":{"description":"A boolean flag indicating if labels should be included as part of the header.\\n\\n__Default value:__ `true`.","type":"boolean"},"orient":{"$ref":"#/definitions/Orient","description":"Shortcut for setting both labelOrient and titleOrient."},"title":{"description":"Set to null to disable title for the axis, legend, or header.","type":"null"},"titleAlign":{"anyOf":[{"$ref":"#/definitions/Align"},{"$ref":"#/definitions/ExprRef"}],"description":"Horizontal text alignment (to the anchor) of header titles."},"titleAnchor":{"$ref":"#/definitions/TitleAnchor","description":"The anchor position for placing the title. One of `\\"start\\"`, `\\"middle\\"`, or `\\"end\\"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title."},"titleAngle":{"description":"The rotation angle of the header title.\\n\\n__Default value:__ `0`.","maximum":360,"minimum":-360,"type":"number"},"titleBaseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline"},{"$ref":"#/definitions/ExprRef"}],"description":"The vertical text baseline for the header title. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, or `\\"line-bottom\\"`. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone.\\n\\n__Default value:__ `\\"middle\\"`"},"titleColor":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/ExprRef"}],"description":"Color of the header title, can be in hex color code or regular color name."},"titleFont":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Font of the header title. (e.g., `\\"Helvetica Neue\\"`)."},"titleFontSize":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Font size of the header title.","minimum":0},"titleFontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle"},{"$ref":"#/definitions/ExprRef"}],"description":"The font style of the header title."},"titleFontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight"},{"$ref":"#/definitions/ExprRef"}],"description":"Font weight of the header title. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},"titleLimit":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The maximum length of the header title in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\\n\\n__Default value:__ `0`, indicating no limit"},"titleLineHeight":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Line height in pixels for multi-line header title text or title text with `\\"line-top\\"` or `\\"line-bottom\\"` baseline."},"titleOrient":{"$ref":"#/definitions/Orient","description":"The orientation of the header title. One of `\\"top\\"`, `\\"bottom\\"`, `\\"left\\"` or `\\"right\\"`."},"titlePadding":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The padding, in pixel, between facet header\'s title and the label.\\n\\n__Default value:__ `10`"}},"type":"object"},"HexColor":{"format":"color-hex","type":"string"},"ImputeMethod":{"enum":["value","median","max","min","mean"],"type":"string"},"ImputeParams":{"additionalProperties":false,"properties":{"frame":{"description":"A frame specification as a two-element array used to control the window over which the specified method is applied. The array entries should either be a number indicating the offset from the current data object, or null to indicate unbounded rows preceding or following the current data object. For example, the value `[-5, 5]` indicates that the window should include five objects preceding and five objects following the current object.\\n\\n__Default value:__:  `[null, null]` indicating that the window includes all objects.","items":{"type":["null","number"]},"maxItems":2,"minItems":2,"type":"array"},"keyvals":{"anyOf":[{"items":{},"type":"array"},{"$ref":"#/definitions/ImputeSequence"}],"description":"Defines the key values that should be considered for imputation. An array of key values or an object defining a [number sequence](https://vega.github.io/vega-lite/docs/impute.html#sequence-def).\\n\\nIf provided, this will be used in addition to the key values observed within the input data. If not provided, the values will be derived from all unique values of the `key` field. For `impute` in `encoding`, the key field is the x-field if the y-field is imputed, or vice versa.\\n\\nIf there is no impute grouping, this property _must_ be specified."},"method":{"$ref":"#/definitions/ImputeMethod","description":"The imputation method to use for the field value of imputed data objects. One of `\\"value\\"`, `\\"mean\\"`, `\\"median\\"`, `\\"max\\"` or `\\"min\\"`.\\n\\n__Default value:__  `\\"value\\"`"},"value":{"description":"The field value to use when the imputation `method` is `\\"value\\"`."}},"type":"object"},"ImputeSequence":{"additionalProperties":false,"properties":{"start":{"description":"The starting value of the sequence. __Default value:__ `0`","type":"number"},"step":{"description":"The step value between sequence entries. __Default value:__ `1` or `-1` if `stop < start`","type":"number"},"stop":{"description":"The ending value(exclusive) of the sequence.","type":"number"}},"required":["stop"],"type":"object"},"ImputeTransform":{"additionalProperties":false,"properties":{"frame":{"description":"A frame specification as a two-element array used to control the window over which the specified method is applied. The array entries should either be a number indicating the offset from the current data object, or null to indicate unbounded rows preceding or following the current data object. For example, the value `[-5, 5]` indicates that the window should include five objects preceding and five objects following the current object.\\n\\n__Default value:__:  `[null, null]` indicating that the window includes all objects.","items":{"type":["null","number"]},"maxItems":2,"minItems":2,"type":"array"},"groupby":{"description":"An optional array of fields by which to group the values. Imputation will then be performed on a per-group basis.","items":{"$ref":"#/definitions/FieldName"},"type":"array"},"impute":{"$ref":"#/definitions/FieldName","description":"The data field for which the missing values should be imputed."},"key":{"$ref":"#/definitions/FieldName","description":"A key field that uniquely identifies data objects within a group. Missing key values (those occurring in the data but not in the current group) will be imputed."},"keyvals":{"anyOf":[{"items":{},"type":"array"},{"$ref":"#/definitions/ImputeSequence"}],"description":"Defines the key values that should be considered for imputation. An array of key values or an object defining a [number sequence](https://vega.github.io/vega-lite/docs/impute.html#sequence-def).\\n\\nIf provided, this will be used in addition to the key values observed within the input data. If not provided, the values will be derived from all unique values of the `key` field. For `impute` in `encoding`, the key field is the x-field if the y-field is imputed, or vice versa.\\n\\nIf there is no impute grouping, this property _must_ be specified."},"method":{"$ref":"#/definitions/ImputeMethod","description":"The imputation method to use for the field value of imputed data objects. One of `\\"value\\"`, `\\"mean\\"`, `\\"median\\"`, `\\"max\\"` or `\\"min\\"`.\\n\\n__Default value:__  `\\"value\\"`"},"value":{"description":"The field value to use when the imputation `method` is `\\"value\\"`."}},"required":["impute","key"],"type":"object"},"InlineData":{"additionalProperties":false,"properties":{"format":{"$ref":"#/definitions/DataFormat","description":"An object that specifies the format for parsing the data."},"name":{"description":"Provide a placeholder name and bind data at runtime.","type":"string"},"values":{"$ref":"#/definitions/InlineDataset","description":"The full data set, included inline. This can be an array of objects or primitive values, an object, or a string. Arrays of primitive values are ingested as objects with a `data` property. Strings are parsed according to the specified format type."}},"required":["values"],"type":"object"},"InlineDataset":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"items":{"type":"string"},"type":"array"},{"items":{"type":"boolean"},"type":"array"},{"items":{"type":"object"},"type":"array"},{"type":"string"},{"type":"object"}]},"Interpolate":{"enum":["basis","basis-open","basis-closed","bundle","cardinal","cardinal-open","cardinal-closed","catmull-rom","linear","linear-closed","monotone","natural","step","step-before","step-after"],"type":"string"},"IntervalSelectionConfig":{"additionalProperties":false,"properties":{"clear":{"anyOf":[{"$ref":"#/definitions/Stream"},{"type":"string"},{"type":"boolean"}],"description":"Clears the selection, emptying it of all values. This property can be a [Event Stream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable clear.\\n\\n__Default value:__ `dblclick`.\\n\\n__See also:__ [`clear` examples ](https://vega.github.io/vega-lite/docs/selection.html#clear) in the documentation."},"encodings":{"description":"An array of encoding channels. The corresponding data field values must match for a data tuple to fall within the selection.\\n\\n__See also:__ The [projection with `encodings` and `fields` section](https://vega.github.io/vega-lite/docs/selection.html#project) in the documentation.","items":{"$ref":"#/definitions/SingleDefUnitChannel"},"type":"array"},"fields":{"description":"An array of field names whose values must match for a data tuple to fall within the selection.\\n\\n__See also:__ The [projection with `encodings` and `fields` section](https://vega.github.io/vega-lite/docs/selection.html#project) in the documentation.","items":{"$ref":"#/definitions/FieldName"},"type":"array"},"mark":{"$ref":"#/definitions/BrushConfig","description":"An interval selection also adds a rectangle mark to depict the extents of the interval. The `mark` property can be used to customize the appearance of the mark.\\n\\n__See also:__ [`mark` examples](https://vega.github.io/vega-lite/docs/selection.html#mark) in the documentation."},"on":{"anyOf":[{"$ref":"#/definitions/Stream"},{"type":"string"}],"description":"A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection. For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).\\n\\n__See also:__ [`on` examples](https://vega.github.io/vega-lite/docs/selection.html#on) in the documentation."},"resolve":{"$ref":"#/definitions/SelectionResolution","description":"With layered and multi-view displays, a strategy that determines how selections\' data queries are resolved when applied in a filter transform, conditional encoding rule, or scale domain.\\n\\nOne of:\\n- `\\"global\\"` -- only one brush exists for the entire SPLOM. When the user begins to drag, any previous brushes are cleared, and a new one is constructed.\\n- `\\"union\\"` -- each cell contains its own brush, and points are highlighted if they lie within _any_ of these individual brushes.\\n- `\\"intersect\\"` -- each cell contains its own brush, and points are highlighted only if they fall within _all_ of these individual brushes.\\n\\n__Default value:__ `global`.\\n\\n__See also:__ [`resolve` examples](https://vega.github.io/vega-lite/docs/selection.html#resolve) in the documentation."},"translate":{"description":"When truthy, allows a user to interactively move an interval selection back-and-forth. Can be `true`, `false` (to disable panning), or a [Vega event stream definition](https://vega.github.io/vega/docs/event-streams/) which must include a start and end event to trigger continuous panning. Discrete panning (e.g., pressing the left/right arrow keys) will be supported in future versions.\\n\\n__Default value:__ `true`, which corresponds to `[mousedown, window:mouseup] > window:mousemove!`. This default allows users to clicks and drags within an interval selection to reposition it.\\n\\n__See also:__ [`translate` examples](https://vega.github.io/vega-lite/docs/selection.html#translate) in the documentation.","type":["string","boolean"]},"type":{"const":"interval","description":"Determines the default event processing and data query for the selection. Vega-Lite currently supports two selection types:\\n\\n- `\\"point\\"` -- to select multiple discrete data values; the first value is selected on `click` and additional values toggled on shift-click.\\n- `\\"interval\\"` -- to select a continuous range of data values on `drag`.","type":"string"},"zoom":{"description":"When truthy, allows a user to interactively resize an interval selection. Can be `true`, `false` (to disable zooming), or a [Vega event stream definition](https://vega.github.io/vega/docs/event-streams/). Currently, only `wheel` events are supported, but custom event streams can still be used to specify filters, debouncing, and throttling. Future versions will expand the set of events that can trigger this transformation.\\n\\n__Default value:__ `true`, which corresponds to `wheel!`. This default allows users to use the mouse wheel to resize an interval selection.\\n\\n__See also:__ [`zoom` examples](https://vega.github.io/vega-lite/docs/selection.html#zoom) in the documentation.","type":["string","boolean"]}},"required":["type"],"type":"object"},"IntervalSelectionConfigWithoutType":{"additionalProperties":false,"properties":{"clear":{"anyOf":[{"$ref":"#/definitions/Stream"},{"type":"string"},{"type":"boolean"}],"description":"Clears the selection, emptying it of all values. This property can be a [Event Stream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable clear.\\n\\n__Default value:__ `dblclick`.\\n\\n__See also:__ [`clear` examples ](https://vega.github.io/vega-lite/docs/selection.html#clear) in the documentation."},"encodings":{"description":"An array of encoding channels. The corresponding data field values must match for a data tuple to fall within the selection.\\n\\n__See also:__ The [projection with `encodings` and `fields` section](https://vega.github.io/vega-lite/docs/selection.html#project) in the documentation.","items":{"$ref":"#/definitions/SingleDefUnitChannel"},"type":"array"},"fields":{"description":"An array of field names whose values must match for a data tuple to fall within the selection.\\n\\n__See also:__ The [projection with `encodings` and `fields` section](https://vega.github.io/vega-lite/docs/selection.html#project) in the documentation.","items":{"$ref":"#/definitions/FieldName"},"type":"array"},"mark":{"$ref":"#/definitions/BrushConfig","description":"An interval selection also adds a rectangle mark to depict the extents of the interval. The `mark` property can be used to customize the appearance of the mark.\\n\\n__See also:__ [`mark` examples](https://vega.github.io/vega-lite/docs/selection.html#mark) in the documentation."},"on":{"anyOf":[{"$ref":"#/definitions/Stream"},{"type":"string"}],"description":"A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection. For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).\\n\\n__See also:__ [`on` examples](https://vega.github.io/vega-lite/docs/selection.html#on) in the documentation."},"resolve":{"$ref":"#/definitions/SelectionResolution","description":"With layered and multi-view displays, a strategy that determines how selections\' data queries are resolved when applied in a filter transform, conditional encoding rule, or scale domain.\\n\\nOne of:\\n- `\\"global\\"` -- only one brush exists for the entire SPLOM. When the user begins to drag, any previous brushes are cleared, and a new one is constructed.\\n- `\\"union\\"` -- each cell contains its own brush, and points are highlighted if they lie within _any_ of these individual brushes.\\n- `\\"intersect\\"` -- each cell contains its own brush, and points are highlighted only if they fall within _all_ of these individual brushes.\\n\\n__Default value:__ `global`.\\n\\n__See also:__ [`resolve` examples](https://vega.github.io/vega-lite/docs/selection.html#resolve) in the documentation."},"translate":{"description":"When truthy, allows a user to interactively move an interval selection back-and-forth. Can be `true`, `false` (to disable panning), or a [Vega event stream definition](https://vega.github.io/vega/docs/event-streams/) which must include a start and end event to trigger continuous panning. Discrete panning (e.g., pressing the left/right arrow keys) will be supported in future versions.\\n\\n__Default value:__ `true`, which corresponds to `[mousedown, window:mouseup] > window:mousemove!`. This default allows users to clicks and drags within an interval selection to reposition it.\\n\\n__See also:__ [`translate` examples](https://vega.github.io/vega-lite/docs/selection.html#translate) in the documentation.","type":["string","boolean"]},"zoom":{"description":"When truthy, allows a user to interactively resize an interval selection. Can be `true`, `false` (to disable zooming), or a [Vega event stream definition](https://vega.github.io/vega/docs/event-streams/). Currently, only `wheel` events are supported, but custom event streams can still be used to specify filters, debouncing, and throttling. Future versions will expand the set of events that can trigger this transformation.\\n\\n__Default value:__ `true`, which corresponds to `wheel!`. This default allows users to use the mouse wheel to resize an interval selection.\\n\\n__See also:__ [`zoom` examples](https://vega.github.io/vega-lite/docs/selection.html#zoom) in the documentation.","type":["string","boolean"]}},"type":"object"},"JoinAggregateFieldDef":{"additionalProperties":false,"properties":{"as":{"$ref":"#/definitions/FieldName","description":"The output name for the join aggregate operation."},"field":{"$ref":"#/definitions/FieldName","description":"The data field for which to compute the aggregate function. This can be omitted for functions that do not operate over a field such as `\\"count\\"`."},"op":{"$ref":"#/definitions/AggregateOp","description":"The aggregation operation to apply (e.g., `\\"sum\\"`, `\\"average\\"` or `\\"count\\"`). See the list of all supported operations [here](https://vega.github.io/vega-lite/docs/aggregate.html#ops)."}},"required":["op","as"],"type":"object"},"JoinAggregateTransform":{"additionalProperties":false,"properties":{"groupby":{"description":"The data fields for partitioning the data objects into separate groups. If unspecified, all data points will be in a single group.","items":{"$ref":"#/definitions/FieldName"},"type":"array"},"joinaggregate":{"description":"The definition of the fields in the join aggregate, and what calculations to use.","items":{"$ref":"#/definitions/JoinAggregateFieldDef"},"type":"array"}},"required":["joinaggregate"],"type":"object"},"JsonDataFormat":{"additionalProperties":false,"properties":{"parse":{"anyOf":[{"$ref":"#/definitions/Parse"},{"type":"null"}],"description":"If set to `null`, disable type inference based on the spec and only use type inference based on the data. Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `\\"number\\"`, `\\"boolean\\"`, `\\"date\\"`, or null (do not parse the field)). For example, `\\"parse\\": {\\"modified_on\\": \\"date\\"}` parses the `modified_on` field in each input record a Date value.\\n\\nFor `\\"date\\"`, we parse data based using JavaScript\'s [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse). For Specific date formats can be provided (e.g., `{foo: \\"date:\'%m%d%Y\'\\"}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: \\"utc:\'%m%d%Y\'\\"}`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)"},"property":{"description":"The JSON property containing the desired data. This parameter can be used when the loaded JSON file may have surrounding structure or meta-data. For example `\\"property\\": \\"values.features\\"` is equivalent to retrieving `json.values.features` from the loaded JSON object.","type":"string"},"type":{"const":"json","description":"Type of input data: `\\"json\\"`, `\\"csv\\"`, `\\"tsv\\"`, `\\"dsv\\"`.\\n\\n__Default value:__  The default format type is determined by the extension of the file URL. If no extension is detected, `\\"json\\"` will be used by default.","type":"string"}},"type":"object"},"LabelOverlap":{"anyOf":[{"type":"boolean"},{"const":"parity","type":"string"},{"const":"greedy","type":"string"}]},"LatLongDef":{"anyOf":[{"$ref":"#/definitions/LatLongFieldDef"},{"$ref":"#/definitions/DatumDef"}]},"LatLongFieldDef":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.","type":"null"},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"const":"quantitative","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.","type":"string"}},"type":"object"},"LayerRepeatMapping":{"additionalProperties":false,"properties":{"column":{"description":"An array of fields to be repeated horizontally.","items":{"type":"string"},"type":"array"},"layer":{"description":"An array of fields to be repeated as layers.","items":{"type":"string"},"type":"array"},"row":{"description":"An array of fields to be repeated vertically.","items":{"type":"string"},"type":"array"}},"required":["layer"],"type":"object"},"LayerRepeatSpec":{"additionalProperties":false,"properties":{"align":{"anyOf":[{"$ref":"#/definitions/LayoutAlign"},{"$ref":"#/definitions/RowCol<LayoutAlign>"}],"description":"The alignment to apply to grid rows and columns. The supported string values are `\\"all\\"`, `\\"each\\"`, and `\\"none\\"`.\\n\\n- For `\\"none\\"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\\n- For `\\"each\\"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\\n- For `\\"all\\"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\\n\\nAlternatively, an object value of the form `{\\"row\\": string, \\"column\\": string}` can be used to supply different alignments for rows and columns.\\n\\n__Default value:__ `\\"all\\"`."},"bounds":{"description":"The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\\n\\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\\n\\n__Default value:__ `\\"full\\"`","enum":["full","flush"],"type":"string"},"center":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/RowCol<boolean>"}],"description":"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\\n\\nAn object value of the form `{\\"row\\": boolean, \\"column\\": boolean}` can be used to supply different centering values for rows and columns.\\n\\n__Default value:__ `false`"},"columns":{"description":"The number of columns to include in the view composition layout.\\n\\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\\n\\n__Note__:\\n\\n1) This property is only for:\\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\\n\\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).","type":"number"},"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"name":{"description":"Name of the visualization for later reference.","type":"string"},"repeat":{"$ref":"#/definitions/LayerRepeatMapping","description":"Definition for fields to be repeated. One of: 1) An array of fields to be repeated. If `\\"repeat\\"` is an array, the field can be referred to as `{\\"repeat\\": \\"repeat\\"}`. The repeated views are laid out in a wrapped row. You can set the number of columns to control the wrapping. 2) An object that maps `\\"row\\"` and/or `\\"column\\"` to the listed fields to be repeated along the particular orientations. The objects `{\\"repeat\\": \\"row\\"}` and `{\\"repeat\\": \\"column\\"}` can be used to refer to the repeated field respectively."},"resolve":{"$ref":"#/definitions/Resolve","description":"Scale, axis, and legend resolutions for view composition specifications."},"spacing":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/RowCol<number>"}],"description":"The spacing in pixels between sub-views of the composition operator. An object of the form `{\\"row\\": number, \\"column\\": number}` can be used to set different spacing values for rows and columns.\\n\\n__Default value__: Depends on `\\"spacing\\"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)"},"spec":{"anyOf":[{"$ref":"#/definitions/LayerSpec"},{"$ref":"#/definitions/UnitSpec"}],"description":"A specification of the view that gets repeated."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"}},"required":["repeat","spec"],"type":"object"},"LayerSpec":{"additionalProperties":false,"description":"A full layered plot specification, which may contains `encoding` and `projection` properties that will be applied to underlying unit (single-view) specifications.","properties":{"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"encoding":{"$ref":"#/definitions/SharedEncoding","description":"A shared key-value mapping between encoding channels and definition of fields in the underlying layers."},"height":{"anyOf":[{"type":"number"},{"const":"container","type":"string"},{"$ref":"#/definitions/Step"}],"description":"The height of a visualization.\\n\\n- For a plot with a continuous y-field, height should be a number.\\n- For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)\\n- To enable responsive sizing on height, it should be set to `\\"container\\"`.\\n\\n__Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous y-field and `config.view.discreteHeight` otherwise.\\n\\n__Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the `\\"container\\"` option cannot be used.\\n\\n__See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation."},"layer":{"description":"Layer or single view specifications to be layered.\\n\\n__Note__: Specifications inside `layer` cannot use `row` and `column` channels as layering facet specifications is not allowed. Instead, use the [facet operator](https://vega.github.io/vega-lite/docs/facet.html) and place a layer inside a facet.","items":{"anyOf":[{"$ref":"#/definitions/LayerSpec"},{"$ref":"#/definitions/UnitSpec"}]},"type":"array"},"name":{"description":"Name of the visualization for later reference.","type":"string"},"projection":{"$ref":"#/definitions/Projection","description":"An object defining properties of the geographic projection shared by underlying layers."},"resolve":{"$ref":"#/definitions/Resolve","description":"Scale, axis, and legend resolutions for view composition specifications."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"},"view":{"$ref":"#/definitions/ViewBackground","description":"An object defining the view background\'s fill and stroke.\\n\\n__Default value:__ none (transparent)"},"width":{"anyOf":[{"type":"number"},{"const":"container","type":"string"},{"$ref":"#/definitions/Step"}],"description":"The width of a visualization.\\n\\n- For a plot with a continuous x-field, width should be a number.\\n- For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)\\n- To enable responsive sizing on width, it should be set to `\\"container\\"`.\\n\\n__Default value:__ Based on `config.view.continuousWidth` for a plot with a continuous x-field and `config.view.discreteWidth` otherwise.\\n\\n__Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the `\\"container\\"` option cannot be used.\\n\\n__See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation."}},"required":["layer"],"type":"object"},"LayoutAlign":{"enum":["all","each","none"],"type":"string"},"Legend":{"additionalProperties":false,"description":"Properties of a legend or boolean flag for determining whether to show it.","properties":{"aria":{"anyOf":[{"description":"A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \\"aria-hidden\\" attribute will be set on the output SVG group, removing the legend from the ARIA accessibility tree.\\n\\n__Default value:__ `true`","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"clipHeight":{"anyOf":[{"description":"The height in pixels to clip symbol legend entries and limit their size.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"columnPadding":{"anyOf":[{"description":"The horizontal padding in pixels between symbol legend entries.\\n\\n__Default value:__ `10`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"columns":{"anyOf":[{"description":"The number of columns in which to arrange symbol legend entries. A value of `0` or lower indicates a single row with one column per entry.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadius":{"anyOf":[{"description":"Corner radius for the full legend.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"description":{"anyOf":[{"description":"A text description of this legend for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If the `aria` property is true, for SVG output the [\\"aria-label\\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute) will be set to this description. If the description is unspecified it will be automatically generated.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"direction":{"$ref":"#/definitions/Orientation","description":"The direction of the legend, one of `\\"vertical\\"` or `\\"horizontal\\"`.\\n\\n__Default value:__\\n- For top-/bottom-`orient`ed legends, `\\"horizontal\\"`\\n- For left-/right-`orient`ed legends, `\\"vertical\\"`\\n- For top/bottom-left/right-`orient`ed legends, `\\"horizontal\\"` for gradient legends and `\\"vertical\\"` for symbol legends."},"fillColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Background fill color for the full legend."},{"$ref":"#/definitions/ExprRef"}]},"format":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/Dict"}],"description":"When used with the default `\\"number\\"` and `\\"time\\"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.\\n\\n- If the format type is `\\"number\\"` (e.g., for quantitative fields), this is D3\'s [number format pattern](https://github.com/d3/d3-format#locale_format).\\n- If the format type is `\\"time\\"` (e.g., for temporal fields), this is D3\'s [time format pattern](https://github.com/d3/d3-time-format#locale_format).\\n\\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.\\n\\nWhen used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.\\n\\n__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format."},"formatType":{"description":"The format type for labels. One of `\\"number\\"`, `\\"time\\"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).\\n\\n__Default value:__\\n- `\\"time\\"` for temporal fields and ordinal and nominal fields with `timeUnit`.\\n- `\\"number\\"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.","type":"string"},"gradientLength":{"anyOf":[{"description":"The length in pixels of the primary axis of a color gradient. This value corresponds to the height of a vertical gradient or the width of a horizontal gradient.\\n\\n__Default value:__ `200`.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"gradientOpacity":{"anyOf":[{"description":"Opacity of the color gradient.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"gradientStrokeColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"The color of the gradient stroke, can be in hex color code or regular color name.\\n\\n__Default value:__ `\\"lightGray\\"`."},{"$ref":"#/definitions/ExprRef"}]},"gradientStrokeWidth":{"anyOf":[{"description":"The width of the gradient stroke, in pixels.\\n\\n__Default value:__ `0`.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"gradientThickness":{"anyOf":[{"description":"The thickness in pixels of the color gradient. This value corresponds to the width of a vertical gradient or the height of a horizontal gradient.\\n\\n__Default value:__ `16`.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"gridAlign":{"anyOf":[{"$ref":"#/definitions/LayoutAlign","description":"The alignment to apply to symbol legends rows and columns. The supported string values are `\\"all\\"`, `\\"each\\"` (the default), and `none`. For more information, see the [grid layout documentation](https://vega.github.io/vega/docs/layout).\\n\\n__Default value:__ `\\"each\\"`."},{"$ref":"#/definitions/ExprRef"}]},"labelAlign":{"anyOf":[{"$ref":"#/definitions/Align","description":"The alignment of the legend label, can be left, center, or right."},{"$ref":"#/definitions/ExprRef"}]},"labelBaseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline","description":"The position of the baseline of legend label, can be `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, or `\\"alphabetic\\"`.\\n\\n__Default value:__ `\\"middle\\"`."},{"$ref":"#/definitions/ExprRef"}]},"labelColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"The color of the legend label, can be in hex color code or regular color name."},{"$ref":"#/definitions/ExprRef"}]},"labelExpr":{"description":"[Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.\\n\\n__Note:__ The label text and value can be assessed via the `label` and `value` properties of the legend\'s backing `datum` object.","type":"string"},"labelFont":{"anyOf":[{"description":"The font of the legend label.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"labelFontSize":{"anyOf":[{"description":"The font size of legend label.\\n\\n__Default value:__ `10`.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelFontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"The font style of legend label."},{"$ref":"#/definitions/ExprRef"}]},"labelFontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"The font weight of legend label."},{"$ref":"#/definitions/ExprRef"}]},"labelLimit":{"anyOf":[{"description":"Maximum allowed pixel width of legend tick labels.\\n\\n__Default value:__ `160`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelOffset":{"anyOf":[{"description":"The offset of the legend label.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelOpacity":{"anyOf":[{"description":"Opacity of labels.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelOverlap":{"anyOf":[{"$ref":"#/definitions/LabelOverlap","description":"The strategy to use for resolving overlap of labels in gradient legends. If `false`, no overlap reduction is attempted. If set to `true` (default) or `\\"parity\\"`, a strategy of removing every other label is used. If set to `\\"greedy\\"`, a linear scan of the labels is performed, removing any label that overlaps with the last visible label (this often works better for log-scaled axes).\\n\\n__Default value:__ `true`."},{"$ref":"#/definitions/ExprRef"}]},"labelPadding":{"anyOf":[{"description":"Padding in pixels between the legend and legend labels.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelSeparation":{"anyOf":[{"description":"The minimum separation that must be between label bounding boxes for them to be considered non-overlapping (default `0`). This property is ignored if *labelOverlap* resolution is not enabled.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"legendX":{"anyOf":[{"description":"Custom x-position for legend with orient \\"none\\".","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"legendY":{"anyOf":[{"description":"Custom y-position for legend with orient \\"none\\".","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"offset":{"anyOf":[{"description":"The offset in pixels by which to displace the legend from the data rectangle and axes.\\n\\n__Default value:__ `18`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"orient":{"$ref":"#/definitions/LegendOrient","description":"The orientation of the legend, which determines how the legend is positioned within the scene. One of `\\"left\\"`, `\\"right\\"`, `\\"top\\"`, `\\"bottom\\"`, `\\"top-left\\"`, `\\"top-right\\"`, `\\"bottom-left\\"`, `\\"bottom-right\\"`, `\\"none\\"`.\\n\\n__Default value:__ `\\"right\\"`"},"padding":{"anyOf":[{"description":"The padding between the border and content of the legend group.\\n\\n__Default value:__ `0`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"rowPadding":{"anyOf":[{"description":"The vertical padding in pixels between symbol legend entries.\\n\\n__Default value:__ `2`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Border stroke color for the full legend."},{"$ref":"#/definitions/ExprRef"}]},"symbolDash":{"anyOf":[{"description":"An array of alternating [stroke, space] lengths for dashed symbol strokes.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"symbolDashOffset":{"anyOf":[{"description":"The pixel offset at which to start drawing with the symbol stroke dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"symbolFillColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"The color of the legend symbol,"},{"$ref":"#/definitions/ExprRef"}]},"symbolLimit":{"anyOf":[{"description":"The maximum number of allowed entries for a symbol legend. Additional entries will be dropped.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"symbolOffset":{"anyOf":[{"description":"Horizontal pixel offset for legend symbols.\\n\\n__Default value:__ `0`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"symbolOpacity":{"anyOf":[{"description":"Opacity of the legend symbols.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"symbolSize":{"anyOf":[{"description":"The size of the legend symbol, in pixels.\\n\\n__Default value:__ `100`.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"symbolStrokeColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Stroke color for legend symbols."},{"$ref":"#/definitions/ExprRef"}]},"symbolStrokeWidth":{"anyOf":[{"description":"The width of the symbol\'s stroke.\\n\\n__Default value:__ `1.5`.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"symbolType":{"anyOf":[{"$ref":"#/definitions/SymbolShape","description":"The symbol shape. One of the plotting shapes `circle` (default), `square`, `cross`, `diamond`, `triangle-up`, `triangle-down`, `triangle-right`, or `triangle-left`, the line symbol `stroke`, or one of the centered directional shapes `arrow`, `wedge`, or `triangle`. Alternatively, a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) can be provided. For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.\\n\\n__Default value:__ `\\"circle\\"`."},{"$ref":"#/definitions/ExprRef"}]},"tickCount":{"anyOf":[{"$ref":"#/definitions/TickCount","description":"The desired number of tick values for quantitative legends."},{"$ref":"#/definitions/ExprRef"}]},"tickMinStep":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The minimum desired step between legend ticks, in terms of scale domain values. For example, a value of `1` indicates that ticks should not be less than 1 unit apart. If `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to enforce the minimum step value.\\n\\n__Default value__: `undefined`"},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"titleAlign":{"anyOf":[{"$ref":"#/definitions/Align","description":"Horizontal text alignment for legend titles.\\n\\n__Default value:__ `\\"left\\"`."},{"$ref":"#/definitions/ExprRef"}]},"titleAnchor":{"anyOf":[{"$ref":"#/definitions/TitleAnchor","description":"Text anchor position for placing legend titles."},{"$ref":"#/definitions/ExprRef"}]},"titleBaseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline","description":"Vertical text baseline for legend titles.  One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, or `\\"line-bottom\\"`. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone.\\n\\n__Default value:__ `\\"top\\"`."},{"$ref":"#/definitions/ExprRef"}]},"titleColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"The color of the legend title, can be in hex color code or regular color name."},{"$ref":"#/definitions/ExprRef"}]},"titleFont":{"anyOf":[{"description":"The font of the legend title.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"titleFontSize":{"anyOf":[{"description":"The font size of the legend title.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleFontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"The font style of the legend title."},{"$ref":"#/definitions/ExprRef"}]},"titleFontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"The font weight of the legend title. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},{"$ref":"#/definitions/ExprRef"}]},"titleLimit":{"anyOf":[{"description":"Maximum allowed pixel width of legend titles.\\n\\n__Default value:__ `180`.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleLineHeight":{"anyOf":[{"description":"Line height in pixels for multi-line title text or title text with `\\"line-top\\"` or `\\"line-bottom\\"` baseline.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleOpacity":{"anyOf":[{"description":"Opacity of the legend title.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleOrient":{"anyOf":[{"$ref":"#/definitions/Orient","description":"Orientation of the legend title."},{"$ref":"#/definitions/ExprRef"}]},"titlePadding":{"anyOf":[{"description":"The padding, in pixels, between title and legend.\\n\\n__Default value:__ `5`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"type":{"description":"The type of the legend. Use `\\"symbol\\"` to create a discrete legend and `\\"gradient\\"` for a continuous color gradient.\\n\\n__Default value:__ `\\"gradient\\"` for non-binned quantitative fields and temporal fields; `\\"symbol\\"` otherwise.","enum":["symbol","gradient"],"type":"string"},"values":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"items":{"type":"string"},"type":"array"},{"items":{"type":"boolean"},"type":"array"},{"items":{"$ref":"#/definitions/DateTime"},"type":"array"},{"$ref":"#/definitions/ExprRef"}],"description":"Explicitly set the visible legend values."},"zindex":{"description":"A non-negative integer indicating the z-index of the legend. If zindex is 0, legend should be drawn behind all chart elements. To put them in front, use zindex = 1.","minimum":0,"type":"number"}},"type":"object"},"LegendBinding":{"anyOf":[{"const":"legend","type":"string"},{"$ref":"#/definitions/LegendStreamBinding"}]},"LegendConfig":{"additionalProperties":false,"properties":{"aria":{"anyOf":[{"description":"A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \\"aria-hidden\\" attribute will be set on the output SVG group, removing the legend from the ARIA accessibility tree.\\n\\n__Default value:__ `true`","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"clipHeight":{"anyOf":[{"description":"The height in pixels to clip symbol legend entries and limit their size.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"columnPadding":{"anyOf":[{"description":"The horizontal padding in pixels between symbol legend entries.\\n\\n__Default value:__ `10`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"columns":{"anyOf":[{"description":"The number of columns in which to arrange symbol legend entries. A value of `0` or lower indicates a single row with one column per entry.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadius":{"anyOf":[{"description":"Corner radius for the full legend.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"description":{"anyOf":[{"description":"A text description of this legend for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If the `aria` property is true, for SVG output the [\\"aria-label\\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute) will be set to this description. If the description is unspecified it will be automatically generated.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"direction":{"$ref":"#/definitions/Orientation","description":"The direction of the legend, one of `\\"vertical\\"` or `\\"horizontal\\"`.\\n\\n__Default value:__\\n- For top-/bottom-`orient`ed legends, `\\"horizontal\\"`\\n- For left-/right-`orient`ed legends, `\\"vertical\\"`\\n- For top/bottom-left/right-`orient`ed legends, `\\"horizontal\\"` for gradient legends and `\\"vertical\\"` for symbol legends."},"disable":{"description":"Disable legend by default","type":"boolean"},"fillColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Background fill color for the full legend."},{"$ref":"#/definitions/ExprRef"}]},"gradientDirection":{"anyOf":[{"$ref":"#/definitions/Orientation","description":"The default direction (`\\"horizontal\\"` or `\\"vertical\\"`) for gradient legends.\\n\\n__Default value:__ `\\"vertical\\"`."},{"$ref":"#/definitions/ExprRef"}]},"gradientHorizontalMaxLength":{"description":"Max legend length for a horizontal gradient when `config.legend.gradientLength` is undefined.\\n\\n__Default value:__ `200`","type":"number"},"gradientHorizontalMinLength":{"description":"Min legend length for a horizontal gradient when `config.legend.gradientLength` is undefined.\\n\\n__Default value:__ `100`","type":"number"},"gradientLabelLimit":{"anyOf":[{"description":"The maximum allowed length in pixels of color ramp gradient labels.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"gradientLabelOffset":{"anyOf":[{"description":"Vertical offset in pixels for color ramp gradient labels.\\n\\n__Default value:__ `2`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"gradientLength":{"anyOf":[{"description":"The length in pixels of the primary axis of a color gradient. This value corresponds to the height of a vertical gradient or the width of a horizontal gradient.\\n\\n__Default value:__ `200`.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"gradientOpacity":{"anyOf":[{"description":"Opacity of the color gradient.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"gradientStrokeColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"The color of the gradient stroke, can be in hex color code or regular color name.\\n\\n__Default value:__ `\\"lightGray\\"`."},{"$ref":"#/definitions/ExprRef"}]},"gradientStrokeWidth":{"anyOf":[{"description":"The width of the gradient stroke, in pixels.\\n\\n__Default value:__ `0`.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"gradientThickness":{"anyOf":[{"description":"The thickness in pixels of the color gradient. This value corresponds to the width of a vertical gradient or the height of a horizontal gradient.\\n\\n__Default value:__ `16`.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"gradientVerticalMaxLength":{"description":"Max legend length for a vertical gradient when `config.legend.gradientLength` is undefined.\\n\\n__Default value:__ `200`","type":"number"},"gradientVerticalMinLength":{"description":"Min legend length for a vertical gradient when `config.legend.gradientLength` is undefined.\\n\\n__Default value:__ `100`","type":"number"},"gridAlign":{"anyOf":[{"$ref":"#/definitions/LayoutAlign","description":"The alignment to apply to symbol legends rows and columns. The supported string values are `\\"all\\"`, `\\"each\\"` (the default), and `none`. For more information, see the [grid layout documentation](https://vega.github.io/vega/docs/layout).\\n\\n__Default value:__ `\\"each\\"`."},{"$ref":"#/definitions/ExprRef"}]},"labelAlign":{"anyOf":[{"$ref":"#/definitions/Align","description":"The alignment of the legend label, can be left, center, or right."},{"$ref":"#/definitions/ExprRef"}]},"labelBaseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline","description":"The position of the baseline of legend label, can be `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, or `\\"alphabetic\\"`.\\n\\n__Default value:__ `\\"middle\\"`."},{"$ref":"#/definitions/ExprRef"}]},"labelColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"The color of the legend label, can be in hex color code or regular color name."},{"$ref":"#/definitions/ExprRef"}]},"labelFont":{"anyOf":[{"description":"The font of the legend label.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"labelFontSize":{"anyOf":[{"description":"The font size of legend label.\\n\\n__Default value:__ `10`.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelFontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"The font style of legend label."},{"$ref":"#/definitions/ExprRef"}]},"labelFontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"The font weight of legend label."},{"$ref":"#/definitions/ExprRef"}]},"labelLimit":{"anyOf":[{"description":"Maximum allowed pixel width of legend tick labels.\\n\\n__Default value:__ `160`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelOffset":{"anyOf":[{"description":"The offset of the legend label.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelOpacity":{"anyOf":[{"description":"Opacity of labels.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelOverlap":{"anyOf":[{"$ref":"#/definitions/LabelOverlap"},{"$ref":"#/definitions/ExprRef"}],"description":"The strategy to use for resolving overlap of labels in gradient legends. If `false`, no overlap reduction is attempted. If set to `true` or `\\"parity\\"`, a strategy of removing every other label is used. If set to `\\"greedy\\"`, a linear scan of the labels is performed, removing any label that overlaps with the last visible label (this often works better for log-scaled axes).\\n\\n__Default value:__ `\\"greedy\\"` for `log scales otherwise `true`."},"labelPadding":{"anyOf":[{"description":"Padding in pixels between the legend and legend labels.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"labelSeparation":{"anyOf":[{"description":"The minimum separation that must be between label bounding boxes for them to be considered non-overlapping (default `0`). This property is ignored if *labelOverlap* resolution is not enabled.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"layout":{"$ref":"#/definitions/ExprRef"},"legendX":{"anyOf":[{"description":"Custom x-position for legend with orient \\"none\\".","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"legendY":{"anyOf":[{"description":"Custom y-position for legend with orient \\"none\\".","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"offset":{"anyOf":[{"description":"The offset in pixels by which to displace the legend from the data rectangle and axes.\\n\\n__Default value:__ `18`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"orient":{"$ref":"#/definitions/LegendOrient","description":"The orientation of the legend, which determines how the legend is positioned within the scene. One of `\\"left\\"`, `\\"right\\"`, `\\"top\\"`, `\\"bottom\\"`, `\\"top-left\\"`, `\\"top-right\\"`, `\\"bottom-left\\"`, `\\"bottom-right\\"`, `\\"none\\"`.\\n\\n__Default value:__ `\\"right\\"`"},"padding":{"anyOf":[{"description":"The padding between the border and content of the legend group.\\n\\n__Default value:__ `0`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"rowPadding":{"anyOf":[{"description":"The vertical padding in pixels between symbol legend entries.\\n\\n__Default value:__ `2`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Border stroke color for the full legend."},{"$ref":"#/definitions/ExprRef"}]},"strokeDash":{"anyOf":[{"description":"Border stroke dash pattern for the full legend.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"strokeWidth":{"anyOf":[{"description":"Border stroke width for the full legend.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"symbolBaseFillColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Default fill color for legend symbols. Only applied if there is no `\\"fill\\"` scale color encoding for the legend.\\n\\n__Default value:__ `\\"transparent\\"`."},{"$ref":"#/definitions/ExprRef"}]},"symbolBaseStrokeColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Default stroke color for legend symbols. Only applied if there is no `\\"fill\\"` scale color encoding for the legend.\\n\\n__Default value:__ `\\"gray\\"`."},{"$ref":"#/definitions/ExprRef"}]},"symbolDash":{"anyOf":[{"description":"An array of alternating [stroke, space] lengths for dashed symbol strokes.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"symbolDashOffset":{"anyOf":[{"description":"The pixel offset at which to start drawing with the symbol stroke dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"symbolDirection":{"anyOf":[{"$ref":"#/definitions/Orientation","description":"The default direction (`\\"horizontal\\"` or `\\"vertical\\"`) for symbol legends.\\n\\n__Default value:__ `\\"vertical\\"`."},{"$ref":"#/definitions/ExprRef"}]},"symbolFillColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"The color of the legend symbol,"},{"$ref":"#/definitions/ExprRef"}]},"symbolLimit":{"anyOf":[{"description":"The maximum number of allowed entries for a symbol legend. Additional entries will be dropped.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"symbolOffset":{"anyOf":[{"description":"Horizontal pixel offset for legend symbols.\\n\\n__Default value:__ `0`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"symbolOpacity":{"anyOf":[{"description":"Opacity of the legend symbols.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"symbolSize":{"anyOf":[{"description":"The size of the legend symbol, in pixels.\\n\\n__Default value:__ `100`.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"symbolStrokeColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Stroke color for legend symbols."},{"$ref":"#/definitions/ExprRef"}]},"symbolStrokeWidth":{"anyOf":[{"description":"The width of the symbol\'s stroke.\\n\\n__Default value:__ `1.5`.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"symbolType":{"anyOf":[{"$ref":"#/definitions/SymbolShape","description":"The symbol shape. One of the plotting shapes `circle` (default), `square`, `cross`, `diamond`, `triangle-up`, `triangle-down`, `triangle-right`, or `triangle-left`, the line symbol `stroke`, or one of the centered directional shapes `arrow`, `wedge`, or `triangle`. Alternatively, a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) can be provided. For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.\\n\\n__Default value:__ `\\"circle\\"`."},{"$ref":"#/definitions/ExprRef"}]},"tickCount":{"anyOf":[{"$ref":"#/definitions/TickCount","description":"The desired number of tick values for quantitative legends."},{"$ref":"#/definitions/ExprRef"}]},"title":{"description":"Set to null to disable title for the axis, legend, or header.","type":"null"},"titleAlign":{"anyOf":[{"$ref":"#/definitions/Align","description":"Horizontal text alignment for legend titles.\\n\\n__Default value:__ `\\"left\\"`."},{"$ref":"#/definitions/ExprRef"}]},"titleAnchor":{"anyOf":[{"$ref":"#/definitions/TitleAnchor","description":"Text anchor position for placing legend titles."},{"$ref":"#/definitions/ExprRef"}]},"titleBaseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline","description":"Vertical text baseline for legend titles.  One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, or `\\"line-bottom\\"`. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone.\\n\\n__Default value:__ `\\"top\\"`."},{"$ref":"#/definitions/ExprRef"}]},"titleColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"The color of the legend title, can be in hex color code or regular color name."},{"$ref":"#/definitions/ExprRef"}]},"titleFont":{"anyOf":[{"description":"The font of the legend title.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"titleFontSize":{"anyOf":[{"description":"The font size of the legend title.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleFontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"The font style of the legend title."},{"$ref":"#/definitions/ExprRef"}]},"titleFontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"The font weight of the legend title. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},{"$ref":"#/definitions/ExprRef"}]},"titleLimit":{"anyOf":[{"description":"Maximum allowed pixel width of legend titles.\\n\\n__Default value:__ `180`.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleLineHeight":{"anyOf":[{"description":"Line height in pixels for multi-line title text or title text with `\\"line-top\\"` or `\\"line-bottom\\"` baseline.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleOpacity":{"anyOf":[{"description":"Opacity of the legend title.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"titleOrient":{"anyOf":[{"$ref":"#/definitions/Orient","description":"Orientation of the legend title."},{"$ref":"#/definitions/ExprRef"}]},"titlePadding":{"anyOf":[{"description":"The padding, in pixels, between title and legend.\\n\\n__Default value:__ `5`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"unselectedOpacity":{"description":"The opacity of unselected legend entries.\\n\\n__Default value:__ 0.35.","type":"number"},"zindex":{"anyOf":[{"description":"The integer z-index indicating the layering of the legend group relative to other axis, mark, and legend groups.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]}},"type":"object"},"LegendOrient":{"enum":["none","left","right","top","bottom","top-left","top-right","bottom-left","bottom-right"],"type":"string"},"LegendResolveMap":{"additionalProperties":false,"properties":{"angle":{"$ref":"#/definitions/ResolveMode"},"color":{"$ref":"#/definitions/ResolveMode"},"fill":{"$ref":"#/definitions/ResolveMode"},"fillOpacity":{"$ref":"#/definitions/ResolveMode"},"opacity":{"$ref":"#/definitions/ResolveMode"},"shape":{"$ref":"#/definitions/ResolveMode"},"size":{"$ref":"#/definitions/ResolveMode"},"stroke":{"$ref":"#/definitions/ResolveMode"},"strokeDash":{"$ref":"#/definitions/ResolveMode"},"strokeOpacity":{"$ref":"#/definitions/ResolveMode"},"strokeWidth":{"$ref":"#/definitions/ResolveMode"}},"type":"object"},"LegendStreamBinding":{"additionalProperties":false,"properties":{"legend":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/Stream"}]}},"required":["legend"],"type":"object"},"LineConfig":{"additionalProperties":false,"properties":{"align":{"anyOf":[{"$ref":"#/definitions/Align"},{"$ref":"#/definitions/ExprRef"}],"description":"The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `\\"left\\"`, `\\"right\\"`, `\\"center\\"`.\\n\\n__Note:__ Expression reference is *not* supported for range marks."},"angle":{"anyOf":[{"description":"The rotation angle of the text, in degrees.","maximum":360,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"aria":{"anyOf":[{"description":"A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \\"aria-hidden\\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"ariaRole":{"anyOf":[{"description":"Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \\"role\\" attribute. Warning: this property is experimental and may be changed in the future.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"ariaRoleDescription":{"anyOf":[{"description":"A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \\"aria-roledescription\\" attribute. Warning: this property is experimental and may be changed in the future.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"aspect":{"anyOf":[{"description":"Whether to keep aspect ratio of image marks.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"baseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline"},{"$ref":"#/definitions/ExprRef"}],"description":"For text marks, the vertical text baseline. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, `\\"line-bottom\\"`, or an expression reference that provides one of the valid values. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.\\n\\nFor range marks, the vertical alignment of the marks. One of `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`.\\n\\n__Note:__ Expression reference is *not* supported for range marks."},"blend":{"anyOf":[{"$ref":"#/definitions/Blend","description":"The color blend mode for drawing an item on its current background. Any valid [CSS mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value can be used.\\n\\n__Default value: `\\"source-over\\"`"},{"$ref":"#/definitions/ExprRef"}]},"color":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"$ref":"#/definitions/ExprRef"}],"description":"Default color.\\n\\n__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> `\\"#4682b4\\"`\\n\\n__Note:__\\n- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\\n- The `fill` and `stroke` properties have higher precedence than `color` and will override `color`."},"cornerRadius":{"anyOf":[{"description":"The radius in pixels of rounded rectangles or arcs\' corners.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusBottomLeft":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' bottom left corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusBottomRight":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' bottom right corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusTopLeft":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' top right corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusTopRight":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' top left corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cursor":{"anyOf":[{"$ref":"#/definitions/Cursor","description":"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},{"$ref":"#/definitions/ExprRef"}]},"description":{"anyOf":[{"description":"A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\\"aria-label\\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"dir":{"anyOf":[{"$ref":"#/definitions/TextDirection","description":"The direction of the text. One of `\\"ltr\\"` (left-to-right) or `\\"rtl\\"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\\n\\n__Default value:__ `\\"ltr\\"`"},{"$ref":"#/definitions/ExprRef"}]},"dx":{"anyOf":[{"description":"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"dy":{"anyOf":[{"description":"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"ellipsis":{"anyOf":[{"description":"The ellipsis string for text truncated in response to the limit parameter.\\n\\n__Default value:__ `\\"…\\"`","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"endAngle":{"anyOf":[{"description":"The end angle in radians for arc marks. A value of `0` indicates up (north), increasing values proceed clockwise.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fill":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.\\n\\n__Default value:__ (None)"},"fillOpacity":{"anyOf":[{"description":"The fill opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"filled":{"description":"Whether the mark\'s color should be used as fill color instead of stroke color.\\n\\n__Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.\\n\\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).","type":"boolean"},"font":{"anyOf":[{"description":"The typeface to set the text in (e.g., `\\"Helvetica Neue\\"`).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"fontSize":{"anyOf":[{"description":"The font size, in pixels.\\n\\n__Default value:__ `11`","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"The font style (e.g., `\\"italic\\"`)."},{"$ref":"#/definitions/ExprRef"}]},"fontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"The font weight. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},{"$ref":"#/definitions/ExprRef"}]},"height":{"anyOf":[{"description":"Height of the marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"href":{"anyOf":[{"$ref":"#/definitions/URI","description":"A URL to load upon mouse click. If defined, the mark acts as a hyperlink."},{"$ref":"#/definitions/ExprRef"}]},"innerRadius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`."},"interpolate":{"anyOf":[{"$ref":"#/definitions/Interpolate","description":"The line interpolation method to use for line and area marks. One of the following:\\n- `\\"linear\\"`: piecewise linear segments, as in a polyline.\\n- `\\"linear-closed\\"`: close the linear segments to form a polygon.\\n- `\\"step\\"`: alternate between horizontal and vertical segments, as in a step function.\\n- `\\"step-before\\"`: alternate between vertical and horizontal segments, as in a step function.\\n- `\\"step-after\\"`: alternate between horizontal and vertical segments, as in a step function.\\n- `\\"basis\\"`: a B-spline, with control point duplication on the ends.\\n- `\\"basis-open\\"`: an open B-spline; may not intersect the start or end.\\n- `\\"basis-closed\\"`: a closed B-spline, as in a loop.\\n- `\\"cardinal\\"`: a Cardinal spline, with control point duplication on the ends.\\n- `\\"cardinal-open\\"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\\n- `\\"cardinal-closed\\"`: a closed Cardinal spline, as in a loop.\\n- `\\"bundle\\"`: equivalent to basis, except the tension parameter is used to straighten the spline.\\n- `\\"monotone\\"`: cubic interpolation that preserves monotonicity in y."},{"$ref":"#/definitions/ExprRef"}]},"invalid":{"description":"Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).\\n- If set to `\\"filter\\"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).\\n- If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.","enum":["filter",null],"type":["string","null"]},"limit":{"anyOf":[{"description":"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\\n\\n__Default value:__ `0` -- indicating no limit","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"lineBreak":{"anyOf":[{"description":"A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property is ignored if the text is array-valued.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"lineHeight":{"anyOf":[{"description":"The line height in pixels (the spacing between subsequent lines of text) for multi-line text marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"opacity":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The overall opacity (value between [0,1]).\\n\\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.","maximum":1,"minimum":0},"order":{"description":"For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.","type":["null","boolean"]},"orient":{"$ref":"#/definitions/Orientation","description":"The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.\\n- For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.\\n- For area, this property determines the orient property of the Vega output.\\n- For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored."},"outerRadius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`."},"padAngle":{"anyOf":[{"description":"The angular padding applied to sides of the arc, in radians.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"point":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/OverlayMarkDef"},{"const":"transparent","type":"string"}],"description":"A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.\\n\\n- If this property is `\\"transparent\\"`, transparent points will be used (for enhancing tooltips and selections).\\n\\n- If this property is an empty object (`{}`) or `true`, filled points with default properties will be used.\\n\\n- If this property is `false`, no points would be automatically added to line or area marks.\\n\\n__Default value:__ `false`."},"radius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"For arc mark, the primary (outer) radius in pixels.\\n\\nFor text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties."},"radius2":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The secondary (inner) radius in pixels of arc marks."},"shape":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/SymbolShape"},{"type":"string"}],"description":"Shape of the point marks. Supported values include:\\n- plotting shapes: `\\"circle\\"`, `\\"square\\"`, `\\"cross\\"`, `\\"diamond\\"`, `\\"triangle-up\\"`, `\\"triangle-down\\"`, `\\"triangle-right\\"`, or `\\"triangle-left\\"`.\\n- the line symbol `\\"stroke\\"`\\n- centered directional shapes `\\"arrow\\"`, `\\"wedge\\"`, or `\\"triangle\\"`\\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\\n\\n__Default value:__ `\\"circle\\"`"},{"$ref":"#/definitions/ExprRef"}]},"size":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Default size for marks.\\n- For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.\\n- For `bar`, this represents the band size of the bar, in pixels.\\n- For `text`, this represents the font size, in pixels.\\n\\n__Default value:__\\n- `30` for point, circle, square marks; width/height\'s `step`\\n- `2` for bar marks with discrete dimensions;\\n- `5` for bar marks with continuous dimensions;\\n- `11` for text marks.","minimum":0},"smooth":{"anyOf":[{"description":"A boolean flag (default true) indicating if the image should be smoothed when resized. If false, individual pixels should be scaled directly rather than interpolated with smoothing. For SVG rendering, this option may not work in some browsers due to lack of standardization.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"startAngle":{"anyOf":[{"description":"The start angle in radians for arc marks. A value of `0` indicates up (north), increasing values proceed clockwise.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"stroke":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.\\n\\n__Default value:__ (None)"},"strokeCap":{"anyOf":[{"$ref":"#/definitions/StrokeCap","description":"The stroke cap for line ending style. One of `\\"butt\\"`, `\\"round\\"`, or `\\"square\\"`.\\n\\n__Default value:__ `\\"butt\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeDash":{"anyOf":[{"description":"An array of alternating stroke, space lengths for creating dashed or dotted lines.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"strokeDashOffset":{"anyOf":[{"description":"The offset (in pixels) into which to begin drawing with the stroke dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeJoin":{"anyOf":[{"$ref":"#/definitions/StrokeJoin","description":"The stroke line join method. One of `\\"miter\\"`, `\\"round\\"` or `\\"bevel\\"`.\\n\\n__Default value:__ `\\"miter\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeMiterLimit":{"anyOf":[{"description":"The miter limit at which to bevel a line join.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOffset":{"anyOf":[{"description":"The offset in pixels at which to draw the group stroke and fill. If unspecified, the default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths align with the pixel grid.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOpacity":{"anyOf":[{"description":"The stroke opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeWidth":{"anyOf":[{"description":"The stroke width, in pixels.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"tension":{"anyOf":[{"description":"Depending on the interpolation type, sets the tension parameter (for line and area marks).","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"text":{"anyOf":[{"$ref":"#/definitions/Text","description":"Placeholder text if the `text` channel is not specified"},{"$ref":"#/definitions/ExprRef"}]},"theta":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"- For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)\\n\\n- For text marks, polar coordinate angle in radians.","maximum":360,"minimum":0},"theta2":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise."},"timeUnitBandPosition":{"description":"Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step. If set to `0.5`, the marks will be positioned in the middle of the time unit band step.","type":"number"},"timeUnitBandSize":{"description":"Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step. If set to `0.5`, bandwidth of the marks will be half of the time unit band step.","type":"number"},"tooltip":{"anyOf":[{"type":"number"},{"type":"string"},{"type":"boolean"},{"$ref":"#/definitions/TooltipContent"},{"$ref":"#/definitions/ExprRef"},{"type":"null"}],"description":"The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\\n\\n- If `tooltip` is `true` or `{\\"content\\": \\"encoding\\"}`, then all fields from `encoding` will be used.\\n- If `tooltip` is `{\\"content\\": \\"data\\"}`, then all fields that appear in the highlighted data point will be used.\\n- If set to `null` or `false`, then no tooltip will be used.\\n\\nSee the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.\\n\\n__Default value:__ `null`"},"url":{"anyOf":[{"$ref":"#/definitions/URI","description":"The URL of the image file for image marks."},{"$ref":"#/definitions/ExprRef"}]},"width":{"anyOf":[{"description":"Width of the marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"x":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"X coordinates of the marks, or width of horizontal `\\"bar\\"` and `\\"area\\"` without specified `x2` or `width`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"x2":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"X2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"y":{"anyOf":[{"type":"number"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Y coordinates of the marks, or height of vertical `\\"bar\\"` and `\\"area\\"` without specified `y2` or `height`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."},"y2":{"anyOf":[{"type":"number"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Y2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."}},"type":"object"},"LinearGradient":{"additionalProperties":false,"properties":{"gradient":{"const":"linear","description":"The type of gradient. Use `\\"linear\\"` for a linear gradient.","type":"string"},"id":{"type":"string"},"stops":{"description":"An array of gradient stops defining the gradient color sequence.","items":{"$ref":"#/definitions/GradientStop"},"type":"array"},"x1":{"description":"The starting x-coordinate, in normalized [0, 1] coordinates, of the linear gradient.\\n\\n__Default value:__ `0`","type":"number"},"x2":{"description":"The ending x-coordinate, in normalized [0, 1] coordinates, of the linear gradient.\\n\\n__Default value:__ `1`","type":"number"},"y1":{"description":"The starting y-coordinate, in normalized [0, 1] coordinates, of the linear gradient.\\n\\n__Default value:__ `0`","type":"number"},"y2":{"description":"The ending y-coordinate, in normalized [0, 1] coordinates, of the linear gradient.\\n\\n__Default value:__ `0`","type":"number"}},"required":["gradient","stops"],"type":"object"},"LocalMultiTimeUnit":{"enum":["yearquarter","yearquartermonth","yearmonth","yearmonthdate","yearmonthdatehours","yearmonthdatehoursminutes","yearmonthdatehoursminutesseconds","yearweek","yearweekday","yearweekdayhours","yearweekdayhoursminutes","yearweekdayhoursminutesseconds","yeardayofyear","quartermonth","monthdate","monthdatehours","monthdatehoursminutes","monthdatehoursminutesseconds","weekday","weeksdayhours","weekdayhoursminutes","weekdayhoursminutesseconds","dayhours","dayhoursminutes","dayhoursminutesseconds","hoursminutes","hoursminutesseconds","minutesseconds","secondsmilliseconds"],"type":"string"},"LocalSingleTimeUnit":{"enum":["year","quarter","month","week","day","dayofyear","date","hours","minutes","seconds","milliseconds"],"type":"string"},"Locale":{"additionalProperties":false,"properties":{"number":{"$ref":"#/definitions/NumberLocale"},"time":{"$ref":"#/definitions/TimeLocale"}},"type":"object"},"LoessTransform":{"additionalProperties":false,"properties":{"as":{"description":"The output field names for the smoothed points generated by the loess transform.\\n\\n__Default value:__ The field names of the input x and y values.","items":{"$ref":"#/definitions/FieldName"},"maxItems":2,"minItems":2,"type":"array"},"bandwidth":{"description":"A bandwidth parameter in the range `[0, 1]` that determines the amount of smoothing.\\n\\n__Default value:__ `0.3`","type":"number"},"groupby":{"description":"The data fields to group by. If not specified, a single group containing all data objects will be used.","items":{"$ref":"#/definitions/FieldName"},"type":"array"},"loess":{"$ref":"#/definitions/FieldName","description":"The data field of the dependent variable to smooth."},"on":{"$ref":"#/definitions/FieldName","description":"The data field of the independent variable to use a predictor."}},"required":["loess","on"],"type":"object"},"LogicalAnd<Predicate>":{"additionalProperties":false,"properties":{"and":{"items":{"$ref":"#/definitions/PredicateComposition"},"type":"array"}},"required":["and"],"type":"object"},"PredicateComposition":{"anyOf":[{"$ref":"#/definitions/LogicalNot<Predicate>"},{"$ref":"#/definitions/LogicalAnd<Predicate>"},{"$ref":"#/definitions/LogicalOr<Predicate>"},{"$ref":"#/definitions/Predicate"}]},"LogicalNot<Predicate>":{"additionalProperties":false,"properties":{"not":{"$ref":"#/definitions/PredicateComposition"}},"required":["not"],"type":"object"},"LogicalOr<Predicate>":{"additionalProperties":false,"properties":{"or":{"items":{"$ref":"#/definitions/PredicateComposition"},"type":"array"}},"required":["or"],"type":"object"},"LookupData":{"additionalProperties":false,"properties":{"data":{"$ref":"#/definitions/Data","description":"Secondary data source to lookup in."},"fields":{"description":"Fields in foreign data or selection to lookup. If not specified, the entire object is queried.","items":{"$ref":"#/definitions/FieldName"},"type":"array"},"key":{"$ref":"#/definitions/FieldName","description":"Key in data to lookup."}},"required":["data","key"],"type":"object"},"LookupSelection":{"additionalProperties":false,"properties":{"fields":{"description":"Fields in foreign data or selection to lookup. If not specified, the entire object is queried.","items":{"$ref":"#/definitions/FieldName"},"type":"array"},"key":{"$ref":"#/definitions/FieldName","description":"Key in data to lookup."},"param":{"$ref":"#/definitions/ParameterName","description":"Selection parameter name to look up."}},"required":["key","param"],"type":"object"},"LookupTransform":{"additionalProperties":false,"properties":{"as":{"anyOf":[{"$ref":"#/definitions/FieldName"},{"items":{"$ref":"#/definitions/FieldName"},"type":"array"}],"description":"The output fields on which to store the looked up data values.\\n\\nFor data lookups, this property may be left blank if `from.fields` has been specified (those field names will be used); if `from.fields` has not been specified, `as` must be a string.\\n\\nFor selection lookups, this property is optional: if unspecified, looked up values will be stored under a property named for the selection; and if specified, it must correspond to `from.fields`."},"default":{"description":"The default value to use if lookup fails.\\n\\n__Default value:__ `null`"},"from":{"anyOf":[{"$ref":"#/definitions/LookupData"},{"$ref":"#/definitions/LookupSelection"}],"description":"Data source or selection for secondary data reference."},"lookup":{"description":"Key in primary data source.","type":"string"}},"required":["lookup","from"],"type":"object"},"Mark":{"description":"All types of primitive marks.","enum":["arc","area","bar","image","line","point","rect","rule","text","tick","trail","circle","square","geoshape"],"type":"string"},"MarkConfig":{"additionalProperties":false,"properties":{"align":{"anyOf":[{"$ref":"#/definitions/Align"},{"$ref":"#/definitions/ExprRef"}],"description":"The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `\\"left\\"`, `\\"right\\"`, `\\"center\\"`.\\n\\n__Note:__ Expression reference is *not* supported for range marks."},"angle":{"anyOf":[{"description":"The rotation angle of the text, in degrees.","maximum":360,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"aria":{"anyOf":[{"description":"A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \\"aria-hidden\\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"ariaRole":{"anyOf":[{"description":"Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \\"role\\" attribute. Warning: this property is experimental and may be changed in the future.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"ariaRoleDescription":{"anyOf":[{"description":"A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \\"aria-roledescription\\" attribute. Warning: this property is experimental and may be changed in the future.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"aspect":{"anyOf":[{"description":"Whether to keep aspect ratio of image marks.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"baseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline"},{"$ref":"#/definitions/ExprRef"}],"description":"For text marks, the vertical text baseline. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, `\\"line-bottom\\"`, or an expression reference that provides one of the valid values. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.\\n\\nFor range marks, the vertical alignment of the marks. One of `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`.\\n\\n__Note:__ Expression reference is *not* supported for range marks."},"blend":{"anyOf":[{"$ref":"#/definitions/Blend","description":"The color blend mode for drawing an item on its current background. Any valid [CSS mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value can be used.\\n\\n__Default value: `\\"source-over\\"`"},{"$ref":"#/definitions/ExprRef"}]},"color":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"$ref":"#/definitions/ExprRef"}],"description":"Default color.\\n\\n__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> `\\"#4682b4\\"`\\n\\n__Note:__\\n- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\\n- The `fill` and `stroke` properties have higher precedence than `color` and will override `color`."},"cornerRadius":{"anyOf":[{"description":"The radius in pixels of rounded rectangles or arcs\' corners.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusBottomLeft":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' bottom left corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusBottomRight":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' bottom right corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusTopLeft":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' top right corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusTopRight":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' top left corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cursor":{"anyOf":[{"$ref":"#/definitions/Cursor","description":"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},{"$ref":"#/definitions/ExprRef"}]},"description":{"anyOf":[{"description":"A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\\"aria-label\\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"dir":{"anyOf":[{"$ref":"#/definitions/TextDirection","description":"The direction of the text. One of `\\"ltr\\"` (left-to-right) or `\\"rtl\\"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\\n\\n__Default value:__ `\\"ltr\\"`"},{"$ref":"#/definitions/ExprRef"}]},"dx":{"anyOf":[{"description":"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"dy":{"anyOf":[{"description":"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"ellipsis":{"anyOf":[{"description":"The ellipsis string for text truncated in response to the limit parameter.\\n\\n__Default value:__ `\\"…\\"`","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"endAngle":{"anyOf":[{"description":"The end angle in radians for arc marks. A value of `0` indicates up (north), increasing values proceed clockwise.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fill":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.\\n\\n__Default value:__ (None)"},"fillOpacity":{"anyOf":[{"description":"The fill opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"filled":{"description":"Whether the mark\'s color should be used as fill color instead of stroke color.\\n\\n__Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.\\n\\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).","type":"boolean"},"font":{"anyOf":[{"description":"The typeface to set the text in (e.g., `\\"Helvetica Neue\\"`).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"fontSize":{"anyOf":[{"description":"The font size, in pixels.\\n\\n__Default value:__ `11`","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"The font style (e.g., `\\"italic\\"`)."},{"$ref":"#/definitions/ExprRef"}]},"fontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"The font weight. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},{"$ref":"#/definitions/ExprRef"}]},"height":{"anyOf":[{"description":"Height of the marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"href":{"anyOf":[{"$ref":"#/definitions/URI","description":"A URL to load upon mouse click. If defined, the mark acts as a hyperlink."},{"$ref":"#/definitions/ExprRef"}]},"innerRadius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`."},"interpolate":{"anyOf":[{"$ref":"#/definitions/Interpolate","description":"The line interpolation method to use for line and area marks. One of the following:\\n- `\\"linear\\"`: piecewise linear segments, as in a polyline.\\n- `\\"linear-closed\\"`: close the linear segments to form a polygon.\\n- `\\"step\\"`: alternate between horizontal and vertical segments, as in a step function.\\n- `\\"step-before\\"`: alternate between vertical and horizontal segments, as in a step function.\\n- `\\"step-after\\"`: alternate between horizontal and vertical segments, as in a step function.\\n- `\\"basis\\"`: a B-spline, with control point duplication on the ends.\\n- `\\"basis-open\\"`: an open B-spline; may not intersect the start or end.\\n- `\\"basis-closed\\"`: a closed B-spline, as in a loop.\\n- `\\"cardinal\\"`: a Cardinal spline, with control point duplication on the ends.\\n- `\\"cardinal-open\\"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\\n- `\\"cardinal-closed\\"`: a closed Cardinal spline, as in a loop.\\n- `\\"bundle\\"`: equivalent to basis, except the tension parameter is used to straighten the spline.\\n- `\\"monotone\\"`: cubic interpolation that preserves monotonicity in y."},{"$ref":"#/definitions/ExprRef"}]},"invalid":{"description":"Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).\\n- If set to `\\"filter\\"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).\\n- If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.","enum":["filter",null],"type":["string","null"]},"limit":{"anyOf":[{"description":"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\\n\\n__Default value:__ `0` -- indicating no limit","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"lineBreak":{"anyOf":[{"description":"A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property is ignored if the text is array-valued.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"lineHeight":{"anyOf":[{"description":"The line height in pixels (the spacing between subsequent lines of text) for multi-line text marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"opacity":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The overall opacity (value between [0,1]).\\n\\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.","maximum":1,"minimum":0},"order":{"description":"For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.","type":["null","boolean"]},"orient":{"$ref":"#/definitions/Orientation","description":"The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.\\n- For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.\\n- For area, this property determines the orient property of the Vega output.\\n- For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored."},"outerRadius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`."},"padAngle":{"anyOf":[{"description":"The angular padding applied to sides of the arc, in radians.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"radius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"For arc mark, the primary (outer) radius in pixels.\\n\\nFor text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties."},"radius2":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The secondary (inner) radius in pixels of arc marks."},"shape":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/SymbolShape"},{"type":"string"}],"description":"Shape of the point marks. Supported values include:\\n- plotting shapes: `\\"circle\\"`, `\\"square\\"`, `\\"cross\\"`, `\\"diamond\\"`, `\\"triangle-up\\"`, `\\"triangle-down\\"`, `\\"triangle-right\\"`, or `\\"triangle-left\\"`.\\n- the line symbol `\\"stroke\\"`\\n- centered directional shapes `\\"arrow\\"`, `\\"wedge\\"`, or `\\"triangle\\"`\\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\\n\\n__Default value:__ `\\"circle\\"`"},{"$ref":"#/definitions/ExprRef"}]},"size":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Default size for marks.\\n- For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.\\n- For `bar`, this represents the band size of the bar, in pixels.\\n- For `text`, this represents the font size, in pixels.\\n\\n__Default value:__\\n- `30` for point, circle, square marks; width/height\'s `step`\\n- `2` for bar marks with discrete dimensions;\\n- `5` for bar marks with continuous dimensions;\\n- `11` for text marks.","minimum":0},"smooth":{"anyOf":[{"description":"A boolean flag (default true) indicating if the image should be smoothed when resized. If false, individual pixels should be scaled directly rather than interpolated with smoothing. For SVG rendering, this option may not work in some browsers due to lack of standardization.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"startAngle":{"anyOf":[{"description":"The start angle in radians for arc marks. A value of `0` indicates up (north), increasing values proceed clockwise.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"stroke":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.\\n\\n__Default value:__ (None)"},"strokeCap":{"anyOf":[{"$ref":"#/definitions/StrokeCap","description":"The stroke cap for line ending style. One of `\\"butt\\"`, `\\"round\\"`, or `\\"square\\"`.\\n\\n__Default value:__ `\\"butt\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeDash":{"anyOf":[{"description":"An array of alternating stroke, space lengths for creating dashed or dotted lines.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"strokeDashOffset":{"anyOf":[{"description":"The offset (in pixels) into which to begin drawing with the stroke dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeJoin":{"anyOf":[{"$ref":"#/definitions/StrokeJoin","description":"The stroke line join method. One of `\\"miter\\"`, `\\"round\\"` or `\\"bevel\\"`.\\n\\n__Default value:__ `\\"miter\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeMiterLimit":{"anyOf":[{"description":"The miter limit at which to bevel a line join.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOffset":{"anyOf":[{"description":"The offset in pixels at which to draw the group stroke and fill. If unspecified, the default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths align with the pixel grid.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOpacity":{"anyOf":[{"description":"The stroke opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeWidth":{"anyOf":[{"description":"The stroke width, in pixels.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"tension":{"anyOf":[{"description":"Depending on the interpolation type, sets the tension parameter (for line and area marks).","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"text":{"anyOf":[{"$ref":"#/definitions/Text","description":"Placeholder text if the `text` channel is not specified"},{"$ref":"#/definitions/ExprRef"}]},"theta":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"- For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)\\n\\n- For text marks, polar coordinate angle in radians.","maximum":360,"minimum":0},"theta2":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise."},"timeUnitBandPosition":{"description":"Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step. If set to `0.5`, the marks will be positioned in the middle of the time unit band step.","type":"number"},"timeUnitBandSize":{"description":"Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step. If set to `0.5`, bandwidth of the marks will be half of the time unit band step.","type":"number"},"tooltip":{"anyOf":[{"type":"number"},{"type":"string"},{"type":"boolean"},{"$ref":"#/definitions/TooltipContent"},{"$ref":"#/definitions/ExprRef"},{"type":"null"}],"description":"The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\\n\\n- If `tooltip` is `true` or `{\\"content\\": \\"encoding\\"}`, then all fields from `encoding` will be used.\\n- If `tooltip` is `{\\"content\\": \\"data\\"}`, then all fields that appear in the highlighted data point will be used.\\n- If set to `null` or `false`, then no tooltip will be used.\\n\\nSee the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.\\n\\n__Default value:__ `null`"},"url":{"anyOf":[{"$ref":"#/definitions/URI","description":"The URL of the image file for image marks."},{"$ref":"#/definitions/ExprRef"}]},"width":{"anyOf":[{"description":"Width of the marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"x":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"X coordinates of the marks, or width of horizontal `\\"bar\\"` and `\\"area\\"` without specified `x2` or `width`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"x2":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"X2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"y":{"anyOf":[{"type":"number"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Y coordinates of the marks, or height of vertical `\\"bar\\"` and `\\"area\\"` without specified `y2` or `height`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."},"y2":{"anyOf":[{"type":"number"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Y2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."}},"type":"object"},"MarkDef":{"additionalProperties":false,"properties":{"align":{"anyOf":[{"$ref":"#/definitions/Align"},{"$ref":"#/definitions/ExprRef"}],"description":"The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `\\"left\\"`, `\\"right\\"`, `\\"center\\"`.\\n\\n__Note:__ Expression reference is *not* supported for range marks."},"angle":{"anyOf":[{"description":"The rotation angle of the text, in degrees.","maximum":360,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"aria":{"anyOf":[{"description":"A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \\"aria-hidden\\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"ariaRole":{"anyOf":[{"description":"Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \\"role\\" attribute. Warning: this property is experimental and may be changed in the future.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"ariaRoleDescription":{"anyOf":[{"description":"A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \\"aria-roledescription\\" attribute. Warning: this property is experimental and may be changed in the future.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"aspect":{"anyOf":[{"description":"Whether to keep aspect ratio of image marks.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"bandSize":{"description":"The width of the ticks.\\n\\n__Default value:__  3/4 of step (width step for horizontal ticks and height step for vertical ticks).","minimum":0,"type":"number"},"baseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline"},{"$ref":"#/definitions/ExprRef"}],"description":"For text marks, the vertical text baseline. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, `\\"line-bottom\\"`, or an expression reference that provides one of the valid values. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.\\n\\nFor range marks, the vertical alignment of the marks. One of `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`.\\n\\n__Note:__ Expression reference is *not* supported for range marks."},"binSpacing":{"description":"Offset between bars for binned field. The ideal value for this is either 0 (preferred by statisticians) or 1 (Vega-Lite default, D3 example style).\\n\\n__Default value:__ `1`","minimum":0,"type":"number"},"blend":{"anyOf":[{"$ref":"#/definitions/Blend","description":"The color blend mode for drawing an item on its current background. Any valid [CSS mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value can be used.\\n\\n__Default value: `\\"source-over\\"`"},{"$ref":"#/definitions/ExprRef"}]},"clip":{"description":"Whether a mark be clipped to the enclosing group’s width and height.","type":"boolean"},"color":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"$ref":"#/definitions/ExprRef"}],"description":"Default color.\\n\\n__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> `\\"#4682b4\\"`\\n\\n__Note:__\\n- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\\n- The `fill` and `stroke` properties have higher precedence than `color` and will override `color`."},"continuousBandSize":{"description":"The default size of the bars on continuous scales.\\n\\n__Default value:__ `5`","minimum":0,"type":"number"},"cornerRadius":{"anyOf":[{"description":"The radius in pixels of rounded rectangles or arcs\' corners.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusBottomLeft":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' bottom left corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusBottomRight":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' bottom right corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusEnd":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"- For vertical bars, top-left and top-right corner radius.\\n\\n- For horizontal bars, top-right and bottom-right corner radius."},"cornerRadiusTopLeft":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' top right corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusTopRight":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' top left corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cursor":{"anyOf":[{"$ref":"#/definitions/Cursor","description":"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},{"$ref":"#/definitions/ExprRef"}]},"description":{"anyOf":[{"description":"A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\\"aria-label\\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"dir":{"anyOf":[{"$ref":"#/definitions/TextDirection","description":"The direction of the text. One of `\\"ltr\\"` (left-to-right) or `\\"rtl\\"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\\n\\n__Default value:__ `\\"ltr\\"`"},{"$ref":"#/definitions/ExprRef"}]},"discreteBandSize":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/RelativeBandSize"}],"description":"The default size of the bars with discrete dimensions. If unspecified, the default size is  `step-2`, which provides 2 pixel offset between bars.","minimum":0},"dx":{"anyOf":[{"description":"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"dy":{"anyOf":[{"description":"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"ellipsis":{"anyOf":[{"description":"The ellipsis string for text truncated in response to the limit parameter.\\n\\n__Default value:__ `\\"…\\"`","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"fill":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.\\n\\n__Default value:__ (None)"},"fillOpacity":{"anyOf":[{"description":"The fill opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"filled":{"description":"Whether the mark\'s color should be used as fill color instead of stroke color.\\n\\n__Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.\\n\\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).","type":"boolean"},"font":{"anyOf":[{"description":"The typeface to set the text in (e.g., `\\"Helvetica Neue\\"`).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"fontSize":{"anyOf":[{"description":"The font size, in pixels.\\n\\n__Default value:__ `11`","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"The font style (e.g., `\\"italic\\"`)."},{"$ref":"#/definitions/ExprRef"}]},"fontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"The font weight. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},{"$ref":"#/definitions/ExprRef"}]},"height":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RelativeBandSize"}],"description":"Height of the marks.  One of:\\n\\n- A number representing a fixed pixel height.\\n\\n- A relative band size definition.  For example, `{band: 0.5}` represents half of the band"},"href":{"anyOf":[{"$ref":"#/definitions/URI","description":"A URL to load upon mouse click. If defined, the mark acts as a hyperlink."},{"$ref":"#/definitions/ExprRef"}]},"innerRadius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`."},"interpolate":{"anyOf":[{"$ref":"#/definitions/Interpolate","description":"The line interpolation method to use for line and area marks. One of the following:\\n- `\\"linear\\"`: piecewise linear segments, as in a polyline.\\n- `\\"linear-closed\\"`: close the linear segments to form a polygon.\\n- `\\"step\\"`: alternate between horizontal and vertical segments, as in a step function.\\n- `\\"step-before\\"`: alternate between vertical and horizontal segments, as in a step function.\\n- `\\"step-after\\"`: alternate between horizontal and vertical segments, as in a step function.\\n- `\\"basis\\"`: a B-spline, with control point duplication on the ends.\\n- `\\"basis-open\\"`: an open B-spline; may not intersect the start or end.\\n- `\\"basis-closed\\"`: a closed B-spline, as in a loop.\\n- `\\"cardinal\\"`: a Cardinal spline, with control point duplication on the ends.\\n- `\\"cardinal-open\\"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\\n- `\\"cardinal-closed\\"`: a closed Cardinal spline, as in a loop.\\n- `\\"bundle\\"`: equivalent to basis, except the tension parameter is used to straighten the spline.\\n- `\\"monotone\\"`: cubic interpolation that preserves monotonicity in y."},{"$ref":"#/definitions/ExprRef"}]},"invalid":{"description":"Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).\\n- If set to `\\"filter\\"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).\\n- If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.","enum":["filter",null],"type":["string","null"]},"limit":{"anyOf":[{"description":"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\\n\\n__Default value:__ `0` -- indicating no limit","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"line":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/OverlayMarkDef"}],"description":"A flag for overlaying line on top of area marks, or an object defining the properties of the overlayed lines.\\n\\n- If this value is an empty object (`{}`) or `true`, lines with default properties will be used.\\n\\n- If this value is `false`, no lines would be automatically added to area marks.\\n\\n__Default value:__ `false`."},"lineBreak":{"anyOf":[{"description":"A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property is ignored if the text is array-valued.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"lineHeight":{"anyOf":[{"description":"The line height in pixels (the spacing between subsequent lines of text) for multi-line text marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"opacity":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The overall opacity (value between [0,1]).\\n\\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.","maximum":1,"minimum":0},"order":{"description":"For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.","type":["null","boolean"]},"orient":{"$ref":"#/definitions/Orientation","description":"The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.\\n- For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.\\n- For area, this property determines the orient property of the Vega output.\\n- For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored."},"outerRadius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`."},"padAngle":{"anyOf":[{"description":"The angular padding applied to sides of the arc, in radians.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"point":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/OverlayMarkDef"},{"const":"transparent","type":"string"}],"description":"A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.\\n\\n- If this property is `\\"transparent\\"`, transparent points will be used (for enhancing tooltips and selections).\\n\\n- If this property is an empty object (`{}`) or `true`, filled points with default properties will be used.\\n\\n- If this property is `false`, no points would be automatically added to line or area marks.\\n\\n__Default value:__ `false`."},"radius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"For arc mark, the primary (outer) radius in pixels.\\n\\nFor text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties."},"radius2":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The secondary (inner) radius in pixels of arc marks."},"radius2Offset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Offset for radius2."},"radiusOffset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Offset for radius."},"shape":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/SymbolShape"},{"type":"string"}],"description":"Shape of the point marks. Supported values include:\\n- plotting shapes: `\\"circle\\"`, `\\"square\\"`, `\\"cross\\"`, `\\"diamond\\"`, `\\"triangle-up\\"`, `\\"triangle-down\\"`, `\\"triangle-right\\"`, or `\\"triangle-left\\"`.\\n- the line symbol `\\"stroke\\"`\\n- centered directional shapes `\\"arrow\\"`, `\\"wedge\\"`, or `\\"triangle\\"`\\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\\n\\n__Default value:__ `\\"circle\\"`"},{"$ref":"#/definitions/ExprRef"}]},"size":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Default size for marks.\\n- For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.\\n- For `bar`, this represents the band size of the bar, in pixels.\\n- For `text`, this represents the font size, in pixels.\\n\\n__Default value:__\\n- `30` for point, circle, square marks; width/height\'s `step`\\n- `2` for bar marks with discrete dimensions;\\n- `5` for bar marks with continuous dimensions;\\n- `11` for text marks.","minimum":0},"smooth":{"anyOf":[{"description":"A boolean flag (default true) indicating if the image should be smoothed when resized. If false, individual pixels should be scaled directly rather than interpolated with smoothing. For SVG rendering, this option may not work in some browsers due to lack of standardization.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"stroke":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.\\n\\n__Default value:__ (None)"},"strokeCap":{"anyOf":[{"$ref":"#/definitions/StrokeCap","description":"The stroke cap for line ending style. One of `\\"butt\\"`, `\\"round\\"`, or `\\"square\\"`.\\n\\n__Default value:__ `\\"butt\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeDash":{"anyOf":[{"description":"An array of alternating stroke, space lengths for creating dashed or dotted lines.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"strokeDashOffset":{"anyOf":[{"description":"The offset (in pixels) into which to begin drawing with the stroke dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeJoin":{"anyOf":[{"$ref":"#/definitions/StrokeJoin","description":"The stroke line join method. One of `\\"miter\\"`, `\\"round\\"` or `\\"bevel\\"`.\\n\\n__Default value:__ `\\"miter\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeMiterLimit":{"anyOf":[{"description":"The miter limit at which to bevel a line join.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOffset":{"anyOf":[{"description":"The offset in pixels at which to draw the group stroke and fill. If unspecified, the default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths align with the pixel grid.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOpacity":{"anyOf":[{"description":"The stroke opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeWidth":{"anyOf":[{"description":"The stroke width, in pixels.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"style":{"anyOf":[{"type":"string"},{"items":{"type":"string"},"type":"array"}],"description":"A string or array of strings indicating the name of custom styles to apply to the mark. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles. Any [mark properties](https://vega.github.io/vega-lite/docs/encoding.html#mark-prop) explicitly defined within the `encoding` will override a style default.\\n\\n__Default value:__ The mark\'s name. For example, a bar mark will have style `\\"bar\\"` by default. __Note:__ Any specified style will augment the default style. For example, a bar mark with `\\"style\\": \\"foo\\"` will receive from `config.style.bar` and `config.style.foo` (the specified style `\\"foo\\"` has higher precedence)."},"tension":{"anyOf":[{"description":"Depending on the interpolation type, sets the tension parameter (for line and area marks).","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"text":{"anyOf":[{"$ref":"#/definitions/Text","description":"Placeholder text if the `text` channel is not specified"},{"$ref":"#/definitions/ExprRef"}]},"theta":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"- For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)\\n\\n- For text marks, polar coordinate angle in radians.","maximum":360,"minimum":0},"theta2":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise."},"theta2Offset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Offset for theta2."},"thetaOffset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Offset for theta."},"thickness":{"description":"Thickness of the tick mark.\\n\\n__Default value:__  `1`","minimum":0,"type":"number"},"timeUnitBandPosition":{"description":"Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step. If set to `0.5`, the marks will be positioned in the middle of the time unit band step.","type":"number"},"timeUnitBandSize":{"description":"Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step. If set to `0.5`, bandwidth of the marks will be half of the time unit band step.","type":"number"},"tooltip":{"anyOf":[{"type":"number"},{"type":"string"},{"type":"boolean"},{"$ref":"#/definitions/TooltipContent"},{"$ref":"#/definitions/ExprRef"},{"type":"null"}],"description":"The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\\n\\n- If `tooltip` is `true` or `{\\"content\\": \\"encoding\\"}`, then all fields from `encoding` will be used.\\n- If `tooltip` is `{\\"content\\": \\"data\\"}`, then all fields that appear in the highlighted data point will be used.\\n- If set to `null` or `false`, then no tooltip will be used.\\n\\nSee the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.\\n\\n__Default value:__ `null`"},"type":{"$ref":"#/definitions/Mark","description":"The mark type. This could a primitive mark type (one of `\\"bar\\"`, `\\"circle\\"`, `\\"square\\"`, `\\"tick\\"`, `\\"line\\"`, `\\"area\\"`, `\\"point\\"`, `\\"geoshape\\"`, `\\"rule\\"`, and `\\"text\\"`) or a composite mark type (`\\"boxplot\\"`, `\\"errorband\\"`, `\\"errorbar\\"`)."},"url":{"anyOf":[{"$ref":"#/definitions/URI","description":"The URL of the image file for image marks."},{"$ref":"#/definitions/ExprRef"}]},"width":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RelativeBandSize"}],"description":"Width of the marks.  One of:\\n\\n- A number representing a fixed pixel width.\\n\\n- A relative band size definition.  For example, `{band: 0.5}` represents half of the band."},"x":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"X coordinates of the marks, or width of horizontal `\\"bar\\"` and `\\"area\\"` without specified `x2` or `width`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"x2":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"X2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"x2Offset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Offset for x2-position."},"xOffset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Offset for x-position."},"y":{"anyOf":[{"type":"number"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Y coordinates of the marks, or height of vertical `\\"bar\\"` and `\\"area\\"` without specified `y2` or `height`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."},"y2":{"anyOf":[{"type":"number"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Y2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."},"y2Offset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Offset for y2-position."},"yOffset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Offset for y-position."}},"required":["type"],"type":"object"},"MarkPropDef<(Gradient|string|null)>":{"anyOf":[{"$ref":"#/definitions/FieldOrDatumDefWithCondition<MarkPropFieldDef,(Gradient|string|null)>"},{"$ref":"#/definitions/FieldOrDatumDefWithCondition<DatumDef,(Gradient|string|null)>"},{"$ref":"#/definitions/ValueDefWithCondition<MarkPropFieldOrDatumDef,(Gradient|string|null)>"}]},"MarkPropDef<(string|null),TypeForShape>":{"anyOf":[{"$ref":"#/definitions/FieldOrDatumDefWithCondition<MarkPropFieldDef<TypeForShape>,(string|null)>"},{"$ref":"#/definitions/FieldOrDatumDefWithCondition<DatumDef,(string|null)>"},{"$ref":"#/definitions/ValueDefWithCondition<MarkPropFieldOrDatumDef<TypeForShape>,(string|null)>"}]},"MarkPropDef<number>":{"anyOf":[{"$ref":"#/definitions/FieldOrDatumDefWithCondition<MarkPropFieldDef,number>"},{"$ref":"#/definitions/FieldOrDatumDefWithCondition<DatumDef,number>"},{"$ref":"#/definitions/ValueDefWithCondition<MarkPropFieldOrDatumDef,number>"}]},"MarkPropDef<number[]>":{"anyOf":[{"$ref":"#/definitions/FieldOrDatumDefWithCondition<MarkPropFieldDef,number[]>"},{"$ref":"#/definitions/FieldOrDatumDefWithCondition<DatumDef,number[]>"},{"$ref":"#/definitions/ValueDefWithCondition<MarkPropFieldOrDatumDef,number[]>"}]},"MarkType":{"enum":["arc","area","image","group","line","path","rect","rule","shape","symbol","text","trail"],"type":"string"},"MergedStream":{"additionalProperties":false,"properties":{"between":{"items":{"$ref":"#/definitions/Stream"},"type":"array"},"consume":{"type":"boolean"},"debounce":{"type":"number"},"filter":{"anyOf":[{"$ref":"#/definitions/Expr"},{"items":{"$ref":"#/definitions/Expr"},"type":"array"}]},"markname":{"type":"string"},"marktype":{"$ref":"#/definitions/MarkType"},"merge":{"items":{"$ref":"#/definitions/Stream"},"type":"array"},"throttle":{"type":"number"}},"required":["merge"],"type":"object"},"Month":{"maximum":12,"minimum":1,"type":"number"},"MultiTimeUnit":{"anyOf":[{"$ref":"#/definitions/LocalMultiTimeUnit"},{"$ref":"#/definitions/UtcMultiTimeUnit"}]},"NamedData":{"additionalProperties":false,"properties":{"format":{"$ref":"#/definitions/DataFormat","description":"An object that specifies the format for parsing the data."},"name":{"description":"Provide a placeholder name and bind data at runtime.","type":"string"}},"required":["name"],"type":"object"},"NonArgAggregateOp":{"enum":["average","count","distinct","max","mean","median","min","missing","product","q1","q3","ci0","ci1","stderr","stdev","stdevp","sum","valid","values","variance","variancep"],"type":"string"},"NonLayerRepeatSpec":{"additionalProperties":false,"description":"Base interface for a repeat specification.","properties":{"align":{"anyOf":[{"$ref":"#/definitions/LayoutAlign"},{"$ref":"#/definitions/RowCol<LayoutAlign>"}],"description":"The alignment to apply to grid rows and columns. The supported string values are `\\"all\\"`, `\\"each\\"`, and `\\"none\\"`.\\n\\n- For `\\"none\\"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\\n- For `\\"each\\"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\\n- For `\\"all\\"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\\n\\nAlternatively, an object value of the form `{\\"row\\": string, \\"column\\": string}` can be used to supply different alignments for rows and columns.\\n\\n__Default value:__ `\\"all\\"`."},"bounds":{"description":"The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\\n\\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\\n\\n__Default value:__ `\\"full\\"`","enum":["full","flush"],"type":"string"},"center":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/RowCol<boolean>"}],"description":"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\\n\\nAn object value of the form `{\\"row\\": boolean, \\"column\\": boolean}` can be used to supply different centering values for rows and columns.\\n\\n__Default value:__ `false`"},"columns":{"description":"The number of columns to include in the view composition layout.\\n\\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\\n\\n__Note__:\\n\\n1) This property is only for:\\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\\n\\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).","type":"number"},"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"name":{"description":"Name of the visualization for later reference.","type":"string"},"repeat":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"$ref":"#/definitions/RepeatMapping"}],"description":"Definition for fields to be repeated. One of: 1) An array of fields to be repeated. If `\\"repeat\\"` is an array, the field can be referred to as `{\\"repeat\\": \\"repeat\\"}`. The repeated views are laid out in a wrapped row. You can set the number of columns to control the wrapping. 2) An object that maps `\\"row\\"` and/or `\\"column\\"` to the listed fields to be repeated along the particular orientations. The objects `{\\"repeat\\": \\"row\\"}` and `{\\"repeat\\": \\"column\\"}` can be used to refer to the repeated field respectively."},"resolve":{"$ref":"#/definitions/Resolve","description":"Scale, axis, and legend resolutions for view composition specifications."},"spacing":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/RowCol<number>"}],"description":"The spacing in pixels between sub-views of the composition operator. An object of the form `{\\"row\\": number, \\"column\\": number}` can be used to set different spacing values for rows and columns.\\n\\n__Default value__: Depends on `\\"spacing\\"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)"},"spec":{"$ref":"#/definitions/NonNormalizedSpec","description":"A specification of the view that gets repeated."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"}},"required":["repeat","spec"],"type":"object"},"NonNormalizedSpec":{"$ref":"#/definitions/Spec"},"NumberLocale":{"additionalProperties":false,"description":"Locale definition for formatting numbers.","properties":{"currency":{"$ref":"#/definitions/Vector2<string>","description":"The currency prefix and suffix (e.g., [\\"$\\", \\"\\"])."},"decimal":{"description":"The decimal point (e.g., \\".\\").","type":"string"},"grouping":{"description":"The array of group sizes (e.g., [3]), cycled as needed.","items":{"type":"number"},"type":"array"},"minus":{"description":"The minus sign (defaults to hyphen-minus, \\"-\\").","type":"string"},"nan":{"description":"The not-a-number value (defaults to \\"NaN\\").","type":"string"},"numerals":{"$ref":"#/definitions/Vector10<string>","description":"An array of ten strings to replace the numerals 0-9."},"percent":{"description":"The percent sign (defaults to \\"%\\").","type":"string"},"thousands":{"description":"The group separator (e.g., \\",\\").","type":"string"}},"required":["decimal","thousands","grouping","currency"],"type":"object"},"NumericArrayMarkPropDef":{"$ref":"#/definitions/MarkPropDef<number[]>"},"NumericMarkPropDef":{"$ref":"#/definitions/MarkPropDef<number>"},"OrderFieldDef":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"sort":{"$ref":"#/definitions/SortOrder","description":"The sort order. One of `\\"ascending\\"` (default) or `\\"descending\\"`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"OrderValueDef":{"additionalProperties":false,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<number>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<number>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"value":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["value"],"type":"object"},"Orient":{"enum":["left","right","top","bottom"],"type":"string"},"Orientation":{"enum":["horizontal","vertical"],"type":"string"},"OverlayMarkDef":{"additionalProperties":false,"properties":{"align":{"anyOf":[{"$ref":"#/definitions/Align"},{"$ref":"#/definitions/ExprRef"}],"description":"The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `\\"left\\"`, `\\"right\\"`, `\\"center\\"`.\\n\\n__Note:__ Expression reference is *not* supported for range marks."},"angle":{"anyOf":[{"description":"The rotation angle of the text, in degrees.","maximum":360,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"aria":{"anyOf":[{"description":"A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \\"aria-hidden\\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"ariaRole":{"anyOf":[{"description":"Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \\"role\\" attribute. Warning: this property is experimental and may be changed in the future.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"ariaRoleDescription":{"anyOf":[{"description":"A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \\"aria-roledescription\\" attribute. Warning: this property is experimental and may be changed in the future.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"aspect":{"anyOf":[{"description":"Whether to keep aspect ratio of image marks.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"baseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline"},{"$ref":"#/definitions/ExprRef"}],"description":"For text marks, the vertical text baseline. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, `\\"line-bottom\\"`, or an expression reference that provides one of the valid values. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.\\n\\nFor range marks, the vertical alignment of the marks. One of `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`.\\n\\n__Note:__ Expression reference is *not* supported for range marks."},"blend":{"anyOf":[{"$ref":"#/definitions/Blend","description":"The color blend mode for drawing an item on its current background. Any valid [CSS mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value can be used.\\n\\n__Default value: `\\"source-over\\"`"},{"$ref":"#/definitions/ExprRef"}]},"clip":{"description":"Whether a mark be clipped to the enclosing group’s width and height.","type":"boolean"},"color":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"$ref":"#/definitions/ExprRef"}],"description":"Default color.\\n\\n__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> `\\"#4682b4\\"`\\n\\n__Note:__\\n- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\\n- The `fill` and `stroke` properties have higher precedence than `color` and will override `color`."},"cornerRadius":{"anyOf":[{"description":"The radius in pixels of rounded rectangles or arcs\' corners.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusBottomLeft":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' bottom left corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusBottomRight":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' bottom right corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusTopLeft":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' top right corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusTopRight":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' top left corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cursor":{"anyOf":[{"$ref":"#/definitions/Cursor","description":"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},{"$ref":"#/definitions/ExprRef"}]},"description":{"anyOf":[{"description":"A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\\"aria-label\\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"dir":{"anyOf":[{"$ref":"#/definitions/TextDirection","description":"The direction of the text. One of `\\"ltr\\"` (left-to-right) or `\\"rtl\\"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\\n\\n__Default value:__ `\\"ltr\\"`"},{"$ref":"#/definitions/ExprRef"}]},"dx":{"anyOf":[{"description":"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"dy":{"anyOf":[{"description":"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"ellipsis":{"anyOf":[{"description":"The ellipsis string for text truncated in response to the limit parameter.\\n\\n__Default value:__ `\\"…\\"`","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"endAngle":{"anyOf":[{"description":"The end angle in radians for arc marks. A value of `0` indicates up (north), increasing values proceed clockwise.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fill":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.\\n\\n__Default value:__ (None)"},"fillOpacity":{"anyOf":[{"description":"The fill opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"filled":{"description":"Whether the mark\'s color should be used as fill color instead of stroke color.\\n\\n__Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.\\n\\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).","type":"boolean"},"font":{"anyOf":[{"description":"The typeface to set the text in (e.g., `\\"Helvetica Neue\\"`).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"fontSize":{"anyOf":[{"description":"The font size, in pixels.\\n\\n__Default value:__ `11`","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"The font style (e.g., `\\"italic\\"`)."},{"$ref":"#/definitions/ExprRef"}]},"fontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"The font weight. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},{"$ref":"#/definitions/ExprRef"}]},"height":{"anyOf":[{"description":"Height of the marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"href":{"anyOf":[{"$ref":"#/definitions/URI","description":"A URL to load upon mouse click. If defined, the mark acts as a hyperlink."},{"$ref":"#/definitions/ExprRef"}]},"innerRadius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`."},"interpolate":{"anyOf":[{"$ref":"#/definitions/Interpolate","description":"The line interpolation method to use for line and area marks. One of the following:\\n- `\\"linear\\"`: piecewise linear segments, as in a polyline.\\n- `\\"linear-closed\\"`: close the linear segments to form a polygon.\\n- `\\"step\\"`: alternate between horizontal and vertical segments, as in a step function.\\n- `\\"step-before\\"`: alternate between vertical and horizontal segments, as in a step function.\\n- `\\"step-after\\"`: alternate between horizontal and vertical segments, as in a step function.\\n- `\\"basis\\"`: a B-spline, with control point duplication on the ends.\\n- `\\"basis-open\\"`: an open B-spline; may not intersect the start or end.\\n- `\\"basis-closed\\"`: a closed B-spline, as in a loop.\\n- `\\"cardinal\\"`: a Cardinal spline, with control point duplication on the ends.\\n- `\\"cardinal-open\\"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\\n- `\\"cardinal-closed\\"`: a closed Cardinal spline, as in a loop.\\n- `\\"bundle\\"`: equivalent to basis, except the tension parameter is used to straighten the spline.\\n- `\\"monotone\\"`: cubic interpolation that preserves monotonicity in y."},{"$ref":"#/definitions/ExprRef"}]},"invalid":{"description":"Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).\\n- If set to `\\"filter\\"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).\\n- If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.","enum":["filter",null],"type":["string","null"]},"limit":{"anyOf":[{"description":"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\\n\\n__Default value:__ `0` -- indicating no limit","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"lineBreak":{"anyOf":[{"description":"A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property is ignored if the text is array-valued.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"lineHeight":{"anyOf":[{"description":"The line height in pixels (the spacing between subsequent lines of text) for multi-line text marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"opacity":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The overall opacity (value between [0,1]).\\n\\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.","maximum":1,"minimum":0},"order":{"description":"For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.","type":["null","boolean"]},"orient":{"$ref":"#/definitions/Orientation","description":"The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.\\n- For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.\\n- For area, this property determines the orient property of the Vega output.\\n- For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored."},"outerRadius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`."},"padAngle":{"anyOf":[{"description":"The angular padding applied to sides of the arc, in radians.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"radius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"For arc mark, the primary (outer) radius in pixels.\\n\\nFor text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties."},"radius2":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The secondary (inner) radius in pixels of arc marks."},"radius2Offset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Offset for radius2."},"radiusOffset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Offset for radius."},"shape":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/SymbolShape"},{"type":"string"}],"description":"Shape of the point marks. Supported values include:\\n- plotting shapes: `\\"circle\\"`, `\\"square\\"`, `\\"cross\\"`, `\\"diamond\\"`, `\\"triangle-up\\"`, `\\"triangle-down\\"`, `\\"triangle-right\\"`, or `\\"triangle-left\\"`.\\n- the line symbol `\\"stroke\\"`\\n- centered directional shapes `\\"arrow\\"`, `\\"wedge\\"`, or `\\"triangle\\"`\\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\\n\\n__Default value:__ `\\"circle\\"`"},{"$ref":"#/definitions/ExprRef"}]},"size":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Default size for marks.\\n- For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.\\n- For `bar`, this represents the band size of the bar, in pixels.\\n- For `text`, this represents the font size, in pixels.\\n\\n__Default value:__\\n- `30` for point, circle, square marks; width/height\'s `step`\\n- `2` for bar marks with discrete dimensions;\\n- `5` for bar marks with continuous dimensions;\\n- `11` for text marks.","minimum":0},"smooth":{"anyOf":[{"description":"A boolean flag (default true) indicating if the image should be smoothed when resized. If false, individual pixels should be scaled directly rather than interpolated with smoothing. For SVG rendering, this option may not work in some browsers due to lack of standardization.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"startAngle":{"anyOf":[{"description":"The start angle in radians for arc marks. A value of `0` indicates up (north), increasing values proceed clockwise.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"stroke":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.\\n\\n__Default value:__ (None)"},"strokeCap":{"anyOf":[{"$ref":"#/definitions/StrokeCap","description":"The stroke cap for line ending style. One of `\\"butt\\"`, `\\"round\\"`, or `\\"square\\"`.\\n\\n__Default value:__ `\\"butt\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeDash":{"anyOf":[{"description":"An array of alternating stroke, space lengths for creating dashed or dotted lines.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"strokeDashOffset":{"anyOf":[{"description":"The offset (in pixels) into which to begin drawing with the stroke dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeJoin":{"anyOf":[{"$ref":"#/definitions/StrokeJoin","description":"The stroke line join method. One of `\\"miter\\"`, `\\"round\\"` or `\\"bevel\\"`.\\n\\n__Default value:__ `\\"miter\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeMiterLimit":{"anyOf":[{"description":"The miter limit at which to bevel a line join.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOffset":{"anyOf":[{"description":"The offset in pixels at which to draw the group stroke and fill. If unspecified, the default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths align with the pixel grid.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOpacity":{"anyOf":[{"description":"The stroke opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeWidth":{"anyOf":[{"description":"The stroke width, in pixels.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"style":{"anyOf":[{"type":"string"},{"items":{"type":"string"},"type":"array"}],"description":"A string or array of strings indicating the name of custom styles to apply to the mark. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles. Any [mark properties](https://vega.github.io/vega-lite/docs/encoding.html#mark-prop) explicitly defined within the `encoding` will override a style default.\\n\\n__Default value:__ The mark\'s name. For example, a bar mark will have style `\\"bar\\"` by default. __Note:__ Any specified style will augment the default style. For example, a bar mark with `\\"style\\": \\"foo\\"` will receive from `config.style.bar` and `config.style.foo` (the specified style `\\"foo\\"` has higher precedence)."},"tension":{"anyOf":[{"description":"Depending on the interpolation type, sets the tension parameter (for line and area marks).","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"text":{"anyOf":[{"$ref":"#/definitions/Text","description":"Placeholder text if the `text` channel is not specified"},{"$ref":"#/definitions/ExprRef"}]},"theta":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"- For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)\\n\\n- For text marks, polar coordinate angle in radians.","maximum":360,"minimum":0},"theta2":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise."},"theta2Offset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Offset for theta2."},"thetaOffset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Offset for theta."},"timeUnitBandPosition":{"description":"Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step. If set to `0.5`, the marks will be positioned in the middle of the time unit band step.","type":"number"},"timeUnitBandSize":{"description":"Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step. If set to `0.5`, bandwidth of the marks will be half of the time unit band step.","type":"number"},"tooltip":{"anyOf":[{"type":"number"},{"type":"string"},{"type":"boolean"},{"$ref":"#/definitions/TooltipContent"},{"$ref":"#/definitions/ExprRef"},{"type":"null"}],"description":"The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\\n\\n- If `tooltip` is `true` or `{\\"content\\": \\"encoding\\"}`, then all fields from `encoding` will be used.\\n- If `tooltip` is `{\\"content\\": \\"data\\"}`, then all fields that appear in the highlighted data point will be used.\\n- If set to `null` or `false`, then no tooltip will be used.\\n\\nSee the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.\\n\\n__Default value:__ `null`"},"url":{"anyOf":[{"$ref":"#/definitions/URI","description":"The URL of the image file for image marks."},{"$ref":"#/definitions/ExprRef"}]},"width":{"anyOf":[{"description":"Width of the marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"x":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"X coordinates of the marks, or width of horizontal `\\"bar\\"` and `\\"area\\"` without specified `x2` or `width`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"x2":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"X2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"x2Offset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Offset for x2-position."},"xOffset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Offset for x-position."},"y":{"anyOf":[{"type":"number"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Y coordinates of the marks, or height of vertical `\\"bar\\"` and `\\"area\\"` without specified `y2` or `height`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."},"y2":{"anyOf":[{"type":"number"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Y2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."},"y2Offset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Offset for y2-position."},"yOffset":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Offset for y-position."}},"type":"object"},"Padding":{"anyOf":[{"type":"number"},{"additionalProperties":false,"properties":{"bottom":{"type":"number"},"left":{"type":"number"},"right":{"type":"number"},"top":{"type":"number"}},"type":"object"}],"minimum":0},"ParameterExtent":{"anyOf":[{"additionalProperties":false,"properties":{"field":{"$ref":"#/definitions/FieldName","description":"If a selection parameter is specified, the field name to extract selected values for when the selection is [projected](https://vega.github.io/vega-lite/docs/selection.html#project) over multiple fields or encodings."},"param":{"$ref":"#/definitions/ParameterName","description":"The name of a parameter."}},"required":["param"],"type":"object"},{"additionalProperties":false,"properties":{"encoding":{"$ref":"#/definitions/SingleDefUnitChannel","description":"If a selection parameter is specified, the encoding channel to extract selected values for when a selection is [projected](https://vega.github.io/vega-lite/docs/selection.html#project) over multiple fields or encodings."},"param":{"$ref":"#/definitions/ParameterName","description":"The name of a parameter."}},"required":["param"],"type":"object"}]},"ParameterName":{"type":"string"},"ParameterPredicate":{"additionalProperties":false,"properties":{"empty":{"description":"For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.","type":"boolean"},"param":{"$ref":"#/definitions/ParameterName","description":"Filter using a parameter name."}},"required":["param"],"type":"object"},"Parse":{"additionalProperties":{"$ref":"#/definitions/ParseValue"},"type":"object"},"ParseValue":{"anyOf":[{"type":"null"},{"type":"string"},{"const":"string","type":"string"},{"const":"boolean","type":"string"},{"const":"date","type":"string"},{"const":"number","type":"string"}]},"PivotTransform":{"additionalProperties":false,"properties":{"groupby":{"description":"The optional data fields to group by. If not specified, a single group containing all data objects will be used.","items":{"$ref":"#/definitions/FieldName"},"type":"array"},"limit":{"description":"An optional parameter indicating the maximum number of pivoted fields to generate. The default (`0`) applies no limit. The pivoted `pivot` names are sorted in ascending order prior to enforcing the limit. __Default value:__ `0`","type":"number"},"op":{"$ref":"#/definitions/AggregateOp","description":"The aggregation operation to apply to grouped `value` field values. __Default value:__ `sum`"},"pivot":{"$ref":"#/definitions/FieldName","description":"The data field to pivot on. The unique values of this field become new field names in the output stream."},"value":{"$ref":"#/definitions/FieldName","description":"The data field to populate pivoted fields. The aggregate values of this field become the values of the new pivoted fields."}},"required":["pivot","value"],"type":"object"},"PointSelectionConfig":{"additionalProperties":false,"properties":{"clear":{"anyOf":[{"$ref":"#/definitions/Stream"},{"type":"string"},{"type":"boolean"}],"description":"Clears the selection, emptying it of all values. This property can be a [Event Stream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable clear.\\n\\n__Default value:__ `dblclick`.\\n\\n__See also:__ [`clear` examples ](https://vega.github.io/vega-lite/docs/selection.html#clear) in the documentation."},"encodings":{"description":"An array of encoding channels. The corresponding data field values must match for a data tuple to fall within the selection.\\n\\n__See also:__ The [projection with `encodings` and `fields` section](https://vega.github.io/vega-lite/docs/selection.html#project) in the documentation.","items":{"$ref":"#/definitions/SingleDefUnitChannel"},"type":"array"},"fields":{"description":"An array of field names whose values must match for a data tuple to fall within the selection.\\n\\n__See also:__ The [projection with `encodings` and `fields` section](https://vega.github.io/vega-lite/docs/selection.html#project) in the documentation.","items":{"$ref":"#/definitions/FieldName"},"type":"array"},"nearest":{"description":"When true, an invisible voronoi diagram is computed to accelerate discrete selection. The data value _nearest_ the mouse cursor is added to the selection.\\n\\n__Default value:__ `false`, which means that data values must be interacted with directly (e.g., clicked on) to be added to the selection.\\n\\n__See also:__ [`nearest` examples](https://vega.github.io/vega-lite/docs/selection.html#nearest) documentation.","type":"boolean"},"on":{"anyOf":[{"$ref":"#/definitions/Stream"},{"type":"string"}],"description":"A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection. For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).\\n\\n__See also:__ [`on` examples](https://vega.github.io/vega-lite/docs/selection.html#on) in the documentation."},"resolve":{"$ref":"#/definitions/SelectionResolution","description":"With layered and multi-view displays, a strategy that determines how selections\' data queries are resolved when applied in a filter transform, conditional encoding rule, or scale domain.\\n\\nOne of:\\n- `\\"global\\"` -- only one brush exists for the entire SPLOM. When the user begins to drag, any previous brushes are cleared, and a new one is constructed.\\n- `\\"union\\"` -- each cell contains its own brush, and points are highlighted if they lie within _any_ of these individual brushes.\\n- `\\"intersect\\"` -- each cell contains its own brush, and points are highlighted only if they fall within _all_ of these individual brushes.\\n\\n__Default value:__ `global`.\\n\\n__See also:__ [`resolve` examples](https://vega.github.io/vega-lite/docs/selection.html#resolve) in the documentation."},"toggle":{"description":"Controls whether data values should be toggled (inserted or removed from a point selection) or only ever inserted into multi selections.\\n\\nOne of:\\n- `true` -- the default behavior, which corresponds to `\\"event.shiftKey\\"`.  As a result, data values are toggled when the user interacts with the shift-key pressed.\\n- `false` -- disables toggling behaviour; as the user interacts, data values are only inserted into the multi selection and never removed.\\n- A [Vega expression](https://vega.github.io/vega/docs/expressions/) which is re-evaluated as the user interacts. If the expression evaluates to `true`, the data value is toggled into or out of the multi selection. If the expression evaluates to `false`, the multi selection is first clear, and the data value is then inserted. For example, setting the value to the Vega expression `\\"true\\"` will toggle data values without the user pressing the shift-key.\\n\\n__Default value:__ `true`\\n\\n__See also:__ [`toggle` examples](https://vega.github.io/vega-lite/docs/selection.html#toggle) in the documentation.","type":["string","boolean"]},"type":{"const":"point","description":"Determines the default event processing and data query for the selection. Vega-Lite currently supports two selection types:\\n\\n- `\\"point\\"` -- to select multiple discrete data values; the first value is selected on `click` and additional values toggled on shift-click.\\n- `\\"interval\\"` -- to select a continuous range of data values on `drag`.","type":"string"}},"required":["type"],"type":"object"},"PointSelectionConfigWithoutType":{"additionalProperties":false,"properties":{"clear":{"anyOf":[{"$ref":"#/definitions/Stream"},{"type":"string"},{"type":"boolean"}],"description":"Clears the selection, emptying it of all values. This property can be a [Event Stream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable clear.\\n\\n__Default value:__ `dblclick`.\\n\\n__See also:__ [`clear` examples ](https://vega.github.io/vega-lite/docs/selection.html#clear) in the documentation."},"encodings":{"description":"An array of encoding channels. The corresponding data field values must match for a data tuple to fall within the selection.\\n\\n__See also:__ The [projection with `encodings` and `fields` section](https://vega.github.io/vega-lite/docs/selection.html#project) in the documentation.","items":{"$ref":"#/definitions/SingleDefUnitChannel"},"type":"array"},"fields":{"description":"An array of field names whose values must match for a data tuple to fall within the selection.\\n\\n__See also:__ The [projection with `encodings` and `fields` section](https://vega.github.io/vega-lite/docs/selection.html#project) in the documentation.","items":{"$ref":"#/definitions/FieldName"},"type":"array"},"nearest":{"description":"When true, an invisible voronoi diagram is computed to accelerate discrete selection. The data value _nearest_ the mouse cursor is added to the selection.\\n\\n__Default value:__ `false`, which means that data values must be interacted with directly (e.g., clicked on) to be added to the selection.\\n\\n__See also:__ [`nearest` examples](https://vega.github.io/vega-lite/docs/selection.html#nearest) documentation.","type":"boolean"},"on":{"anyOf":[{"$ref":"#/definitions/Stream"},{"type":"string"}],"description":"A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection. For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).\\n\\n__See also:__ [`on` examples](https://vega.github.io/vega-lite/docs/selection.html#on) in the documentation."},"resolve":{"$ref":"#/definitions/SelectionResolution","description":"With layered and multi-view displays, a strategy that determines how selections\' data queries are resolved when applied in a filter transform, conditional encoding rule, or scale domain.\\n\\nOne of:\\n- `\\"global\\"` -- only one brush exists for the entire SPLOM. When the user begins to drag, any previous brushes are cleared, and a new one is constructed.\\n- `\\"union\\"` -- each cell contains its own brush, and points are highlighted if they lie within _any_ of these individual brushes.\\n- `\\"intersect\\"` -- each cell contains its own brush, and points are highlighted only if they fall within _all_ of these individual brushes.\\n\\n__Default value:__ `global`.\\n\\n__See also:__ [`resolve` examples](https://vega.github.io/vega-lite/docs/selection.html#resolve) in the documentation."},"toggle":{"description":"Controls whether data values should be toggled (inserted or removed from a point selection) or only ever inserted into multi selections.\\n\\nOne of:\\n- `true` -- the default behavior, which corresponds to `\\"event.shiftKey\\"`.  As a result, data values are toggled when the user interacts with the shift-key pressed.\\n- `false` -- disables toggling behaviour; as the user interacts, data values are only inserted into the multi selection and never removed.\\n- A [Vega expression](https://vega.github.io/vega/docs/expressions/) which is re-evaluated as the user interacts. If the expression evaluates to `true`, the data value is toggled into or out of the multi selection. If the expression evaluates to `false`, the multi selection is first clear, and the data value is then inserted. For example, setting the value to the Vega expression `\\"true\\"` will toggle data values without the user pressing the shift-key.\\n\\n__Default value:__ `true`\\n\\n__See also:__ [`toggle` examples](https://vega.github.io/vega-lite/docs/selection.html#toggle) in the documentation.","type":["string","boolean"]}},"type":"object"},"PolarDef":{"anyOf":[{"$ref":"#/definitions/PositionFieldDefBase"},{"$ref":"#/definitions/PositionDatumDefBase"},{"$ref":"#/definitions/PositionValueDef"}]},"Position2Def":{"anyOf":[{"$ref":"#/definitions/SecondaryFieldDef"},{"$ref":"#/definitions/DatumDef"},{"$ref":"#/definitions/PositionValueDef"}]},"PositionDatumDef":{"additionalProperties":false,"properties":{"axis":{"anyOf":[{"$ref":"#/definitions/Axis"},{"type":"null"}],"description":"An object defining properties of axis\'s gridlines, ticks and labels. If `null`, the axis for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [axis properties](https://vega.github.io/vega-lite/docs/axis.html) are applied.\\n\\n__See also:__ [`axis`](https://vega.github.io/vega-lite/docs/axis.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"impute":{"anyOf":[{"$ref":"#/definitions/ImputeParams"},{"type":"null"}],"description":"An object defining the properties of the Impute Operation to be applied. The field value of the other positional channel is taken as `key` of the `Impute` Operation. The field of the `color` channel if specified is used as `groupby` of the `Impute` Operation.\\n\\n__See also:__ [`impute`](https://vega.github.io/vega-lite/docs/impute.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"stack":{"anyOf":[{"$ref":"#/definitions/StackOffset"},{"type":"null"},{"type":"boolean"}],"description":"Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.\\n\\n`stack` can be one of the following values:\\n- `\\"zero\\"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).\\n- `\\"normalize\\"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>\\n-`\\"center\\"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).\\n- `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.\\n\\n__Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.\\n\\n__See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation."},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"PositionDatumDefBase":{"additionalProperties":false,"properties":{"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"stack":{"anyOf":[{"$ref":"#/definitions/StackOffset"},{"type":"null"},{"type":"boolean"}],"description":"Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.\\n\\n`stack` can be one of the following values:\\n- `\\"zero\\"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).\\n- `\\"normalize\\"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>\\n-`\\"center\\"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).\\n- `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.\\n\\n__Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.\\n\\n__See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation."},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"PositionDef":{"anyOf":[{"$ref":"#/definitions/PositionFieldDef"},{"$ref":"#/definitions/PositionDatumDef"},{"$ref":"#/definitions/PositionValueDef"}]},"PositionFieldDef":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"axis":{"anyOf":[{"$ref":"#/definitions/Axis"},{"type":"null"}],"description":"An object defining properties of axis\'s gridlines, ticks and labels. If `null`, the axis for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [axis properties](https://vega.github.io/vega-lite/docs/axis.html) are applied.\\n\\n__See also:__ [`axis`](https://vega.github.io/vega-lite/docs/axis.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"impute":{"anyOf":[{"$ref":"#/definitions/ImputeParams"},{"type":"null"}],"description":"An object defining the properties of the Impute Operation to be applied. The field value of the other positional channel is taken as `key` of the `Impute` Operation. The field of the `color` channel if specified is used as `groupby` of the `Impute` Operation.\\n\\n__See also:__ [`impute`](https://vega.github.io/vega-lite/docs/impute.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"stack":{"anyOf":[{"$ref":"#/definitions/StackOffset"},{"type":"null"},{"type":"boolean"}],"description":"Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.\\n\\n`stack` can be one of the following values:\\n- `\\"zero\\"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).\\n- `\\"normalize\\"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>\\n-`\\"center\\"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).\\n- `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.\\n\\n__Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.\\n\\n__See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"PositionFieldDefBase":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"stack":{"anyOf":[{"$ref":"#/definitions/StackOffset"},{"type":"null"},{"type":"boolean"}],"description":"Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.\\n\\n`stack` can be one of the following values:\\n- `\\"zero\\"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).\\n- `\\"normalize\\"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>\\n-`\\"center\\"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).\\n- `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.\\n\\n__Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.\\n\\n__See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"PositionValueDef":{"$ref":"#/definitions/ValueDef<(number|\\"width\\"|\\"height\\"|ExprRef)>"},"Predicate":{"anyOf":[{"$ref":"#/definitions/FieldEqualPredicate"},{"$ref":"#/definitions/FieldRangePredicate"},{"$ref":"#/definitions/FieldOneOfPredicate"},{"$ref":"#/definitions/FieldLTPredicate"},{"$ref":"#/definitions/FieldGTPredicate"},{"$ref":"#/definitions/FieldLTEPredicate"},{"$ref":"#/definitions/FieldGTEPredicate"},{"$ref":"#/definitions/FieldValidPredicate"},{"$ref":"#/definitions/ParameterPredicate"},{"type":"string"}]},"PrimitiveValue":{"type":["number","string","boolean","null"]},"Projection":{"additionalProperties":false,"properties":{"center":{"anyOf":[{"$ref":"#/definitions/Vector2<number>","description":"The projection\'s center, a two-element array of longitude and latitude in degrees.\\n\\n__Default value:__ `[0, 0]`"},{"$ref":"#/definitions/ExprRef"}]},"clipAngle":{"anyOf":[{"description":"The projection\'s clipping circle radius to the specified angle in degrees. If `null`, switches to [antimeridian](http://bl.ocks.org/mbostock/3788999) cutting rather than small-circle clipping.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"clipExtent":{"anyOf":[{"$ref":"#/definitions/Vector2<Vector2<number>>","description":"The projection\'s viewport clip extent to the specified bounds in pixels. The extent bounds are specified as an array `[[x0, y0], [x1, y1]]`, where `x0` is the left-side of the viewport, `y0` is the top, `x1` is the right and `y1` is the bottom. If `null`, no viewport clipping is performed."},{"$ref":"#/definitions/ExprRef"}]},"coefficient":{"anyOf":[{"description":"The coefficient parameter for the `hammer` projection.\\n\\n__Default value:__ `2`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"distance":{"anyOf":[{"description":"For the `satellite` projection, the distance from the center of the sphere to the point of view, as a proportion of the sphere’s radius. The recommended maximum clip angle for a given `distance` is acos(1 / distance) converted to degrees. If tilt is also applied, then more conservative clipping may be necessary.\\n\\n__Default value:__ `2.0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"extent":{"anyOf":[{"$ref":"#/definitions/Vector2<Vector2<number>>"},{"$ref":"#/definitions/ExprRef"}]},"fit":{"anyOf":[{"items":{"$ref":"#/definitions/GeoJsonFeature"},"type":"array"},{"items":{"$ref":"#/definitions/Fit"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"fraction":{"anyOf":[{"description":"The fraction parameter for the `bottomley` projection.\\n\\n__Default value:__ `0.5`, corresponding to a sin(ψ) where ψ = π/6.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"lobes":{"anyOf":[{"description":"The number of lobes in projections that support multi-lobe views: `berghaus`, `gingery`, or `healpix`. The default value varies based on the projection type.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"parallel":{"anyOf":[{"description":"The parallel parameter for projections that support it: `armadillo`, `bonne`, `craig`, `cylindricalEqualArea`, `cylindricalStereographic`, `hammerRetroazimuthal`, `loximuthal`, or `rectangularPolyconic`. The default value varies based on the projection type.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"parallels":{"anyOf":[{"description":"For conic projections, the [two standard parallels](https://en.wikipedia.org/wiki/Map_projection#Conic) that define the map layout. The default depends on the specific conic projection used.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"pointRadius":{"anyOf":[{"description":"The default radius (in pixels) to use when drawing GeoJSON `Point` and `MultiPoint` geometries. This parameter sets a constant default value. To modify the point radius in response to data, see the corresponding parameter of the GeoPath and GeoShape transforms.\\n\\n__Default value:__ `4.5`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"precision":{"anyOf":[{"description":"The threshold for the projection\'s [adaptive resampling](http://bl.ocks.org/mbostock/3795544) to the specified value in pixels. This value corresponds to the [Douglas–Peucker distance](http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm). If precision is not specified, returns the projection\'s current resampling precision which defaults to `√0.5 ≅ 0.70710…`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"radius":{"anyOf":[{"description":"The radius parameter for the `airy` or `gingery` projection. The default value varies based on the projection type.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"ratio":{"anyOf":[{"description":"The ratio parameter for the `hill`, `hufnagel`, or `wagner` projections. The default value varies based on the projection type.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"reflectX":{"anyOf":[{"description":"Sets whether or not the x-dimension is reflected (negated) in the output.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"reflectY":{"anyOf":[{"description":"Sets whether or not the y-dimension is reflected (negated) in the output.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"rotate":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/Vector2<number>"},{"$ref":"#/definitions/Vector3<number>"}],"description":"The projection\'s three-axis rotation to the specified angles, which must be a two- or three-element array of numbers [`lambda`, `phi`, `gamma`] specifying the rotation angles in degrees about each spherical axis. (These correspond to yaw, pitch and roll.)\\n\\n__Default value:__ `[0, 0, 0]`"},{"$ref":"#/definitions/ExprRef"}]},"scale":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The projection’s scale (zoom) factor, overriding automatic fitting. The default scale is projection-specific. The scale factor corresponds linearly to the distance between projected points; however, scale factor values are not equivalent across projections."},"size":{"anyOf":[{"$ref":"#/definitions/Vector2<number>","description":"Used in conjunction with fit, provides the width and height in pixels of the area to which the projection should be automatically fit."},{"$ref":"#/definitions/ExprRef"}]},"spacing":{"anyOf":[{"description":"The spacing parameter for the `lagrange` projection.\\n\\n__Default value:__ `0.5`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"tilt":{"anyOf":[{"description":"The tilt angle (in degrees) for the `satellite` projection.\\n\\n__Default value:__ `0`.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"translate":{"anyOf":[{"$ref":"#/definitions/Vector2<number>"},{"$ref":"#/definitions/ExprRef"}],"description":"The projection’s translation offset as a two-element array `[tx, ty]`."},"type":{"anyOf":[{"$ref":"#/definitions/ProjectionType"},{"$ref":"#/definitions/ExprRef"}],"description":"The cartographic projection to use. This value is case-insensitive, for example `\\"albers\\"` and `\\"Albers\\"` indicate the same projection type. You can find all valid projection types [in the documentation](https://vega.github.io/vega-lite/docs/projection.html#projection-types).\\n\\n__Default value:__ `equalEarth`"}},"type":"object"},"ProjectionConfig":{"$ref":"#/definitions/Projection","description":"Any property of Projection can be in config"},"ProjectionType":{"enum":["albers","albersUsa","azimuthalEqualArea","azimuthalEquidistant","conicConformal","conicEqualArea","conicEquidistant","equalEarth","equirectangular","gnomonic","identity","mercator","naturalEarth1","orthographic","stereographic","transverseMercator"],"type":"string"},"QuantileTransform":{"additionalProperties":false,"properties":{"as":{"description":"The output field names for the probability and quantile values.\\n\\n__Default value:__ `[\\"prob\\", \\"value\\"]`","items":{"$ref":"#/definitions/FieldName"},"maxItems":2,"minItems":2,"type":"array"},"groupby":{"description":"The data fields to group by. If not specified, a single group containing all data objects will be used.","items":{"$ref":"#/definitions/FieldName"},"type":"array"},"probs":{"description":"An array of probabilities in the range (0, 1) for which to compute quantile values. If not specified, the *step* parameter will be used.","items":{"type":"number"},"type":"array"},"quantile":{"$ref":"#/definitions/FieldName","description":"The data field for which to perform quantile estimation."},"step":{"description":"A probability step size (default 0.01) for sampling quantile values. All values from one-half the step size up to 1 (exclusive) will be sampled. This parameter is only used if the *probs* parameter is not provided.","type":"number"}},"required":["quantile"],"type":"object"},"RadialGradient":{"additionalProperties":false,"properties":{"gradient":{"const":"radial","description":"The type of gradient. Use `\\"radial\\"` for a radial gradient.","type":"string"},"id":{"type":"string"},"r1":{"description":"The radius length, in normalized [0, 1] coordinates, of the inner circle for the gradient.\\n\\n__Default value:__ `0`","type":"number"},"r2":{"description":"The radius length, in normalized [0, 1] coordinates, of the outer circle for the gradient.\\n\\n__Default value:__ `0.5`","type":"number"},"stops":{"description":"An array of gradient stops defining the gradient color sequence.","items":{"$ref":"#/definitions/GradientStop"},"type":"array"},"x1":{"description":"The x-coordinate, in normalized [0, 1] coordinates, for the center of the inner circle for the gradient.\\n\\n__Default value:__ `0.5`","type":"number"},"x2":{"description":"The x-coordinate, in normalized [0, 1] coordinates, for the center of the outer circle for the gradient.\\n\\n__Default value:__ `0.5`","type":"number"},"y1":{"description":"The y-coordinate, in normalized [0, 1] coordinates, for the center of the inner circle for the gradient.\\n\\n__Default value:__ `0.5`","type":"number"},"y2":{"description":"The y-coordinate, in normalized [0, 1] coordinates, for the center of the outer circle for the gradient.\\n\\n__Default value:__ `0.5`","type":"number"}},"required":["gradient","stops"],"type":"object"},"RangeConfig":{"additionalProperties":{"anyOf":[{"$ref":"#/definitions/RangeScheme"},{"type":"array"}]},"properties":{"category":{"anyOf":[{"$ref":"#/definitions/RangeScheme"},{"items":{"$ref":"#/definitions/Color"},"type":"array"}],"description":"Default [color scheme](https://vega.github.io/vega/docs/schemes/) for categorical data."},"diverging":{"anyOf":[{"$ref":"#/definitions/RangeScheme"},{"items":{"$ref":"#/definitions/Color"},"type":"array"}],"description":"Default [color scheme](https://vega.github.io/vega/docs/schemes/) for diverging quantitative ramps."},"heatmap":{"anyOf":[{"$ref":"#/definitions/RangeScheme"},{"items":{"$ref":"#/definitions/Color"},"type":"array"}],"description":"Default [color scheme](https://vega.github.io/vega/docs/schemes/) for quantitative heatmaps."},"ordinal":{"anyOf":[{"$ref":"#/definitions/RangeScheme"},{"items":{"$ref":"#/definitions/Color"},"type":"array"}],"description":"Default [color scheme](https://vega.github.io/vega/docs/schemes/) for rank-ordered data."},"ramp":{"anyOf":[{"$ref":"#/definitions/RangeScheme"},{"items":{"$ref":"#/definitions/Color"},"type":"array"}],"description":"Default [color scheme](https://vega.github.io/vega/docs/schemes/) for sequential quantitative ramps."},"symbol":{"description":"Array of [symbol](https://vega.github.io/vega/docs/marks/symbol/) names or paths for the default shape palette.","items":{"$ref":"#/definitions/SymbolShape"},"type":"array"}},"type":"object"},"RangeEnum":{"enum":["width","height","symbol","category","ordinal","ramp","diverging","heatmap"],"type":"string"},"RangeRaw":{"items":{"anyOf":[{"type":"null"},{"type":"boolean"},{"type":"string"},{"type":"number"},{"$ref":"#/definitions/RangeRawArray"}]},"type":"array"},"RangeRawArray":{"items":{"type":"number"},"type":"array"},"RangeScheme":{"anyOf":[{"$ref":"#/definitions/RangeEnum"},{"$ref":"#/definitions/RangeRaw"},{"additionalProperties":false,"properties":{"count":{"type":"number"},"extent":{"items":{"type":"number"},"type":"array"},"scheme":{"anyOf":[{"type":"string"},{"items":{"type":"string"},"type":"array"},{"$ref":"#/definitions/ColorScheme"}]}},"required":["scheme"],"type":"object"}]},"RectConfig":{"additionalProperties":false,"properties":{"align":{"anyOf":[{"$ref":"#/definitions/Align"},{"$ref":"#/definitions/ExprRef"}],"description":"The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `\\"left\\"`, `\\"right\\"`, `\\"center\\"`.\\n\\n__Note:__ Expression reference is *not* supported for range marks."},"angle":{"anyOf":[{"description":"The rotation angle of the text, in degrees.","maximum":360,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"aria":{"anyOf":[{"description":"A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \\"aria-hidden\\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"ariaRole":{"anyOf":[{"description":"Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \\"role\\" attribute. Warning: this property is experimental and may be changed in the future.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"ariaRoleDescription":{"anyOf":[{"description":"A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \\"aria-roledescription\\" attribute. Warning: this property is experimental and may be changed in the future.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"aspect":{"anyOf":[{"description":"Whether to keep aspect ratio of image marks.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"baseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline"},{"$ref":"#/definitions/ExprRef"}],"description":"For text marks, the vertical text baseline. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, `\\"line-bottom\\"`, or an expression reference that provides one of the valid values. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.\\n\\nFor range marks, the vertical alignment of the marks. One of `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`.\\n\\n__Note:__ Expression reference is *not* supported for range marks."},"binSpacing":{"description":"Offset between bars for binned field. The ideal value for this is either 0 (preferred by statisticians) or 1 (Vega-Lite default, D3 example style).\\n\\n__Default value:__ `1`","minimum":0,"type":"number"},"blend":{"anyOf":[{"$ref":"#/definitions/Blend","description":"The color blend mode for drawing an item on its current background. Any valid [CSS mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value can be used.\\n\\n__Default value: `\\"source-over\\"`"},{"$ref":"#/definitions/ExprRef"}]},"color":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"$ref":"#/definitions/ExprRef"}],"description":"Default color.\\n\\n__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> `\\"#4682b4\\"`\\n\\n__Note:__\\n- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\\n- The `fill` and `stroke` properties have higher precedence than `color` and will override `color`."},"continuousBandSize":{"description":"The default size of the bars on continuous scales.\\n\\n__Default value:__ `5`","minimum":0,"type":"number"},"cornerRadius":{"anyOf":[{"description":"The radius in pixels of rounded rectangles or arcs\' corners.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusBottomLeft":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' bottom left corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusBottomRight":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' bottom right corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusTopLeft":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' top right corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusTopRight":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' top left corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cursor":{"anyOf":[{"$ref":"#/definitions/Cursor","description":"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},{"$ref":"#/definitions/ExprRef"}]},"description":{"anyOf":[{"description":"A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\\"aria-label\\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"dir":{"anyOf":[{"$ref":"#/definitions/TextDirection","description":"The direction of the text. One of `\\"ltr\\"` (left-to-right) or `\\"rtl\\"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\\n\\n__Default value:__ `\\"ltr\\"`"},{"$ref":"#/definitions/ExprRef"}]},"discreteBandSize":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/RelativeBandSize"}],"description":"The default size of the bars with discrete dimensions. If unspecified, the default size is  `step-2`, which provides 2 pixel offset between bars.","minimum":0},"dx":{"anyOf":[{"description":"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"dy":{"anyOf":[{"description":"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"ellipsis":{"anyOf":[{"description":"The ellipsis string for text truncated in response to the limit parameter.\\n\\n__Default value:__ `\\"…\\"`","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"endAngle":{"anyOf":[{"description":"The end angle in radians for arc marks. A value of `0` indicates up (north), increasing values proceed clockwise.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fill":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.\\n\\n__Default value:__ (None)"},"fillOpacity":{"anyOf":[{"description":"The fill opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"filled":{"description":"Whether the mark\'s color should be used as fill color instead of stroke color.\\n\\n__Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.\\n\\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).","type":"boolean"},"font":{"anyOf":[{"description":"The typeface to set the text in (e.g., `\\"Helvetica Neue\\"`).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"fontSize":{"anyOf":[{"description":"The font size, in pixels.\\n\\n__Default value:__ `11`","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"The font style (e.g., `\\"italic\\"`)."},{"$ref":"#/definitions/ExprRef"}]},"fontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"The font weight. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},{"$ref":"#/definitions/ExprRef"}]},"height":{"anyOf":[{"description":"Height of the marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"href":{"anyOf":[{"$ref":"#/definitions/URI","description":"A URL to load upon mouse click. If defined, the mark acts as a hyperlink."},{"$ref":"#/definitions/ExprRef"}]},"innerRadius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`."},"interpolate":{"anyOf":[{"$ref":"#/definitions/Interpolate","description":"The line interpolation method to use for line and area marks. One of the following:\\n- `\\"linear\\"`: piecewise linear segments, as in a polyline.\\n- `\\"linear-closed\\"`: close the linear segments to form a polygon.\\n- `\\"step\\"`: alternate between horizontal and vertical segments, as in a step function.\\n- `\\"step-before\\"`: alternate between vertical and horizontal segments, as in a step function.\\n- `\\"step-after\\"`: alternate between horizontal and vertical segments, as in a step function.\\n- `\\"basis\\"`: a B-spline, with control point duplication on the ends.\\n- `\\"basis-open\\"`: an open B-spline; may not intersect the start or end.\\n- `\\"basis-closed\\"`: a closed B-spline, as in a loop.\\n- `\\"cardinal\\"`: a Cardinal spline, with control point duplication on the ends.\\n- `\\"cardinal-open\\"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\\n- `\\"cardinal-closed\\"`: a closed Cardinal spline, as in a loop.\\n- `\\"bundle\\"`: equivalent to basis, except the tension parameter is used to straighten the spline.\\n- `\\"monotone\\"`: cubic interpolation that preserves monotonicity in y."},{"$ref":"#/definitions/ExprRef"}]},"invalid":{"description":"Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).\\n- If set to `\\"filter\\"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).\\n- If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.","enum":["filter",null],"type":["string","null"]},"limit":{"anyOf":[{"description":"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\\n\\n__Default value:__ `0` -- indicating no limit","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"lineBreak":{"anyOf":[{"description":"A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property is ignored if the text is array-valued.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"lineHeight":{"anyOf":[{"description":"The line height in pixels (the spacing between subsequent lines of text) for multi-line text marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"opacity":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The overall opacity (value between [0,1]).\\n\\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.","maximum":1,"minimum":0},"order":{"description":"For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.","type":["null","boolean"]},"orient":{"$ref":"#/definitions/Orientation","description":"The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.\\n- For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.\\n- For area, this property determines the orient property of the Vega output.\\n- For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored."},"outerRadius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`."},"padAngle":{"anyOf":[{"description":"The angular padding applied to sides of the arc, in radians.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"radius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"For arc mark, the primary (outer) radius in pixels.\\n\\nFor text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties."},"radius2":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The secondary (inner) radius in pixels of arc marks."},"shape":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/SymbolShape"},{"type":"string"}],"description":"Shape of the point marks. Supported values include:\\n- plotting shapes: `\\"circle\\"`, `\\"square\\"`, `\\"cross\\"`, `\\"diamond\\"`, `\\"triangle-up\\"`, `\\"triangle-down\\"`, `\\"triangle-right\\"`, or `\\"triangle-left\\"`.\\n- the line symbol `\\"stroke\\"`\\n- centered directional shapes `\\"arrow\\"`, `\\"wedge\\"`, or `\\"triangle\\"`\\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\\n\\n__Default value:__ `\\"circle\\"`"},{"$ref":"#/definitions/ExprRef"}]},"size":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Default size for marks.\\n- For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.\\n- For `bar`, this represents the band size of the bar, in pixels.\\n- For `text`, this represents the font size, in pixels.\\n\\n__Default value:__\\n- `30` for point, circle, square marks; width/height\'s `step`\\n- `2` for bar marks with discrete dimensions;\\n- `5` for bar marks with continuous dimensions;\\n- `11` for text marks.","minimum":0},"smooth":{"anyOf":[{"description":"A boolean flag (default true) indicating if the image should be smoothed when resized. If false, individual pixels should be scaled directly rather than interpolated with smoothing. For SVG rendering, this option may not work in some browsers due to lack of standardization.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"startAngle":{"anyOf":[{"description":"The start angle in radians for arc marks. A value of `0` indicates up (north), increasing values proceed clockwise.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"stroke":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.\\n\\n__Default value:__ (None)"},"strokeCap":{"anyOf":[{"$ref":"#/definitions/StrokeCap","description":"The stroke cap for line ending style. One of `\\"butt\\"`, `\\"round\\"`, or `\\"square\\"`.\\n\\n__Default value:__ `\\"butt\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeDash":{"anyOf":[{"description":"An array of alternating stroke, space lengths for creating dashed or dotted lines.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"strokeDashOffset":{"anyOf":[{"description":"The offset (in pixels) into which to begin drawing with the stroke dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeJoin":{"anyOf":[{"$ref":"#/definitions/StrokeJoin","description":"The stroke line join method. One of `\\"miter\\"`, `\\"round\\"` or `\\"bevel\\"`.\\n\\n__Default value:__ `\\"miter\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeMiterLimit":{"anyOf":[{"description":"The miter limit at which to bevel a line join.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOffset":{"anyOf":[{"description":"The offset in pixels at which to draw the group stroke and fill. If unspecified, the default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths align with the pixel grid.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOpacity":{"anyOf":[{"description":"The stroke opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeWidth":{"anyOf":[{"description":"The stroke width, in pixels.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"tension":{"anyOf":[{"description":"Depending on the interpolation type, sets the tension parameter (for line and area marks).","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"text":{"anyOf":[{"$ref":"#/definitions/Text","description":"Placeholder text if the `text` channel is not specified"},{"$ref":"#/definitions/ExprRef"}]},"theta":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"- For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)\\n\\n- For text marks, polar coordinate angle in radians.","maximum":360,"minimum":0},"theta2":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise."},"timeUnitBandPosition":{"description":"Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step. If set to `0.5`, the marks will be positioned in the middle of the time unit band step.","type":"number"},"timeUnitBandSize":{"description":"Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step. If set to `0.5`, bandwidth of the marks will be half of the time unit band step.","type":"number"},"tooltip":{"anyOf":[{"type":"number"},{"type":"string"},{"type":"boolean"},{"$ref":"#/definitions/TooltipContent"},{"$ref":"#/definitions/ExprRef"},{"type":"null"}],"description":"The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\\n\\n- If `tooltip` is `true` or `{\\"content\\": \\"encoding\\"}`, then all fields from `encoding` will be used.\\n- If `tooltip` is `{\\"content\\": \\"data\\"}`, then all fields that appear in the highlighted data point will be used.\\n- If set to `null` or `false`, then no tooltip will be used.\\n\\nSee the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.\\n\\n__Default value:__ `null`"},"url":{"anyOf":[{"$ref":"#/definitions/URI","description":"The URL of the image file for image marks."},{"$ref":"#/definitions/ExprRef"}]},"width":{"anyOf":[{"description":"Width of the marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"x":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"X coordinates of the marks, or width of horizontal `\\"bar\\"` and `\\"area\\"` without specified `x2` or `width`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"x2":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"X2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"y":{"anyOf":[{"type":"number"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Y coordinates of the marks, or height of vertical `\\"bar\\"` and `\\"area\\"` without specified `y2` or `height`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."},"y2":{"anyOf":[{"type":"number"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Y2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."}},"type":"object"},"RegressionTransform":{"additionalProperties":false,"properties":{"as":{"description":"The output field names for the smoothed points generated by the regression transform.\\n\\n__Default value:__ The field names of the input x and y values.","items":{"$ref":"#/definitions/FieldName"},"maxItems":2,"minItems":2,"type":"array"},"extent":{"description":"A [min, max] domain over the independent (x) field for the starting and ending points of the generated trend line.","items":{"type":"number"},"maxItems":2,"minItems":2,"type":"array"},"groupby":{"description":"The data fields to group by. If not specified, a single group containing all data objects will be used.","items":{"$ref":"#/definitions/FieldName"},"type":"array"},"method":{"description":"The functional form of the regression model. One of `\\"linear\\"`, `\\"log\\"`, `\\"exp\\"`, `\\"pow\\"`, `\\"quad\\"`, or `\\"poly\\"`.\\n\\n__Default value:__ `\\"linear\\"`","enum":["linear","log","exp","pow","quad","poly"],"type":"string"},"on":{"$ref":"#/definitions/FieldName","description":"The data field of the independent variable to use a predictor."},"order":{"description":"The polynomial order (number of coefficients) for the \'poly\' method.\\n\\n__Default value:__ `3`","type":"number"},"params":{"description":"A boolean flag indicating if the transform should return the regression model parameters (one object per group), rather than trend line points. The resulting objects include a `coef` array of fitted coefficient values (starting with the intercept term and then including terms of increasing order) and an `rSquared` value (indicating the total variance explained by the model).\\n\\n__Default value:__ `false`","type":"boolean"},"regression":{"$ref":"#/definitions/FieldName","description":"The data field of the dependent variable to predict."}},"required":["regression","on"],"type":"object"},"RelativeBandSize":{"additionalProperties":false,"properties":{"band":{"description":"The relative band size.  For example `0.5` means half of the band scale\'s band width.","type":"number"}},"required":["band"],"type":"object"},"RepeatMapping":{"additionalProperties":false,"properties":{"column":{"description":"An array of fields to be repeated horizontally.","items":{"type":"string"},"type":"array"},"row":{"description":"An array of fields to be repeated vertically.","items":{"type":"string"},"type":"array"}},"type":"object"},"RepeatRef":{"additionalProperties":false,"description":"Reference to a repeated value.","properties":{"repeat":{"enum":["row","column","repeat","layer"],"type":"string"}},"required":["repeat"],"type":"object"},"RepeatSpec":{"anyOf":[{"$ref":"#/definitions/NonLayerRepeatSpec"},{"$ref":"#/definitions/LayerRepeatSpec"}]},"Resolve":{"additionalProperties":false,"description":"Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions. Scales and guides can be resolved to be `\\"independent\\"` or `\\"shared\\"`.","properties":{"axis":{"$ref":"#/definitions/AxisResolveMap"},"legend":{"$ref":"#/definitions/LegendResolveMap"},"scale":{"$ref":"#/definitions/ScaleResolveMap"}},"type":"object"},"ResolveMode":{"enum":["independent","shared"],"type":"string"},"RowCol<LayoutAlign>":{"additionalProperties":false,"properties":{"column":{"$ref":"#/definitions/LayoutAlign"},"row":{"$ref":"#/definitions/LayoutAlign"}},"type":"object"},"RowCol<boolean>":{"additionalProperties":false,"properties":{"column":{"type":"boolean"},"row":{"type":"boolean"}},"type":"object"},"RowCol<number>":{"additionalProperties":false,"properties":{"column":{"type":"number"},"row":{"type":"number"}},"type":"object"},"RowColumnEncodingFieldDef":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"align":{"$ref":"#/definitions/LayoutAlign","description":"The alignment to apply to row/column facet\'s subplot. The supported string values are `\\"all\\"`, `\\"each\\"`, and `\\"none\\"`.\\n\\n- For `\\"none\\"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\\n- For `\\"each\\"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\\n- For `\\"all\\"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\\n\\n__Default value:__ `\\"all\\"`."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"center":{"description":"Boolean flag indicating if facet\'s subviews should be centered relative to their respective rows or columns.\\n\\n__Default value:__ `false`","type":"boolean"},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"header":{"anyOf":[{"$ref":"#/definitions/Header"},{"type":"null"}],"description":"An object defining properties of a facet\'s header."},"sort":{"anyOf":[{"$ref":"#/definitions/SortArray"},{"$ref":"#/definitions/SortOrder"},{"$ref":"#/definitions/EncodingSortField"},{"type":"null"}],"description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` is not supported for `row` and `column`."},"spacing":{"description":"The spacing in pixels between facet\'s sub-views.\\n\\n__Default value__: Depends on `\\"spacing\\"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)","type":"number"},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"SampleTransform":{"additionalProperties":false,"properties":{"sample":{"description":"The maximum number of data objects to include in the sample.\\n\\n__Default value:__ `1000`","type":"number"}},"required":["sample"],"type":"object"},"Scale":{"additionalProperties":false,"properties":{"align":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The alignment of the steps within the scale range.\\n\\nThis value must lie in the range `[0,1]`. A value of `0.5` indicates that the steps should be centered within the range. A value of `0` or `1` may be used to shift the bands to one side, say to position them adjacent to an axis.\\n\\n__Default value:__ `0.5`"},"base":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The logarithm base of the `log` scale (default `10`)."},"bins":{"$ref":"#/definitions/ScaleBins","description":"Bin boundaries can be provided to scales as either an explicit array of bin boundaries or as a bin specification object. The legal values are:\\n- An [array](../types/#Array) literal of bin boundary values. For example, `[0, 5, 10, 15, 20]`. The array must include both starting and ending boundaries. The previous example uses five values to indicate a total of four bin intervals: [0-5), [5-10), [10-15), [15-20]. Array literals may include signal references as elements.\\n- A [bin specification object](https://vega.github.io/vega-lite/docs/scale.html#bins) that indicates the bin _step_ size, and optionally the _start_ and _stop_ boundaries.\\n- An array of bin boundaries over the scale domain. If provided, axes and legends will use the bin boundaries to inform the choice of tick marks and text labels."},"clamp":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/ExprRef"}],"description":"If `true`, values that exceed the data domain are clamped to either the minimum or maximum range value\\n\\n__Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/config.html#scale-config)\'s `clamp` (`true` by default)."},"constant":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant determining the slope of the symlog function around zero. Only used for `symlog` scales.\\n\\n__Default value:__ `1`"},"domain":{"anyOf":[{"items":{"anyOf":[{"type":"null"},{"type":"string"},{"type":"number"},{"type":"boolean"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"}]},"type":"array"},{"const":"unaggregated","type":"string"},{"$ref":"#/definitions/ParameterExtent"},{"$ref":"#/definitions/DomainUnionWith"},{"$ref":"#/definitions/ExprRef"}],"description":"Customized domain values in the form of constant values or dynamic values driven by a parameter.\\n\\n1) Constant `domain` for _quantitative_ fields can take one of the following forms:\\n\\n- A two-element array with minimum and maximum values. To create a diverging scale, this two-element array can be combined with the `domainMid` property.\\n- An array with more than two entries, for [Piecewise quantitative scales](https://vega.github.io/vega-lite/docs/scale.html#piecewise).\\n- A string value `\\"unaggregated\\"`, if the input field is aggregated, to indicate that the domain should include the raw data values prior to the aggregation.\\n\\n2) Constant `domain` for _temporal_ fields can be a two-element array with minimum and maximum values, in the form of either timestamps or the [DateTime definition objects](https://vega.github.io/vega-lite/docs/types.html#datetime).\\n\\n3) Constant `domain` for _ordinal_ and _nominal_ fields can be an array that lists valid input values.\\n\\n4) To combine (union) specified constant domain with the field\'s values, `domain` can be an object with a `unionWith` property that specify constant domain to be combined. For example, `domain: {unionWith: [0, 100]}` for a quantitative scale means that the scale domain always includes `[0, 100]`, but will include other values in the fields beyond `[0, 100]`.\\n\\n5) Domain can also takes an object defining a field or encoding of a parameter that [interactively determines](https://vega.github.io/vega-lite/docs/selection.html#scale-domains) the scale domain."},"domainMax":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"}],"description":"Sets the maximum value in the scale domain, overriding the `domain` property. This property is only intended for use with scales having continuous domains."},"domainMid":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Inserts a single mid-point value into a two-element domain. The mid-point value must lie between the domain minimum and maximum values. This property can be useful for setting a midpoint for [diverging color scales](https://vega.github.io/vega-lite/docs/scale.html#piecewise). The domainMid property is only intended for use with scales supporting continuous, piecewise domains."},"domainMin":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"}],"description":"Sets the minimum value in the scale domain, overriding the domain property. This property is only intended for use with scales having continuous domains."},"exponent":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The exponent of the `pow` scale."},"interpolate":{"anyOf":[{"$ref":"#/definitions/ScaleInterpolateEnum"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/ScaleInterpolateParams"}],"description":"The interpolation method for range values. By default, a general interpolator for numbers, dates, strings and colors (in HCL space) is used. For color ranges, this property allows interpolation in alternative color spaces. Legal values include `rgb`, `hsl`, `hsl-long`, `lab`, `hcl`, `hcl-long`, `cubehelix` and `cubehelix-long` (\'-long\' variants use longer paths in polar coordinate spaces). If object-valued, this property accepts an object with a string-valued _type_ property and an optional numeric _gamma_ property applicable to rgb and cubehelix interpolators. For more, see the [d3-interpolate documentation](https://github.com/d3/d3-interpolate).\\n\\n* __Default value:__ `hcl`"},"nice":{"anyOf":[{"type":"boolean"},{"type":"number"},{"$ref":"#/definitions/TimeInterval"},{"$ref":"#/definitions/TimeIntervalStep"},{"$ref":"#/definitions/ExprRef"}],"description":"Extending the domain so that it starts and ends on nice round values. This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value. Nicing is useful if the domain is computed from data and may be irregular. For example, for a domain of _[0.201479…, 0.996679…]_, a nice domain might be _[0.2, 1.0]_.\\n\\nFor quantitative scales such as linear, `nice` can be either a boolean flag or a number. If `nice` is a number, it will represent a desired tick count. This allows greater control over the step size used to extend the bounds, guaranteeing that the returned ticks will exactly cover the domain.\\n\\nFor temporal fields with time and utc scales, the `nice` value can be a string indicating the desired time interval. Legal values are `\\"millisecond\\"`, `\\"second\\"`, `\\"minute\\"`, `\\"hour\\"`, `\\"day\\"`, `\\"week\\"`, `\\"month\\"`, and `\\"year\\"`. Alternatively, `time` and `utc` scales can accept an object-valued interval specifier of the form `{\\"interval\\": \\"month\\", \\"step\\": 3}`, which includes a desired number of interval steps. Here, the domain would snap to quarter (Jan, Apr, Jul, Oct) boundaries.\\n\\n__Default value:__ `true` for unbinned _quantitative_ fields; `false` otherwise."},"padding":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"For _[continuous](https://vega.github.io/vega-lite/docs/scale.html#continuous)_ scales, expands the scale domain to accommodate the specified number of pixels on each of the scale range. The scale range must represent pixels for this parameter to function as intended. Padding adjustment is performed prior to all other adjustments, including the effects of the `zero`, `nice`, `domainMin`, and `domainMax` properties.\\n\\nFor _[band](https://vega.github.io/vega-lite/docs/scale.html#band)_ scales, shortcut for setting `paddingInner` and `paddingOuter` to the same value.\\n\\nFor _[point](https://vega.github.io/vega-lite/docs/scale.html#point)_ scales, alias for `paddingOuter`.\\n\\n__Default value:__ For _continuous_ scales, derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)\'s `continuousPadding`. For _band and point_ scales, see `paddingInner` and `paddingOuter`. By default, Vega-Lite sets padding such that _width/height = number of unique values * step_.","minimum":0},"paddingInner":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The inner padding (spacing) within each band step of band scales, as a fraction of the step size. This value must lie in the range [0,1].\\n\\nFor point scale, this property is invalid as point scales do not have internal band widths (only step sizes between bands).\\n\\n__Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)\'s `bandPaddingInner`.","maximum":1,"minimum":0},"paddingOuter":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The outer padding (spacing) at the ends of the range of band and point scales, as a fraction of the step size. This value must lie in the range [0,1].\\n\\n__Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)\'s `bandPaddingOuter` for band scales and `pointPadding` for point scales. By default, Vega-Lite sets outer padding such that _width/height = number of unique values * step_.","maximum":1,"minimum":0},"range":{"anyOf":[{"$ref":"#/definitions/RangeEnum"},{"items":{"anyOf":[{"type":"number"},{"type":"string"},{"items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"type":"array"},{"additionalProperties":false,"properties":{"field":{"type":"string"}},"required":["field"],"type":"object"}],"description":"The range of the scale. One of:\\n\\n- A string indicating a [pre-defined named scale range](https://vega.github.io/vega-lite/docs/scale.html#range-config) (e.g., example, `\\"symbol\\"`, or `\\"diverging\\"`).\\n\\n- For [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous), two-element array indicating  minimum and maximum values, or an array with more than two entries for specifying a [piecewise scale](https://vega.github.io/vega-lite/docs/scale.html#piecewise).\\n\\n- For [discrete](https://vega.github.io/vega-lite/docs/scale.html#discrete) and [discretizing](https://vega.github.io/vega-lite/docs/scale.html#discretizing) scales, an array of desired output values or an object with a `field` property representing the range values.  For example, if a field `color` contains CSS color names, we can set `range` to `{field: \\"color\\"}`.\\n\\n__Notes:__\\n\\n1) For color scales you can also specify a color [`scheme`](https://vega.github.io/vega-lite/docs/scale.html#scheme) instead of `range`.\\n\\n2) Any directly specified `range` for `x` and `y` channels will be ignored. Range can be customized via the view\'s corresponding [size](https://vega.github.io/vega-lite/docs/size.html) (`width` and `height`)."},"rangeMax":{"anyOf":[{"type":"number"},{"type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Sets the maximum value in the scale range, overriding the `range` property or the default range. This property is only intended for use with scales having continuous ranges."},"rangeMin":{"anyOf":[{"type":"number"},{"type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Sets the minimum value in the scale range, overriding the `range` property or the default range. This property is only intended for use with scales having continuous ranges."},"reverse":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/ExprRef"}],"description":"If true, reverses the order of the scale range. __Default value:__ `false`."},"round":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/ExprRef"}],"description":"If `true`, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid.\\n\\n__Default value:__ `false`."},"scheme":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/SchemeParams"},{"$ref":"#/definitions/ExprRef"}],"description":"A string indicating a color [scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme) name (e.g., `\\"category10\\"` or `\\"blues\\"`) or a [scheme parameter object](https://vega.github.io/vega-lite/docs/scale.html#scheme-params).\\n\\nDiscrete color schemes may be used with [discrete](https://vega.github.io/vega-lite/docs/scale.html#discrete) or [discretizing](https://vega.github.io/vega-lite/docs/scale.html#discretizing) scales. Continuous color schemes are intended for use with color scales.\\n\\nFor the full list of supported schemes, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference."},"type":{"$ref":"#/definitions/ScaleType","description":"The type of scale. Vega-Lite supports the following categories of scale types:\\n\\n1) [**Continuous Scales**](https://vega.github.io/vega-lite/docs/scale.html#continuous) -- mapping continuous domains to continuous output ranges ([`\\"linear\\"`](https://vega.github.io/vega-lite/docs/scale.html#linear), [`\\"pow\\"`](https://vega.github.io/vega-lite/docs/scale.html#pow), [`\\"sqrt\\"`](https://vega.github.io/vega-lite/docs/scale.html#sqrt), [`\\"symlog\\"`](https://vega.github.io/vega-lite/docs/scale.html#symlog), [`\\"log\\"`](https://vega.github.io/vega-lite/docs/scale.html#log), [`\\"time\\"`](https://vega.github.io/vega-lite/docs/scale.html#time), [`\\"utc\\"`](https://vega.github.io/vega-lite/docs/scale.html#utc).\\n\\n2) [**Discrete Scales**](https://vega.github.io/vega-lite/docs/scale.html#discrete) -- mapping discrete domains to discrete ([`\\"ordinal\\"`](https://vega.github.io/vega-lite/docs/scale.html#ordinal)) or continuous ([`\\"band\\"`](https://vega.github.io/vega-lite/docs/scale.html#band) and [`\\"point\\"`](https://vega.github.io/vega-lite/docs/scale.html#point)) output ranges.\\n\\n3) [**Discretizing Scales**](https://vega.github.io/vega-lite/docs/scale.html#discretizing) -- mapping continuous domains to discrete output ranges [`\\"bin-ordinal\\"`](https://vega.github.io/vega-lite/docs/scale.html#bin-ordinal), [`\\"quantile\\"`](https://vega.github.io/vega-lite/docs/scale.html#quantile), [`\\"quantize\\"`](https://vega.github.io/vega-lite/docs/scale.html#quantize) and [`\\"threshold\\"`](https://vega.github.io/vega-lite/docs/scale.html#threshold).\\n\\n__Default value:__ please see the [scale type table](https://vega.github.io/vega-lite/docs/scale.html#type)."},"zero":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/ExprRef"}],"description":"If `true`, ensures that a zero baseline value is included in the scale domain.\\n\\n__Default value:__ `true` for x and y channels if the quantitative field is not binned and no custom `domain` is provided; `false` otherwise.\\n\\n__Note:__ Log, time, and utc scales do not support `zero`."}},"type":"object"},"ScaleBinParams":{"additionalProperties":false,"properties":{"start":{"description":"The starting (lowest-valued) bin boundary.\\n\\n__Default value:__ The lowest value of the scale domain will be used.","type":"number"},"step":{"description":"The step size defining the bin interval width.","type":"number"},"stop":{"description":"The stopping (highest-valued) bin boundary.\\n\\n__Default value:__ The highest value of the scale domain will be used.","type":"number"}},"required":["step"],"type":"object"},"ScaleBins":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ScaleBinParams"}]},"ScaleConfig":{"additionalProperties":false,"properties":{"bandPaddingInner":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Default inner padding for `x` and `y` band-ordinal scales.\\n\\n__Default value:__\\n- `barBandPaddingInner` for bar marks (`0.1` by default)\\n- `rectBandPaddingInner` for rect and other marks (`0` by default)","maximum":1,"minimum":0},"bandPaddingOuter":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Default outer padding for `x` and `y` band-ordinal scales.\\n\\n__Default value:__ `paddingInner/2` (which makes _width/height = number of unique values * step_)","maximum":1,"minimum":0},"barBandPaddingInner":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Default inner padding for `x` and `y` band-ordinal scales of `\\"bar\\"` marks.\\n\\n__Default value:__ `0.1`","maximum":1,"minimum":0},"clamp":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/ExprRef"}],"description":"If true, values that exceed the data domain are clamped to either the minimum or maximum range value"},"continuousPadding":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Default padding for continuous scales.\\n\\n__Default:__ `5` for continuous x-scale of a vertical bar and continuous y-scale of a horizontal bar.; `0` otherwise.","minimum":0},"maxBandSize":{"description":"The default max value for mapping quantitative fields to bar\'s size/bandSize.\\n\\nIf undefined (default), we will use the axis\'s size (width or height) - 1.","minimum":0,"type":"number"},"maxFontSize":{"description":"The default max value for mapping quantitative fields to text\'s size/fontSize.\\n\\n__Default value:__ `40`","minimum":0,"type":"number"},"maxOpacity":{"description":"Default max opacity for mapping a field to opacity.\\n\\n__Default value:__ `0.8`","maximum":1,"minimum":0,"type":"number"},"maxSize":{"description":"Default max value for point size scale.","minimum":0,"type":"number"},"maxStrokeWidth":{"description":"Default max strokeWidth for the scale of strokeWidth for rule and line marks and of size for trail marks.\\n\\n__Default value:__ `4`","minimum":0,"type":"number"},"minBandSize":{"description":"The default min value for mapping quantitative fields to bar and tick\'s size/bandSize scale with zero=false.\\n\\n__Default value:__ `2`","minimum":0,"type":"number"},"minFontSize":{"description":"The default min value for mapping quantitative fields to tick\'s size/fontSize scale with zero=false\\n\\n__Default value:__ `8`","minimum":0,"type":"number"},"minOpacity":{"description":"Default minimum opacity for mapping a field to opacity.\\n\\n__Default value:__ `0.3`","maximum":1,"minimum":0,"type":"number"},"minSize":{"description":"Default minimum value for point size scale with zero=false.\\n\\n__Default value:__ `9`","minimum":0,"type":"number"},"minStrokeWidth":{"description":"Default minimum strokeWidth for the scale of strokeWidth for rule and line marks and of size for trail marks with zero=false.\\n\\n__Default value:__ `1`","minimum":0,"type":"number"},"pointPadding":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Default outer padding for `x` and `y` point-ordinal scales.\\n\\n__Default value:__ `0.5` (which makes _width/height = number of unique values * step_)","maximum":1,"minimum":0},"quantileCount":{"description":"Default range cardinality for [`quantile`](https://vega.github.io/vega-lite/docs/scale.html#quantile) scale.\\n\\n__Default value:__ `4`","minimum":0,"type":"number"},"quantizeCount":{"description":"Default range cardinality for [`quantize`](https://vega.github.io/vega-lite/docs/scale.html#quantize) scale.\\n\\n__Default value:__ `4`","minimum":0,"type":"number"},"rectBandPaddingInner":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Default inner padding for `x` and `y` band-ordinal scales of `\\"rect\\"` marks.\\n\\n__Default value:__ `0`","maximum":1,"minimum":0},"round":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/ExprRef"}],"description":"If true, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid. (Only available for `x`, `y`, and `size` scales.)"},"useUnaggregatedDomain":{"description":"Use the source data range before aggregation as scale domain instead of aggregated data for aggregate axis.\\n\\nThis is equivalent to setting `domain` to `\\"unaggregate\\"` for aggregated _quantitative_ fields by default.\\n\\nThis property only works with aggregate functions that produce values within the raw data domain (`\\"mean\\"`, `\\"average\\"`, `\\"median\\"`, `\\"q1\\"`, `\\"q3\\"`, `\\"min\\"`, `\\"max\\"`). For other aggregations that produce values outside of the raw data domain (e.g. `\\"count\\"`, `\\"sum\\"`), this property is ignored.\\n\\n__Default value:__ `false`","type":"boolean"},"xReverse":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/ExprRef"}],"description":"Reverse x-scale by default (useful for right-to-left charts)."}},"type":"object"},"ScaleInterpolateEnum":{"enum":["rgb","lab","hcl","hsl","hsl-long","hcl-long","cubehelix","cubehelix-long"],"type":"string"},"ScaleInterpolateParams":{"additionalProperties":false,"properties":{"gamma":{"type":"number"},"type":{"enum":["rgb","cubehelix","cubehelix-long"],"type":"string"}},"required":["type"],"type":"object"},"ScaleResolveMap":{"additionalProperties":false,"properties":{"angle":{"$ref":"#/definitions/ResolveMode"},"color":{"$ref":"#/definitions/ResolveMode"},"fill":{"$ref":"#/definitions/ResolveMode"},"fillOpacity":{"$ref":"#/definitions/ResolveMode"},"opacity":{"$ref":"#/definitions/ResolveMode"},"radius":{"$ref":"#/definitions/ResolveMode"},"shape":{"$ref":"#/definitions/ResolveMode"},"size":{"$ref":"#/definitions/ResolveMode"},"stroke":{"$ref":"#/definitions/ResolveMode"},"strokeDash":{"$ref":"#/definitions/ResolveMode"},"strokeOpacity":{"$ref":"#/definitions/ResolveMode"},"strokeWidth":{"$ref":"#/definitions/ResolveMode"},"theta":{"$ref":"#/definitions/ResolveMode"},"x":{"$ref":"#/definitions/ResolveMode"},"y":{"$ref":"#/definitions/ResolveMode"}},"type":"object"},"ScaleType":{"enum":["linear","log","pow","sqrt","symlog","identity","sequential","time","utc","quantile","quantize","threshold","bin-ordinal","ordinal","point","band"],"type":"string"},"SchemeParams":{"additionalProperties":false,"properties":{"count":{"description":"The number of colors to use in the scheme. This can be useful for scale types such as `\\"quantize\\"`, which use the length of the scale range to determine the number of discrete bins for the scale domain.","type":"number"},"extent":{"description":"The extent of the color range to use. For example `[0.2, 1]` will rescale the color scheme such that color values in the range _[0, 0.2)_ are excluded from the scheme.","items":{"type":"number"},"type":"array"},"name":{"description":"A color scheme name for ordinal scales (e.g., `\\"category10\\"` or `\\"blues\\"`).\\n\\nFor the full list of supported schemes, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.","type":"string"}},"required":["name"],"type":"object"},"SecondaryFieldDef":{"additionalProperties":false,"description":"A field definition of a secondary channel that shares a scale with another primary channel. For example, `x2`, `xError` and `xError2` share the same scale with `x`.","properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.","type":"null"},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."}},"type":"object"},"SelectionConfig":{"additionalProperties":false,"properties":{"interval":{"$ref":"#/definitions/IntervalSelectionConfigWithoutType","description":"The default definition for an [`interval`](https://vega.github.io/vega-lite/docs/parameter.html#select) selection. All properties and transformations for an interval selection definition (except `type`) may be specified here.\\n\\nFor instance, setting `interval` to `{\\"translate\\": false}` disables the ability to move interval selections by default."},"point":{"$ref":"#/definitions/PointSelectionConfigWithoutType","description":"The default definition for a [`point`](https://vega.github.io/vega-lite/docs/parameter.html#select) selection. All properties and transformations  for a point selection definition (except `type`) may be specified here.\\n\\nFor instance, setting `point` to `{\\"on\\": \\"dblclick\\"}` populates point selections on double-click by default."}},"type":"object"},"SelectionInit":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"}]},"SelectionInitInterval":{"anyOf":[{"$ref":"#/definitions/Vector2<boolean>"},{"$ref":"#/definitions/Vector2<number>"},{"$ref":"#/definitions/Vector2<string>"},{"$ref":"#/definitions/Vector2<DateTime>"}]},"SelectionInitIntervalMapping":{"$ref":"#/definitions/Dict<SelectionInitInterval>"},"SelectionInitMapping":{"$ref":"#/definitions/Dict<SelectionInit>"},"SelectionParameter":{"additionalProperties":false,"properties":{"bind":{"anyOf":[{"$ref":"#/definitions/Binding"},{"additionalProperties":{"$ref":"#/definitions/Binding"},"type":"object"},{"$ref":"#/definitions/LegendBinding"},{"const":"scales","type":"string"}],"description":"When set, a selection is populated by input elements (also known as dynamic query widgets) or by interacting with the corresponding legend. Direct manipulation interaction is disabled by default; to re-enable it, set the selection\'s [`on`](https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties) property.\\n\\nLegend bindings are restricted to selections that only specify a single field or encoding.\\n\\nQuery widget binding takes the form of Vega\'s [input element binding definition](https://vega.github.io/vega/docs/signals/#bind) or can be a mapping between projected field/encodings and binding definitions.\\n\\n__See also:__ [`bind`](https://vega.github.io/vega-lite/docs/bind.html) documentation."},"name":{"$ref":"#/definitions/ParameterName","description":"Required. A unique name for the selection parameter. Selection names should be valid JavaScript identifiers: they should contain only alphanumeric characters (or \\"$\\", or \\"_\\") and may not start with a digit. Reserved keywords that may not be used as parameter names are \\"datum\\", \\"event\\", \\"item\\", and \\"parent\\"."},"select":{"anyOf":[{"$ref":"#/definitions/SelectionType"},{"$ref":"#/definitions/PointSelectionConfig"},{"$ref":"#/definitions/IntervalSelectionConfig"}],"description":"Determines the default event processing and data query for the selection. Vega-Lite currently supports two selection types:\\n\\n- `\\"point\\"` -- to select multiple discrete data values; the first value is selected on `click` and additional values toggled on shift-click.\\n- `\\"interval\\"` -- to select a continuous range of data values on `drag`."},"value":{"anyOf":[{"$ref":"#/definitions/SelectionInit"},{"items":{"$ref":"#/definitions/SelectionInitMapping"},"type":"array"},{"$ref":"#/definitions/SelectionInitIntervalMapping"}],"description":"Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/selection.html#project) and initial values.\\n\\n__See also:__ [`init`](https://vega.github.io/vega-lite/docs/value.html) documentation."}},"required":["name","select"],"type":"object"},"SelectionResolution":{"enum":["global","union","intersect"],"type":"string"},"SelectionType":{"enum":["point","interval"],"type":"string"},"SequenceGenerator":{"additionalProperties":false,"properties":{"name":{"description":"Provide a placeholder name and bind data at runtime.","type":"string"},"sequence":{"$ref":"#/definitions/SequenceParams","description":"Generate a sequence of numbers."}},"required":["sequence"],"type":"object"},"SequenceParams":{"additionalProperties":false,"properties":{"as":{"$ref":"#/definitions/FieldName","description":"The name of the generated sequence field.\\n\\n__Default value:__ `\\"data\\"`"},"start":{"description":"The starting value of the sequence (inclusive).","type":"number"},"step":{"description":"The step value between sequence entries.\\n\\n__Default value:__ `1`","type":"number"},"stop":{"description":"The ending value of the sequence (exclusive).","type":"number"}},"required":["start","stop"],"type":"object"},"SequentialMultiHue":{"enum":["turbo","viridis","inferno","magma","plasma","cividis","bluegreen","bluegreen-3","bluegreen-4","bluegreen-5","bluegreen-6","bluegreen-7","bluegreen-8","bluegreen-9","bluepurple","bluepurple-3","bluepurple-4","bluepurple-5","bluepurple-6","bluepurple-7","bluepurple-8","bluepurple-9","goldgreen","goldgreen-3","goldgreen-4","goldgreen-5","goldgreen-6","goldgreen-7","goldgreen-8","goldgreen-9","goldorange","goldorange-3","goldorange-4","goldorange-5","goldorange-6","goldorange-7","goldorange-8","goldorange-9","goldred","goldred-3","goldred-4","goldred-5","goldred-6","goldred-7","goldred-8","goldred-9","greenblue","greenblue-3","greenblue-4","greenblue-5","greenblue-6","greenblue-7","greenblue-8","greenblue-9","orangered","orangered-3","orangered-4","orangered-5","orangered-6","orangered-7","orangered-8","orangered-9","purplebluegreen","purplebluegreen-3","purplebluegreen-4","purplebluegreen-5","purplebluegreen-6","purplebluegreen-7","purplebluegreen-8","purplebluegreen-9","purpleblue","purpleblue-3","purpleblue-4","purpleblue-5","purpleblue-6","purpleblue-7","purpleblue-8","purpleblue-9","purplered","purplered-3","purplered-4","purplered-5","purplered-6","purplered-7","purplered-8","purplered-9","redpurple","redpurple-3","redpurple-4","redpurple-5","redpurple-6","redpurple-7","redpurple-8","redpurple-9","yellowgreenblue","yellowgreenblue-3","yellowgreenblue-4","yellowgreenblue-5","yellowgreenblue-6","yellowgreenblue-7","yellowgreenblue-8","yellowgreenblue-9","yellowgreen","yellowgreen-3","yellowgreen-4","yellowgreen-5","yellowgreen-6","yellowgreen-7","yellowgreen-8","yellowgreen-9","yelloworangebrown","yelloworangebrown-3","yelloworangebrown-4","yelloworangebrown-5","yelloworangebrown-6","yelloworangebrown-7","yelloworangebrown-8","yelloworangebrown-9","yelloworangered","yelloworangered-3","yelloworangered-4","yelloworangered-5","yelloworangered-6","yelloworangered-7","yelloworangered-8","yelloworangered-9","darkblue","darkblue-3","darkblue-4","darkblue-5","darkblue-6","darkblue-7","darkblue-8","darkblue-9","darkgold","darkgold-3","darkgold-4","darkgold-5","darkgold-6","darkgold-7","darkgold-8","darkgold-9","darkgreen","darkgreen-3","darkgreen-4","darkgreen-5","darkgreen-6","darkgreen-7","darkgreen-8","darkgreen-9","darkmulti","darkmulti-3","darkmulti-4","darkmulti-5","darkmulti-6","darkmulti-7","darkmulti-8","darkmulti-9","darkred","darkred-3","darkred-4","darkred-5","darkred-6","darkred-7","darkred-8","darkred-9","lightgreyred","lightgreyred-3","lightgreyred-4","lightgreyred-5","lightgreyred-6","lightgreyred-7","lightgreyred-8","lightgreyred-9","lightgreyteal","lightgreyteal-3","lightgreyteal-4","lightgreyteal-5","lightgreyteal-6","lightgreyteal-7","lightgreyteal-8","lightgreyteal-9","lightmulti","lightmulti-3","lightmulti-4","lightmulti-5","lightmulti-6","lightmulti-7","lightmulti-8","lightmulti-9","lightorange","lightorange-3","lightorange-4","lightorange-5","lightorange-6","lightorange-7","lightorange-8","lightorange-9","lighttealblue","lighttealblue-3","lighttealblue-4","lighttealblue-5","lighttealblue-6","lighttealblue-7","lighttealblue-8","lighttealblue-9"],"type":"string"},"SequentialSingleHue":{"enum":["blues","tealblues","teals","greens","browns","greys","purples","warmgreys","reds","oranges"],"type":"string"},"ShapeDef":{"$ref":"#/definitions/MarkPropDef<(string|null),TypeForShape>"},"SharedEncoding":{"additionalProperties":false,"properties":{"angle":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"color":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"$ref":"#/definitions/Gradient"},{"type":"string"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"description":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(string|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(string|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"format":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/Dict"}],"description":"When used with the default `\\"number\\"` and `\\"time\\"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.\\n\\n- If the format type is `\\"number\\"` (e.g., for quantitative fields), this is D3\'s [number format pattern](https://github.com/d3/d3-format#locale_format).\\n- If the format type is `\\"time\\"` (e.g., for temporal fields), this is D3\'s [time format pattern](https://github.com/d3/d3-time-format#locale_format).\\n\\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.\\n\\nWhen used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.\\n\\n__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format."},"formatType":{"description":"The format type for labels. One of `\\"number\\"`, `\\"time\\"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).\\n\\n__Default value:__\\n- `\\"time\\"` for temporal fields and ordinal and nominal fields with `timeUnit`.\\n- `\\"number\\"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.","type":"string"},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"string"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"detail":{"anyOf":[{"$ref":"#/definitions/FieldDefWithoutScale"},{"items":{"$ref":"#/definitions/FieldDefWithoutScale"},"type":"array"}],"description":"Additional levels of detail for grouping data in aggregate views and in line, trail, and area marks without mapping data to a specific visual channel."},"fill":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"$ref":"#/definitions/Gradient"},{"type":"string"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"fillOpacity":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"href":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(string|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(string|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"format":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/Dict"}],"description":"When used with the default `\\"number\\"` and `\\"time\\"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.\\n\\n- If the format type is `\\"number\\"` (e.g., for quantitative fields), this is D3\'s [number format pattern](https://github.com/d3/d3-format#locale_format).\\n- If the format type is `\\"time\\"` (e.g., for temporal fields), this is D3\'s [time format pattern](https://github.com/d3/d3-time-format#locale_format).\\n\\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.\\n\\nWhen used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.\\n\\n__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format."},"formatType":{"description":"The format type for labels. One of `\\"number\\"`, `\\"time\\"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).\\n\\n__Default value:__\\n- `\\"time\\"` for temporal fields and ordinal and nominal fields with `timeUnit`.\\n- `\\"number\\"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.","type":"string"},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"string"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"key":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"latitude":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.","type":"null"},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"const":"quantitative","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.","type":"string"},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"latitude2":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.","type":"null"},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"longitude":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.","type":"null"},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"const":"quantitative","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.","type":"string"},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"longitude2":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.","type":"null"},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"opacity":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"order":{"anyOf":[{"$ref":"#/definitions/OrderFieldDef"},{"items":{"$ref":"#/definitions/OrderFieldDef"},"type":"array"},{"$ref":"#/definitions/OrderValueDef"}],"description":"Order of the marks.\\n- For stacked marks, this `order` channel encodes [stack order](https://vega.github.io/vega-lite/docs/stack.html#order).\\n- For line and trail marks, this `order` channel encodes order of data points in the lines. This can be useful for creating [a connected scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html). Setting `order` to `{\\"value\\": null}` makes the line marks use the original order in the data sources.\\n- Otherwise, this `order` channel encodes layer order of the marks.\\n\\n__Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping."},"radius":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"stack":{"anyOf":[{"$ref":"#/definitions/StackOffset"},{"type":"null"},{"type":"boolean"}],"description":"Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.\\n\\n`stack` can be one of the following values:\\n- `\\"zero\\"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).\\n- `\\"normalize\\"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>\\n-`\\"center\\"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).\\n- `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.\\n\\n__Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.\\n\\n__See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"radius2":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.","type":"null"},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"shape":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef<TypeForShape>"},{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"$ref":"#/definitions/TypeForShape","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"string"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"size":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"stroke":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"$ref":"#/definitions/Gradient"},{"type":"string"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"strokeDash":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(number[]|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number[]|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(number[]|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number[]|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"strokeOpacity":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"strokeWidth":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"legend":{"anyOf":[{"$ref":"#/definitions/Legend"},{"type":"null"}],"description":"An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\\n\\n__See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"text":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(Text|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(Text|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},{"anyOf":[{"$ref":"#/definitions/ConditionalStringFieldDef"},{"$ref":"#/definitions/ConditionalValueDef<(Text|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(Text|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"format":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/Dict"}],"description":"When used with the default `\\"number\\"` and `\\"time\\"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.\\n\\n- If the format type is `\\"number\\"` (e.g., for quantitative fields), this is D3\'s [number format pattern](https://github.com/d3/d3-format#locale_format).\\n- If the format type is `\\"time\\"` (e.g., for temporal fields), this is D3\'s [time format pattern](https://github.com/d3/d3-time-format#locale_format).\\n\\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.\\n\\nWhen used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.\\n\\n__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format."},"formatType":{"description":"The format type for labels. One of `\\"number\\"`, `\\"time\\"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).\\n\\n__Default value:__\\n- `\\"time\\"` for temporal fields and ordinal and nominal fields with `timeUnit`.\\n- `\\"number\\"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.","type":"string"},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"theta":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"stack":{"anyOf":[{"$ref":"#/definitions/StackOffset"},{"type":"null"},{"type":"boolean"}],"description":"Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.\\n\\n`stack` can be one of the following values:\\n- `\\"zero\\"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).\\n- `\\"normalize\\"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>\\n-`\\"center\\"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).\\n- `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.\\n\\n__Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.\\n\\n__See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"theta2":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.","type":"null"},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"tooltip":{"anyOf":[{"$ref":"#/definitions/StringFieldDefWithCondition"},{"$ref":"#/definitions/StringValueDefWithCondition"},{"items":{"$ref":"#/definitions/StringFieldDef"},"type":"array"},{"type":"null"}],"description":"The tooltip text to show upon mouse hover. Specifying `tooltip` encoding overrides [the `tooltip` property in the mark definition](https://vega.github.io/vega-lite/docs/mark.html#mark-def).\\n\\nSee the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip in Vega-Lite."},"url":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"condition":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/ConditionalValueDef<(string|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(string|ExprRef)>"},"type":"array"}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."}],"description":"One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\\n\\n__Note:__ A field definition\'s `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"format":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/Dict"}],"description":"When used with the default `\\"number\\"` and `\\"time\\"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.\\n\\n- If the format type is `\\"number\\"` (e.g., for quantitative fields), this is D3\'s [number format pattern](https://github.com/d3/d3-format#locale_format).\\n- If the format type is `\\"time\\"` (e.g., for temporal fields), this is D3\'s [time format pattern](https://github.com/d3/d3-time-format#locale_format).\\n\\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.\\n\\nWhen used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.\\n\\n__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format."},"formatType":{"description":"The format type for labels. One of `\\"number\\"`, `\\"time\\"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).\\n\\n__Default value:__\\n- `\\"time\\"` for temporal fields and ordinal and nominal fields with `timeUnit`.\\n- `\\"number\\"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.","type":"string"},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"string"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"x":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"axis":{"anyOf":[{"$ref":"#/definitions/Axis"},{"type":"null"}],"description":"An object defining properties of axis\'s gridlines, ticks and labels. If `null`, the axis for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [axis properties](https://vega.github.io/vega-lite/docs/axis.html) are applied.\\n\\n__See also:__ [`axis`](https://vega.github.io/vega-lite/docs/axis.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"impute":{"anyOf":[{"$ref":"#/definitions/ImputeParams"},{"type":"null"}],"description":"An object defining the properties of the Impute Operation to be applied. The field value of the other positional channel is taken as `key` of the `Impute` Operation. The field of the `color` channel if specified is used as `groupby` of the `Impute` Operation.\\n\\n__See also:__ [`impute`](https://vega.github.io/vega-lite/docs/impute.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"stack":{"anyOf":[{"$ref":"#/definitions/StackOffset"},{"type":"null"},{"type":"boolean"}],"description":"Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.\\n\\n`stack` can be one of the following values:\\n- `\\"zero\\"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).\\n- `\\"normalize\\"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>\\n-`\\"center\\"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).\\n- `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.\\n\\n__Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.\\n\\n__See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"x2":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.","type":"null"},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"xError":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.","type":"null"},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"value":{"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).","type":"number"}},"type":"object"},"xError2":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.","type":"null"},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"value":{"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).","type":"number"}},"type":"object"},"y":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"axis":{"anyOf":[{"$ref":"#/definitions/Axis"},{"type":"null"}],"description":"An object defining properties of axis\'s gridlines, ticks and labels. If `null`, the axis for the encoding channel will be removed.\\n\\n__Default value:__ If undefined, default [axis properties](https://vega.github.io/vega-lite/docs/axis.html) are applied.\\n\\n__See also:__ [`axis`](https://vega.github.io/vega-lite/docs/axis.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"impute":{"anyOf":[{"$ref":"#/definitions/ImputeParams"},{"type":"null"}],"description":"An object defining the properties of the Impute Operation to be applied. The field value of the other positional channel is taken as `key` of the `Impute` Operation. The field of the `color` channel if specified is used as `groupby` of the `Impute` Operation.\\n\\n__See also:__ [`impute`](https://vega.github.io/vega-lite/docs/impute.html) documentation."},"scale":{"anyOf":[{"$ref":"#/definitions/Scale"},{"type":"null"}],"description":"An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\\n\\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\\n\\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\\n\\n__See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation."},"sort":{"$ref":"#/definitions/Sort","description":"Sort order for the encoded field.\\n\\nFor continuous fields (quantitative or temporal), `sort` can be either `\\"ascending\\"` or `\\"descending\\"`.\\n\\nFor discrete fields, `sort` can be one of the following:\\n- `\\"ascending\\"` or `\\"descending\\"` -- for sorting by the values\' natural order in JavaScript.\\n- [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\\"x\\"` or `\\"y\\"`) with an optional minus prefix for descending sort (e.g., `\\"-x\\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\\"sort\\": \\"-x\\"` is equivalent to `\\"sort\\": {\\"encoding\\": \\"x\\", \\"order\\": \\"descending\\"}`.\\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\\"month\\"` and `\\"day\\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\\"Mon\\"`, `\\"Tue\\"`).\\n- `null` indicating no sort.\\n\\n__Default value:__ `\\"ascending\\"`\\n\\n__Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\\n\\n__See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation."},"stack":{"anyOf":[{"$ref":"#/definitions/StackOffset"},{"type":"null"},{"type":"boolean"}],"description":"Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.\\n\\n`stack` can be one of the following values:\\n- `\\"zero\\"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).\\n- `\\"normalize\\"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>\\n-`\\"center\\"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).\\n- `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.\\n\\n__Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.\\n\\n__See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"anyOf":[{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}],"description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"y2":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.","type":"null"},"datum":{"anyOf":[{"$ref":"#/definitions/PrimitiveValue"},{"$ref":"#/definitions/DateTime"},{"$ref":"#/definitions/ExprRef"},{"$ref":"#/definitions/RepeatRef"}],"description":"A constant value in data domain."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/Type","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."},"value":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"yError":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.","type":"null"},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"value":{"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).","type":"number"}},"type":"object"},"yError2":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.","type":"null"},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"value":{"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).","type":"number"}},"type":"object"}},"type":"object"},"SingleDefUnitChannel":{"enum":["x","y","x2","y2","longitude","latitude","longitude2","latitude2","theta","theta2","radius","radius2","color","fill","stroke","opacity","fillOpacity","strokeOpacity","strokeWidth","strokeDash","size","angle","shape","key","text","href","url","description"],"type":"string"},"SingleTimeUnit":{"anyOf":[{"$ref":"#/definitions/LocalSingleTimeUnit"},{"$ref":"#/definitions/UtcSingleTimeUnit"}]},"Sort":{"anyOf":[{"$ref":"#/definitions/SortArray"},{"$ref":"#/definitions/AllSortString"},{"$ref":"#/definitions/EncodingSortField"},{"$ref":"#/definitions/SortByEncoding"},{"type":"null"}]},"SortArray":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"items":{"type":"string"},"type":"array"},{"items":{"type":"boolean"},"type":"array"},{"items":{"$ref":"#/definitions/DateTime"},"type":"array"}]},"SortByChannel":{"enum":["x","y","color","fill","stroke","strokeWidth","size","shape","fillOpacity","strokeOpacity","opacity","text"],"type":"string"},"SortByChannelDesc":{"enum":["-x","-y","-color","-fill","-stroke","-strokeWidth","-size","-shape","-fillOpacity","-strokeOpacity","-opacity","-text"],"type":"string"},"SortByEncoding":{"additionalProperties":false,"properties":{"encoding":{"$ref":"#/definitions/SortByChannel","description":"The [encoding channel](https://vega.github.io/vega-lite/docs/encoding.html#channels) to sort by (e.g., `\\"x\\"`, `\\"y\\"`)"},"order":{"anyOf":[{"$ref":"#/definitions/SortOrder"},{"type":"null"}],"description":"The sort order. One of `\\"ascending\\"` (default), `\\"descending\\"`, or `null` (no not sort)."}},"required":["encoding"],"type":"object"},"SortField":{"additionalProperties":false,"description":"A sort definition for transform","properties":{"field":{"$ref":"#/definitions/FieldName","description":"The name of the field to sort."},"order":{"anyOf":[{"$ref":"#/definitions/SortOrder"},{"type":"null"}],"description":"Whether to sort the field in ascending or descending order. One of `\\"ascending\\"` (default), `\\"descending\\"`, or `null` (no not sort)."}},"required":["field"],"type":"object"},"SortOrder":{"enum":["ascending","descending"],"type":"string"},"SphereGenerator":{"additionalProperties":false,"properties":{"name":{"description":"Provide a placeholder name and bind data at runtime.","type":"string"},"sphere":{"anyOf":[{"const":true,"type":"boolean"},{"additionalProperties":false,"type":"object"}],"description":"Generate sphere GeoJSON data for the full globe."}},"required":["sphere"],"type":"object"},"StackOffset":{"enum":["zero","center","normalize"],"type":"string"},"StackTransform":{"additionalProperties":false,"properties":{"as":{"anyOf":[{"$ref":"#/definitions/FieldName"},{"items":{"$ref":"#/definitions/FieldName"},"maxItems":2,"minItems":2,"type":"array"}],"description":"Output field names. This can be either a string or an array of strings with two elements denoting the name for the fields for stack start and stack end respectively. If a single string(e.g., `\\"val\\"`) is provided, the end field will be `\\"val_end\\"`."},"groupby":{"description":"The data fields to group by.","items":{"$ref":"#/definitions/FieldName"},"type":"array"},"offset":{"description":"Mode for stacking marks. One of `\\"zero\\"` (default), `\\"center\\"`, or `\\"normalize\\"`. The `\\"zero\\"` offset will stack starting at `0`. The `\\"center\\"` offset will center the stacks. The `\\"normalize\\"` offset will compute percentage values for each stack point, with output values in the range `[0,1]`.\\n\\n__Default value:__ `\\"zero\\"`","enum":["zero","center","normalize"],"type":"string"},"sort":{"description":"Field that determines the order of leaves in the stacked charts.","items":{"$ref":"#/definitions/SortField"},"type":"array"},"stack":{"$ref":"#/definitions/FieldName","description":"The field which is stacked."}},"required":["stack","groupby","as"],"type":"object"},"StandardType":{"enum":["quantitative","ordinal","temporal","nominal"],"type":"string"},"Step":{"additionalProperties":false,"properties":{"step":{"description":"The size (width/height) per discrete step.","type":"number"}},"required":["step"],"type":"object"},"Stream":{"anyOf":[{"$ref":"#/definitions/EventStream"},{"$ref":"#/definitions/DerivedStream"},{"$ref":"#/definitions/MergedStream"}]},"StringFieldDef":{"additionalProperties":false,"properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"format":{"anyOf":[{"type":"string"},{"$ref":"#/definitions/Dict"}],"description":"When used with the default `\\"number\\"` and `\\"time\\"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.\\n\\n- If the format type is `\\"number\\"` (e.g., for quantitative fields), this is D3\'s [number format pattern](https://github.com/d3/d3-format#locale_format).\\n- If the format type is `\\"time\\"` (e.g., for temporal fields), this is D3\'s [time format pattern](https://github.com/d3/d3-time-format#locale_format).\\n\\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.\\n\\nWhen used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.\\n\\n__Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format."},"formatType":{"description":"The format type for labels. One of `\\"number\\"`, `\\"time\\"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).\\n\\n__Default value:__\\n- `\\"time\\"` for temporal fields and ordinal and nominal fields with `timeUnit`.\\n- `\\"number\\"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.","type":"string"},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"StringFieldDefWithCondition":{"$ref":"#/definitions/FieldOrDatumDefWithCondition<StringFieldDef,string>"},"StringValueDefWithCondition":{"$ref":"#/definitions/ValueDefWithCondition<MarkPropFieldOrDatumDef,(string|null)>"},"StrokeCap":{"enum":["butt","round","square"],"type":"string"},"StrokeJoin":{"enum":["miter","round","bevel"],"type":"string"},"StyleConfigIndex":{"additionalProperties":{"anyOf":[{"$ref":"#/definitions/AnyMarkConfig"},{"$ref":"#/definitions/Axis"}]},"properties":{"arc":{"$ref":"#/definitions/RectConfig","description":"Arc-specific Config"},"area":{"$ref":"#/definitions/AreaConfig","description":"Area-Specific Config"},"bar":{"$ref":"#/definitions/BarConfig","description":"Bar-Specific Config"},"circle":{"$ref":"#/definitions/MarkConfig","description":"Circle-Specific Config"},"geoshape":{"$ref":"#/definitions/MarkConfig","description":"Geoshape-Specific Config"},"group-subtitle":{"$ref":"#/definitions/MarkConfig","description":"Default style for chart subtitles"},"group-title":{"$ref":"#/definitions/MarkConfig","description":"Default style for chart titles"},"guide-label":{"$ref":"#/definitions/MarkConfig","description":"Default style for axis, legend, and header labels."},"guide-title":{"$ref":"#/definitions/MarkConfig","description":"Default style for axis, legend, and header titles."},"image":{"$ref":"#/definitions/RectConfig","description":"Image-specific Config"},"line":{"$ref":"#/definitions/LineConfig","description":"Line-Specific Config"},"mark":{"$ref":"#/definitions/MarkConfig","description":"Mark Config"},"point":{"$ref":"#/definitions/MarkConfig","description":"Point-Specific Config"},"rect":{"$ref":"#/definitions/RectConfig","description":"Rect-Specific Config"},"rule":{"$ref":"#/definitions/MarkConfig","description":"Rule-Specific Config"},"square":{"$ref":"#/definitions/MarkConfig","description":"Square-Specific Config"},"text":{"$ref":"#/definitions/MarkConfig","description":"Text-Specific Config"},"tick":{"$ref":"#/definitions/TickConfig","description":"Tick-Specific Config"},"trail":{"$ref":"#/definitions/LineConfig","description":"Trail-Specific Config"}},"type":"object"},"SymbolShape":{"type":"string"},"Text":{"anyOf":[{"type":"string"},{"items":{"type":"string"},"type":"array"}]},"TextBaseline":{"anyOf":[{"const":"alphabetic","type":"string"},{"$ref":"#/definitions/Baseline"},{"const":"line-top","type":"string"},{"const":"line-bottom","type":"string"}]},"TextDef":{"anyOf":[{"$ref":"#/definitions/FieldOrDatumDefWithCondition<StringFieldDef,Text>"},{"$ref":"#/definitions/FieldOrDatumDefWithCondition<StringDatumDef,Text>"},{"$ref":"#/definitions/ValueDefWithCondition<StringFieldDef,Text>"}]},"TextDirection":{"enum":["ltr","rtl"],"type":"string"},"TickConfig":{"additionalProperties":false,"properties":{"align":{"anyOf":[{"$ref":"#/definitions/Align"},{"$ref":"#/definitions/ExprRef"}],"description":"The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `\\"left\\"`, `\\"right\\"`, `\\"center\\"`.\\n\\n__Note:__ Expression reference is *not* supported for range marks."},"angle":{"anyOf":[{"description":"The rotation angle of the text, in degrees.","maximum":360,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"aria":{"anyOf":[{"description":"A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \\"aria-hidden\\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"ariaRole":{"anyOf":[{"description":"Sets the type of user interface element of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \\"role\\" attribute. Warning: this property is experimental and may be changed in the future.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"ariaRoleDescription":{"anyOf":[{"description":"A human-readable, author-localized description for the role of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the \\"aria-roledescription\\" attribute. Warning: this property is experimental and may be changed in the future.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"aspect":{"anyOf":[{"description":"Whether to keep aspect ratio of image marks.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"bandSize":{"description":"The width of the ticks.\\n\\n__Default value:__  3/4 of step (width step for horizontal ticks and height step for vertical ticks).","minimum":0,"type":"number"},"baseline":{"anyOf":[{"$ref":"#/definitions/TextBaseline"},{"$ref":"#/definitions/ExprRef"}],"description":"For text marks, the vertical text baseline. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, `\\"line-bottom\\"`, or an expression reference that provides one of the valid values. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.\\n\\nFor range marks, the vertical alignment of the marks. One of `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`.\\n\\n__Note:__ Expression reference is *not* supported for range marks."},"blend":{"anyOf":[{"$ref":"#/definitions/Blend","description":"The color blend mode for drawing an item on its current background. Any valid [CSS mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value can be used.\\n\\n__Default value: `\\"source-over\\"`"},{"$ref":"#/definitions/ExprRef"}]},"color":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"$ref":"#/definitions/ExprRef"}],"description":"Default color.\\n\\n__Default value:__ <span style=\\"color: #4682b4;\\">&#9632;</span> `\\"#4682b4\\"`\\n\\n__Note:__\\n- This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\\n- The `fill` and `stroke` properties have higher precedence than `color` and will override `color`."},"cornerRadius":{"anyOf":[{"description":"The radius in pixels of rounded rectangles or arcs\' corners.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusBottomLeft":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' bottom left corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusBottomRight":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' bottom right corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusTopLeft":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' top right corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cornerRadiusTopRight":{"anyOf":[{"description":"The radius in pixels of rounded rectangles\' top left corner.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cursor":{"anyOf":[{"$ref":"#/definitions/Cursor","description":"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},{"$ref":"#/definitions/ExprRef"}]},"description":{"anyOf":[{"description":"A text description of the mark item for [ARIA accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG output only). If specified, this property determines the [\\"aria-label\\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"dir":{"anyOf":[{"$ref":"#/definitions/TextDirection","description":"The direction of the text. One of `\\"ltr\\"` (left-to-right) or `\\"rtl\\"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\\n\\n__Default value:__ `\\"ltr\\"`"},{"$ref":"#/definitions/ExprRef"}]},"dx":{"anyOf":[{"description":"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"dy":{"anyOf":[{"description":"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"ellipsis":{"anyOf":[{"description":"The ellipsis string for text truncated in response to the limit parameter.\\n\\n__Default value:__ `\\"…\\"`","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"endAngle":{"anyOf":[{"description":"The end angle in radians for arc marks. A value of `0` indicates up (north), increasing values proceed clockwise.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fill":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.\\n\\n__Default value:__ (None)"},"fillOpacity":{"anyOf":[{"description":"The fill opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"filled":{"description":"Whether the mark\'s color should be used as fill color instead of stroke color.\\n\\n__Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.\\n\\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).","type":"boolean"},"font":{"anyOf":[{"description":"The typeface to set the text in (e.g., `\\"Helvetica Neue\\"`).","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"fontSize":{"anyOf":[{"description":"The font size, in pixels.\\n\\n__Default value:__ `11`","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"The font style (e.g., `\\"italic\\"`)."},{"$ref":"#/definitions/ExprRef"}]},"fontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"The font weight. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},{"$ref":"#/definitions/ExprRef"}]},"height":{"anyOf":[{"description":"Height of the marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"href":{"anyOf":[{"$ref":"#/definitions/URI","description":"A URL to load upon mouse click. If defined, the mark acts as a hyperlink."},{"$ref":"#/definitions/ExprRef"}]},"innerRadius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`."},"interpolate":{"anyOf":[{"$ref":"#/definitions/Interpolate","description":"The line interpolation method to use for line and area marks. One of the following:\\n- `\\"linear\\"`: piecewise linear segments, as in a polyline.\\n- `\\"linear-closed\\"`: close the linear segments to form a polygon.\\n- `\\"step\\"`: alternate between horizontal and vertical segments, as in a step function.\\n- `\\"step-before\\"`: alternate between vertical and horizontal segments, as in a step function.\\n- `\\"step-after\\"`: alternate between horizontal and vertical segments, as in a step function.\\n- `\\"basis\\"`: a B-spline, with control point duplication on the ends.\\n- `\\"basis-open\\"`: an open B-spline; may not intersect the start or end.\\n- `\\"basis-closed\\"`: a closed B-spline, as in a loop.\\n- `\\"cardinal\\"`: a Cardinal spline, with control point duplication on the ends.\\n- `\\"cardinal-open\\"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\\n- `\\"cardinal-closed\\"`: a closed Cardinal spline, as in a loop.\\n- `\\"bundle\\"`: equivalent to basis, except the tension parameter is used to straighten the spline.\\n- `\\"monotone\\"`: cubic interpolation that preserves monotonicity in y."},{"$ref":"#/definitions/ExprRef"}]},"invalid":{"description":"Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).\\n- If set to `\\"filter\\"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).\\n- If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.","enum":["filter",null],"type":["string","null"]},"limit":{"anyOf":[{"description":"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\\n\\n__Default value:__ `0` -- indicating no limit","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"lineBreak":{"anyOf":[{"description":"A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property is ignored if the text is array-valued.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"lineHeight":{"anyOf":[{"description":"The line height in pixels (the spacing between subsequent lines of text) for multi-line text marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"opacity":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The overall opacity (value between [0,1]).\\n\\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.","maximum":1,"minimum":0},"order":{"description":"For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.","type":["null","boolean"]},"orient":{"$ref":"#/definitions/Orientation","description":"The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.\\n- For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.\\n- For area, this property determines the orient property of the Vega output.\\n- For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored."},"outerRadius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`."},"padAngle":{"anyOf":[{"description":"The angular padding applied to sides of the arc, in radians.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"radius":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"For arc mark, the primary (outer) radius in pixels.\\n\\nFor text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties."},"radius2":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The secondary (inner) radius in pixels of arc marks."},"shape":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/SymbolShape"},{"type":"string"}],"description":"Shape of the point marks. Supported values include:\\n- plotting shapes: `\\"circle\\"`, `\\"square\\"`, `\\"cross\\"`, `\\"diamond\\"`, `\\"triangle-up\\"`, `\\"triangle-down\\"`, `\\"triangle-right\\"`, or `\\"triangle-left\\"`.\\n- the line symbol `\\"stroke\\"`\\n- centered directional shapes `\\"arrow\\"`, `\\"wedge\\"`, or `\\"triangle\\"`\\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\\n\\n__Default value:__ `\\"circle\\"`"},{"$ref":"#/definitions/ExprRef"}]},"size":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"Default size for marks.\\n- For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.\\n- For `bar`, this represents the band size of the bar, in pixels.\\n- For `text`, this represents the font size, in pixels.\\n\\n__Default value:__\\n- `30` for point, circle, square marks; width/height\'s `step`\\n- `2` for bar marks with discrete dimensions;\\n- `5` for bar marks with continuous dimensions;\\n- `11` for text marks.","minimum":0},"smooth":{"anyOf":[{"description":"A boolean flag (default true) indicating if the image should be smoothed when resized. If false, individual pixels should be scaled directly rather than interpolated with smoothing. For SVG rendering, this option may not work in some browsers due to lack of standardization.","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"startAngle":{"anyOf":[{"description":"The start angle in radians for arc marks. A value of `0` indicates up (north), increasing values proceed clockwise.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"stroke":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/Gradient"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.\\n\\n__Default value:__ (None)"},"strokeCap":{"anyOf":[{"$ref":"#/definitions/StrokeCap","description":"The stroke cap for line ending style. One of `\\"butt\\"`, `\\"round\\"`, or `\\"square\\"`.\\n\\n__Default value:__ `\\"butt\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeDash":{"anyOf":[{"description":"An array of alternating stroke, space lengths for creating dashed or dotted lines.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"strokeDashOffset":{"anyOf":[{"description":"The offset (in pixels) into which to begin drawing with the stroke dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeJoin":{"anyOf":[{"$ref":"#/definitions/StrokeJoin","description":"The stroke line join method. One of `\\"miter\\"`, `\\"round\\"` or `\\"bevel\\"`.\\n\\n__Default value:__ `\\"miter\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeMiterLimit":{"anyOf":[{"description":"The miter limit at which to bevel a line join.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOffset":{"anyOf":[{"description":"The offset in pixels at which to draw the group stroke and fill. If unspecified, the default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths align with the pixel grid.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOpacity":{"anyOf":[{"description":"The stroke opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeWidth":{"anyOf":[{"description":"The stroke width, in pixels.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"tension":{"anyOf":[{"description":"Depending on the interpolation type, sets the tension parameter (for line and area marks).","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"text":{"anyOf":[{"$ref":"#/definitions/Text","description":"Placeholder text if the `text` channel is not specified"},{"$ref":"#/definitions/ExprRef"}]},"theta":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"- For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)\\n\\n- For text marks, polar coordinate angle in radians.","maximum":360,"minimum":0},"theta2":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise."},"thickness":{"description":"Thickness of the tick mark.\\n\\n__Default value:__  `1`","minimum":0,"type":"number"},"timeUnitBandPosition":{"description":"Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step. If set to `0.5`, the marks will be positioned in the middle of the time unit band step.","type":"number"},"timeUnitBandSize":{"description":"Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step. If set to `0.5`, bandwidth of the marks will be half of the time unit band step.","type":"number"},"tooltip":{"anyOf":[{"type":"number"},{"type":"string"},{"type":"boolean"},{"$ref":"#/definitions/TooltipContent"},{"$ref":"#/definitions/ExprRef"},{"type":"null"}],"description":"The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\\n\\n- If `tooltip` is `true` or `{\\"content\\": \\"encoding\\"}`, then all fields from `encoding` will be used.\\n- If `tooltip` is `{\\"content\\": \\"data\\"}`, then all fields that appear in the highlighted data point will be used.\\n- If set to `null` or `false`, then no tooltip will be used.\\n\\nSee the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.\\n\\n__Default value:__ `null`"},"url":{"anyOf":[{"$ref":"#/definitions/URI","description":"The URL of the image file for image marks."},{"$ref":"#/definitions/ExprRef"}]},"width":{"anyOf":[{"description":"Width of the marks.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"x":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"X coordinates of the marks, or width of horizontal `\\"bar\\"` and `\\"area\\"` without specified `x2` or `width`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"x2":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"X2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"width\\"` for the width of the plot."},"y":{"anyOf":[{"type":"number"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Y coordinates of the marks, or height of vertical `\\"bar\\"` and `\\"area\\"` without specified `y2` or `height`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."},"y2":{"anyOf":[{"type":"number"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"Y2 coordinates for ranged `\\"area\\"`, `\\"bar\\"`, `\\"rect\\"`, and  `\\"rule\\"`.\\n\\nThe `value` of this channel can be a number or a string `\\"height\\"` for the height of the plot."}},"type":"object"},"TickCount":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/TimeInterval"},{"$ref":"#/definitions/TimeIntervalStep"}]},"TimeInterval":{"enum":["millisecond","second","minute","hour","day","week","month","year"],"type":"string"},"TimeIntervalStep":{"additionalProperties":false,"properties":{"interval":{"$ref":"#/definitions/TimeInterval"},"step":{"type":"number"}},"required":["interval","step"],"type":"object"},"TimeLocale":{"additionalProperties":false,"description":"Locale definition for formatting dates and times.","properties":{"date":{"description":"The date (%x) format specifier (e.g., \\"%m/%d/%Y\\").","type":"string"},"dateTime":{"description":"The date and time (%c) format specifier (e.g., \\"%a %b %e %X %Y\\").","type":"string"},"days":{"$ref":"#/definitions/Vector7<string>","description":"The full names of the weekdays, starting with Sunday."},"months":{"$ref":"#/definitions/Vector12<string>","description":"The full names of the months (starting with January)."},"periods":{"$ref":"#/definitions/Vector2<string>","description":"The A.M. and P.M. equivalents (e.g., [\\"AM\\", \\"PM\\"])."},"shortDays":{"$ref":"#/definitions/Vector7<string>","description":"The abbreviated names of the weekdays, starting with Sunday."},"shortMonths":{"$ref":"#/definitions/Vector12<string>","description":"The abbreviated names of the months (starting with January)."},"time":{"description":"The time (%X) format specifier (e.g., \\"%H:%M:%S\\").","type":"string"}},"required":["dateTime","date","time","periods","days","shortDays","months","shortMonths"],"type":"object"},"TimeUnit":{"anyOf":[{"$ref":"#/definitions/SingleTimeUnit"},{"$ref":"#/definitions/MultiTimeUnit"}]},"TimeUnitParams":{"additionalProperties":false,"properties":{"maxbins":{"description":"If no `unit` is specified, maxbins is used to infer time units.","type":"number"},"step":{"description":"The number of steps between bins, in terms of the least significant unit provided.","type":"number"},"unit":{"$ref":"#/definitions/TimeUnit","description":"Defines how date-time values should be binned."},"utc":{"description":"True to use UTC timezone. Equivalent to using a `utc` prefixed `TimeUnit`.","type":"boolean"}},"type":"object"},"TimeUnitTransform":{"additionalProperties":false,"properties":{"as":{"$ref":"#/definitions/FieldName","description":"The output field to write the timeUnit value."},"field":{"$ref":"#/definitions/FieldName","description":"The data field to apply time unit."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"The timeUnit."}},"required":["timeUnit","field","as"],"type":"object"},"TitleAnchor":{"enum":[null,"start","middle","end"],"type":["null","string"]},"TitleConfig":{"$ref":"#/definitions/BaseTitleNoValueRefs"},"TitleFrame":{"enum":["bounds","group"],"type":"string"},"TitleOrient":{"enum":["none","left","right","top","bottom"],"type":"string"},"TitleParams":{"additionalProperties":false,"properties":{"align":{"$ref":"#/definitions/Align","description":"Horizontal text alignment for title text. One of `\\"left\\"`, `\\"center\\"`, or `\\"right\\"`."},"anchor":{"$ref":"#/definitions/TitleAnchor","description":"The anchor position for placing the title. One of `\\"start\\"`, `\\"middle\\"`, or `\\"end\\"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.\\n\\n__Default value:__ `\\"middle\\"` for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views. `\\"start\\"` for other composite views.\\n\\n__Note:__ [For now](https://github.com/vega/vega-lite/issues/2875), `anchor` is only customizable only for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views. For other composite views, `anchor` is always `\\"start\\"`."},"angle":{"anyOf":[{"description":"Angle in degrees of title and subtitle text.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"aria":{"anyOf":[{"description":"A boolean flag indicating if [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be included (SVG output only). If `false`, the \\"aria-hidden\\" attribute will be set on the output SVG group, removing the title from the ARIA accessibility tree.\\n\\n__Default value:__ `true`","type":"boolean"},{"$ref":"#/definitions/ExprRef"}]},"baseline":{"$ref":"#/definitions/TextBaseline","description":"Vertical text baseline for title and subtitle text. One of `\\"alphabetic\\"` (default), `\\"top\\"`, `\\"middle\\"`, `\\"bottom\\"`, `\\"line-top\\"`, or `\\"line-bottom\\"`. The `\\"line-top\\"` and `\\"line-bottom\\"` values operate similarly to `\\"top\\"` and `\\"bottom\\"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone."},"color":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Text color for title text."},{"$ref":"#/definitions/ExprRef"}]},"dx":{"anyOf":[{"description":"Delta offset for title and subtitle text x-coordinate.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"dy":{"anyOf":[{"description":"Delta offset for title and subtitle text y-coordinate.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"font":{"anyOf":[{"description":"Font name for title text.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"fontSize":{"anyOf":[{"description":"Font size in pixels for title text.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"fontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"Font style for title text."},{"$ref":"#/definitions/ExprRef"}]},"fontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"Font weight for title text. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},{"$ref":"#/definitions/ExprRef"}]},"frame":{"anyOf":[{"anyOf":[{"$ref":"#/definitions/TitleFrame"},{"type":"string"}],"description":"The reference frame for the anchor position, one of `\\"bounds\\"` (to anchor relative to the full bounding box) or `\\"group\\"` (to anchor relative to the group width or height)."},{"$ref":"#/definitions/ExprRef"}]},"limit":{"anyOf":[{"description":"The maximum allowed length in pixels of title and subtitle text.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"lineHeight":{"anyOf":[{"description":"Line height in pixels for multi-line title text or title text with `\\"line-top\\"` or `\\"line-bottom\\"` baseline.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"offset":{"anyOf":[{"description":"The orthogonal offset in pixels by which to displace the title group from its position along the edge of the chart.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"orient":{"anyOf":[{"$ref":"#/definitions/TitleOrient","description":"Default title orientation (`\\"top\\"`, `\\"bottom\\"`, `\\"left\\"`, or `\\"right\\"`)"},{"$ref":"#/definitions/ExprRef"}]},"style":{"anyOf":[{"type":"string"},{"items":{"type":"string"},"type":"array"}],"description":"A [mark style property](https://vega.github.io/vega-lite/docs/config.html#style) to apply to the title text mark.\\n\\n__Default value:__ `\\"group-title\\"`."},"subtitle":{"$ref":"#/definitions/Text","description":"The subtitle Text."},"subtitleColor":{"anyOf":[{"anyOf":[{"type":"null"},{"$ref":"#/definitions/Color"}],"description":"Text color for subtitle text."},{"$ref":"#/definitions/ExprRef"}]},"subtitleFont":{"anyOf":[{"description":"Font name for subtitle text.","type":"string"},{"$ref":"#/definitions/ExprRef"}]},"subtitleFontSize":{"anyOf":[{"description":"Font size in pixels for subtitle text.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"subtitleFontStyle":{"anyOf":[{"$ref":"#/definitions/FontStyle","description":"Font style for subtitle text."},{"$ref":"#/definitions/ExprRef"}]},"subtitleFontWeight":{"anyOf":[{"$ref":"#/definitions/FontWeight","description":"Font weight for subtitle text. This can be either a string (e.g `\\"bold\\"`, `\\"normal\\"`) or a number (`100`, `200`, `300`, ..., `900` where `\\"normal\\"` = `400` and `\\"bold\\"` = `700`)."},{"$ref":"#/definitions/ExprRef"}]},"subtitleLineHeight":{"anyOf":[{"description":"Line height in pixels for multi-line subtitle text.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"subtitlePadding":{"anyOf":[{"description":"The padding in pixels between title and subtitle text.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"text":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/ExprRef"}],"description":"The title text."},"zindex":{"description":"The integer z-index indicating the layering of the title group relative to other axis, mark and legend groups.\\n\\n__Default value:__ `0`.","minimum":0,"type":"number"}},"required":["text"],"type":"object"},"TooltipContent":{"additionalProperties":false,"properties":{"content":{"enum":["encoding","data"],"type":"string"}},"required":["content"],"type":"object"},"TopLevelConcatSpec":{"additionalProperties":false,"properties":{"$schema":{"description":"URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v5.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.","format":"uri","type":"string"},"align":{"anyOf":[{"$ref":"#/definitions/LayoutAlign"},{"$ref":"#/definitions/RowCol<LayoutAlign>"}],"description":"The alignment to apply to grid rows and columns. The supported string values are `\\"all\\"`, `\\"each\\"`, and `\\"none\\"`.\\n\\n- For `\\"none\\"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\\n- For `\\"each\\"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\\n- For `\\"all\\"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\\n\\nAlternatively, an object value of the form `{\\"row\\": string, \\"column\\": string}` can be used to supply different alignments for rows and columns.\\n\\n__Default value:__ `\\"all\\"`."},"autosize":{"anyOf":[{"$ref":"#/definitions/AutosizeType"},{"$ref":"#/definitions/AutoSizeParams"}],"description":"How the visualization size should be determined. If a string, should be one of `\\"pad\\"`, `\\"fit\\"` or `\\"none\\"`. Object values can additionally specify parameters for content sizing and automatic resizing.\\n\\n__Default value__: `pad`"},"background":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/ExprRef"}],"description":"CSS color property to use as the background of the entire view.\\n\\n__Default value:__ `\\"white\\"`"},"bounds":{"description":"The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\\n\\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\\n\\n__Default value:__ `\\"full\\"`","enum":["full","flush"],"type":"string"},"center":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/RowCol<boolean>"}],"description":"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\\n\\nAn object value of the form `{\\"row\\": boolean, \\"column\\": boolean}` can be used to supply different centering values for rows and columns.\\n\\n__Default value:__ `false`"},"columns":{"description":"The number of columns to include in the view composition layout.\\n\\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\\n\\n__Note__:\\n\\n1) This property is only for:\\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\\n\\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).","type":"number"},"concat":{"description":"A list of views to be concatenated.","items":{"$ref":"#/definitions/NonNormalizedSpec"},"type":"array"},"config":{"$ref":"#/definitions/Config","description":"Vega-Lite configuration object. This property can only be defined at the top-level of a specification."},"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"datasets":{"$ref":"#/definitions/Datasets","description":"A global data store for named datasets. This is a mapping from names to inline datasets. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"name":{"description":"Name of the visualization for later reference.","type":"string"},"padding":{"anyOf":[{"$ref":"#/definitions/Padding"},{"$ref":"#/definitions/ExprRef"}],"description":"The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}` to specify padding for each side of the visualization.\\n\\n__Default value__: `5`"},"params":{"description":"Dynamic variables or selections that parameterize a visualization.","items":{"anyOf":[{"$ref":"#/definitions/VariableParameter"},{"$ref":"#/definitions/TopLevelSelectionParameter"}]},"type":"array"},"resolve":{"$ref":"#/definitions/Resolve","description":"Scale, axis, and legend resolutions for view composition specifications."},"spacing":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/RowCol<number>"}],"description":"The spacing in pixels between sub-views of the composition operator. An object of the form `{\\"row\\": number, \\"column\\": number}` can be used to set different spacing values for rows and columns.\\n\\n__Default value__: Depends on `\\"spacing\\"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)"},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"},"usermeta":{"$ref":"#/definitions/Dict","description":"Optional metadata that will be passed to Vega. This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata."}},"required":["concat"],"type":"object"},"TopLevelHConcatSpec":{"additionalProperties":false,"properties":{"$schema":{"description":"URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v5.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.","format":"uri","type":"string"},"autosize":{"anyOf":[{"$ref":"#/definitions/AutosizeType"},{"$ref":"#/definitions/AutoSizeParams"}],"description":"How the visualization size should be determined. If a string, should be one of `\\"pad\\"`, `\\"fit\\"` or `\\"none\\"`. Object values can additionally specify parameters for content sizing and automatic resizing.\\n\\n__Default value__: `pad`"},"background":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/ExprRef"}],"description":"CSS color property to use as the background of the entire view.\\n\\n__Default value:__ `\\"white\\"`"},"bounds":{"description":"The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\\n\\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\\n\\n__Default value:__ `\\"full\\"`","enum":["full","flush"],"type":"string"},"center":{"description":"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\\n\\n__Default value:__ `false`","type":"boolean"},"config":{"$ref":"#/definitions/Config","description":"Vega-Lite configuration object. This property can only be defined at the top-level of a specification."},"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"datasets":{"$ref":"#/definitions/Datasets","description":"A global data store for named datasets. This is a mapping from names to inline datasets. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"hconcat":{"description":"A list of views to be concatenated and put into a row.","items":{"$ref":"#/definitions/NonNormalizedSpec"},"type":"array"},"name":{"description":"Name of the visualization for later reference.","type":"string"},"padding":{"anyOf":[{"$ref":"#/definitions/Padding"},{"$ref":"#/definitions/ExprRef"}],"description":"The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}` to specify padding for each side of the visualization.\\n\\n__Default value__: `5`"},"params":{"description":"Dynamic variables or selections that parameterize a visualization.","items":{"anyOf":[{"$ref":"#/definitions/VariableParameter"},{"$ref":"#/definitions/TopLevelSelectionParameter"}]},"type":"array"},"resolve":{"$ref":"#/definitions/Resolve","description":"Scale, axis, and legend resolutions for view composition specifications."},"spacing":{"description":"The spacing in pixels between sub-views of the concat operator.\\n\\n__Default value__: `10`","type":"number"},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"},"usermeta":{"$ref":"#/definitions/Dict","description":"Optional metadata that will be passed to Vega. This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata."}},"required":["hconcat"],"type":"object"},"TopLevelVConcatSpec":{"additionalProperties":false,"properties":{"$schema":{"description":"URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v5.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.","format":"uri","type":"string"},"autosize":{"anyOf":[{"$ref":"#/definitions/AutosizeType"},{"$ref":"#/definitions/AutoSizeParams"}],"description":"How the visualization size should be determined. If a string, should be one of `\\"pad\\"`, `\\"fit\\"` or `\\"none\\"`. Object values can additionally specify parameters for content sizing and automatic resizing.\\n\\n__Default value__: `pad`"},"background":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/ExprRef"}],"description":"CSS color property to use as the background of the entire view.\\n\\n__Default value:__ `\\"white\\"`"},"bounds":{"description":"The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\\n\\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\\n\\n__Default value:__ `\\"full\\"`","enum":["full","flush"],"type":"string"},"center":{"description":"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\\n\\n__Default value:__ `false`","type":"boolean"},"config":{"$ref":"#/definitions/Config","description":"Vega-Lite configuration object. This property can only be defined at the top-level of a specification."},"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"datasets":{"$ref":"#/definitions/Datasets","description":"A global data store for named datasets. This is a mapping from names to inline datasets. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"name":{"description":"Name of the visualization for later reference.","type":"string"},"padding":{"anyOf":[{"$ref":"#/definitions/Padding"},{"$ref":"#/definitions/ExprRef"}],"description":"The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}` to specify padding for each side of the visualization.\\n\\n__Default value__: `5`"},"params":{"description":"Dynamic variables or selections that parameterize a visualization.","items":{"anyOf":[{"$ref":"#/definitions/VariableParameter"},{"$ref":"#/definitions/TopLevelSelectionParameter"}]},"type":"array"},"resolve":{"$ref":"#/definitions/Resolve","description":"Scale, axis, and legend resolutions for view composition specifications."},"spacing":{"description":"The spacing in pixels between sub-views of the concat operator.\\n\\n__Default value__: `10`","type":"number"},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"},"usermeta":{"$ref":"#/definitions/Dict","description":"Optional metadata that will be passed to Vega. This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata."},"vconcat":{"description":"A list of views to be concatenated and put into a column.","items":{"$ref":"#/definitions/NonNormalizedSpec"},"type":"array"}},"required":["vconcat"],"type":"object"},"TopLevelLayerSpec":{"additionalProperties":false,"properties":{"$schema":{"description":"URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v5.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.","format":"uri","type":"string"},"autosize":{"anyOf":[{"$ref":"#/definitions/AutosizeType"},{"$ref":"#/definitions/AutoSizeParams"}],"description":"How the visualization size should be determined. If a string, should be one of `\\"pad\\"`, `\\"fit\\"` or `\\"none\\"`. Object values can additionally specify parameters for content sizing and automatic resizing.\\n\\n__Default value__: `pad`"},"background":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/ExprRef"}],"description":"CSS color property to use as the background of the entire view.\\n\\n__Default value:__ `\\"white\\"`"},"config":{"$ref":"#/definitions/Config","description":"Vega-Lite configuration object. This property can only be defined at the top-level of a specification."},"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"datasets":{"$ref":"#/definitions/Datasets","description":"A global data store for named datasets. This is a mapping from names to inline datasets. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"encoding":{"$ref":"#/definitions/SharedEncoding","description":"A shared key-value mapping between encoding channels and definition of fields in the underlying layers."},"height":{"anyOf":[{"type":"number"},{"const":"container","type":"string"},{"$ref":"#/definitions/Step"}],"description":"The height of a visualization.\\n\\n- For a plot with a continuous y-field, height should be a number.\\n- For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)\\n- To enable responsive sizing on height, it should be set to `\\"container\\"`.\\n\\n__Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous y-field and `config.view.discreteHeight` otherwise.\\n\\n__Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the `\\"container\\"` option cannot be used.\\n\\n__See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation."},"layer":{"description":"Layer or single view specifications to be layered.\\n\\n__Note__: Specifications inside `layer` cannot use `row` and `column` channels as layering facet specifications is not allowed. Instead, use the [facet operator](https://vega.github.io/vega-lite/docs/facet.html) and place a layer inside a facet.","items":{"anyOf":[{"$ref":"#/definitions/LayerSpec"},{"$ref":"#/definitions/UnitSpec"}]},"type":"array"},"name":{"description":"Name of the visualization for later reference.","type":"string"},"padding":{"anyOf":[{"$ref":"#/definitions/Padding"},{"$ref":"#/definitions/ExprRef"}],"description":"The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}` to specify padding for each side of the visualization.\\n\\n__Default value__: `5`"},"params":{"description":"Dynamic variables or selections that parameterize a visualization.","items":{"anyOf":[{"$ref":"#/definitions/VariableParameter"},{"$ref":"#/definitions/TopLevelSelectionParameter"}]},"type":"array"},"projection":{"$ref":"#/definitions/Projection","description":"An object defining properties of the geographic projection shared by underlying layers."},"resolve":{"$ref":"#/definitions/Resolve","description":"Scale, axis, and legend resolutions for view composition specifications."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"},"usermeta":{"$ref":"#/definitions/Dict","description":"Optional metadata that will be passed to Vega. This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata."},"view":{"$ref":"#/definitions/ViewBackground","description":"An object defining the view background\'s fill and stroke.\\n\\n__Default value:__ none (transparent)"},"width":{"anyOf":[{"type":"number"},{"const":"container","type":"string"},{"$ref":"#/definitions/Step"}],"description":"The width of a visualization.\\n\\n- For a plot with a continuous x-field, width should be a number.\\n- For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)\\n- To enable responsive sizing on width, it should be set to `\\"container\\"`.\\n\\n__Default value:__ Based on `config.view.continuousWidth` for a plot with a continuous x-field and `config.view.discreteWidth` otherwise.\\n\\n__Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the `\\"container\\"` option cannot be used.\\n\\n__See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation."}},"required":["layer"],"type":"object"},"TopLevelRepeatSpec":{"anyOf":[{"additionalProperties":false,"properties":{"$schema":{"description":"URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v5.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.","format":"uri","type":"string"},"align":{"anyOf":[{"$ref":"#/definitions/LayoutAlign"},{"$ref":"#/definitions/RowCol<LayoutAlign>"}],"description":"The alignment to apply to grid rows and columns. The supported string values are `\\"all\\"`, `\\"each\\"`, and `\\"none\\"`.\\n\\n- For `\\"none\\"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\\n- For `\\"each\\"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\\n- For `\\"all\\"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\\n\\nAlternatively, an object value of the form `{\\"row\\": string, \\"column\\": string}` can be used to supply different alignments for rows and columns.\\n\\n__Default value:__ `\\"all\\"`."},"autosize":{"anyOf":[{"$ref":"#/definitions/AutosizeType"},{"$ref":"#/definitions/AutoSizeParams"}],"description":"How the visualization size should be determined. If a string, should be one of `\\"pad\\"`, `\\"fit\\"` or `\\"none\\"`. Object values can additionally specify parameters for content sizing and automatic resizing.\\n\\n__Default value__: `pad`"},"background":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/ExprRef"}],"description":"CSS color property to use as the background of the entire view.\\n\\n__Default value:__ `\\"white\\"`"},"bounds":{"description":"The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\\n\\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\\n\\n__Default value:__ `\\"full\\"`","enum":["full","flush"],"type":"string"},"center":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/RowCol<boolean>"}],"description":"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\\n\\nAn object value of the form `{\\"row\\": boolean, \\"column\\": boolean}` can be used to supply different centering values for rows and columns.\\n\\n__Default value:__ `false`"},"columns":{"description":"The number of columns to include in the view composition layout.\\n\\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\\n\\n__Note__:\\n\\n1) This property is only for:\\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\\n\\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).","type":"number"},"config":{"$ref":"#/definitions/Config","description":"Vega-Lite configuration object. This property can only be defined at the top-level of a specification."},"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"datasets":{"$ref":"#/definitions/Datasets","description":"A global data store for named datasets. This is a mapping from names to inline datasets. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"name":{"description":"Name of the visualization for later reference.","type":"string"},"padding":{"anyOf":[{"$ref":"#/definitions/Padding"},{"$ref":"#/definitions/ExprRef"}],"description":"The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}` to specify padding for each side of the visualization.\\n\\n__Default value__: `5`"},"params":{"description":"Dynamic variables or selections that parameterize a visualization.","items":{"anyOf":[{"$ref":"#/definitions/VariableParameter"},{"$ref":"#/definitions/TopLevelSelectionParameter"}]},"type":"array"},"repeat":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"$ref":"#/definitions/RepeatMapping"}],"description":"Definition for fields to be repeated. One of: 1) An array of fields to be repeated. If `\\"repeat\\"` is an array, the field can be referred to as `{\\"repeat\\": \\"repeat\\"}`. The repeated views are laid out in a wrapped row. You can set the number of columns to control the wrapping. 2) An object that maps `\\"row\\"` and/or `\\"column\\"` to the listed fields to be repeated along the particular orientations. The objects `{\\"repeat\\": \\"row\\"}` and `{\\"repeat\\": \\"column\\"}` can be used to refer to the repeated field respectively."},"resolve":{"$ref":"#/definitions/Resolve","description":"Scale, axis, and legend resolutions for view composition specifications."},"spacing":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/RowCol<number>"}],"description":"The spacing in pixels between sub-views of the composition operator. An object of the form `{\\"row\\": number, \\"column\\": number}` can be used to set different spacing values for rows and columns.\\n\\n__Default value__: Depends on `\\"spacing\\"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)"},"spec":{"$ref":"#/definitions/NonNormalizedSpec","description":"A specification of the view that gets repeated."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"},"usermeta":{"$ref":"#/definitions/Dict","description":"Optional metadata that will be passed to Vega. This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata."}},"required":["repeat","spec"],"type":"object"},{"additionalProperties":false,"properties":{"$schema":{"description":"URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v5.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.","format":"uri","type":"string"},"align":{"anyOf":[{"$ref":"#/definitions/LayoutAlign"},{"$ref":"#/definitions/RowCol<LayoutAlign>"}],"description":"The alignment to apply to grid rows and columns. The supported string values are `\\"all\\"`, `\\"each\\"`, and `\\"none\\"`.\\n\\n- For `\\"none\\"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\\n- For `\\"each\\"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\\n- For `\\"all\\"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\\n\\nAlternatively, an object value of the form `{\\"row\\": string, \\"column\\": string}` can be used to supply different alignments for rows and columns.\\n\\n__Default value:__ `\\"all\\"`."},"autosize":{"anyOf":[{"$ref":"#/definitions/AutosizeType"},{"$ref":"#/definitions/AutoSizeParams"}],"description":"How the visualization size should be determined. If a string, should be one of `\\"pad\\"`, `\\"fit\\"` or `\\"none\\"`. Object values can additionally specify parameters for content sizing and automatic resizing.\\n\\n__Default value__: `pad`"},"background":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/ExprRef"}],"description":"CSS color property to use as the background of the entire view.\\n\\n__Default value:__ `\\"white\\"`"},"bounds":{"description":"The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\\n\\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\\n\\n__Default value:__ `\\"full\\"`","enum":["full","flush"],"type":"string"},"center":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/RowCol<boolean>"}],"description":"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\\n\\nAn object value of the form `{\\"row\\": boolean, \\"column\\": boolean}` can be used to supply different centering values for rows and columns.\\n\\n__Default value:__ `false`"},"columns":{"description":"The number of columns to include in the view composition layout.\\n\\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\\n\\n__Note__:\\n\\n1) This property is only for:\\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\\n\\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).","type":"number"},"config":{"$ref":"#/definitions/Config","description":"Vega-Lite configuration object. This property can only be defined at the top-level of a specification."},"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"datasets":{"$ref":"#/definitions/Datasets","description":"A global data store for named datasets. This is a mapping from names to inline datasets. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"name":{"description":"Name of the visualization for later reference.","type":"string"},"padding":{"anyOf":[{"$ref":"#/definitions/Padding"},{"$ref":"#/definitions/ExprRef"}],"description":"The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}` to specify padding for each side of the visualization.\\n\\n__Default value__: `5`"},"params":{"description":"Dynamic variables or selections that parameterize a visualization.","items":{"anyOf":[{"$ref":"#/definitions/VariableParameter"},{"$ref":"#/definitions/TopLevelSelectionParameter"}]},"type":"array"},"repeat":{"$ref":"#/definitions/LayerRepeatMapping","description":"Definition for fields to be repeated. One of: 1) An array of fields to be repeated. If `\\"repeat\\"` is an array, the field can be referred to as `{\\"repeat\\": \\"repeat\\"}`. The repeated views are laid out in a wrapped row. You can set the number of columns to control the wrapping. 2) An object that maps `\\"row\\"` and/or `\\"column\\"` to the listed fields to be repeated along the particular orientations. The objects `{\\"repeat\\": \\"row\\"}` and `{\\"repeat\\": \\"column\\"}` can be used to refer to the repeated field respectively."},"resolve":{"$ref":"#/definitions/Resolve","description":"Scale, axis, and legend resolutions for view composition specifications."},"spacing":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/RowCol<number>"}],"description":"The spacing in pixels between sub-views of the composition operator. An object of the form `{\\"row\\": number, \\"column\\": number}` can be used to set different spacing values for rows and columns.\\n\\n__Default value__: Depends on `\\"spacing\\"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)"},"spec":{"anyOf":[{"$ref":"#/definitions/LayerSpec"},{"$ref":"#/definitions/UnitSpec"}],"description":"A specification of the view that gets repeated."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"},"usermeta":{"$ref":"#/definitions/Dict","description":"Optional metadata that will be passed to Vega. This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata."}},"required":["repeat","spec"],"type":"object"}]},"TopLevelFacetSpec":{"additionalProperties":false,"properties":{"$schema":{"description":"URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v5.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.","format":"uri","type":"string"},"align":{"anyOf":[{"$ref":"#/definitions/LayoutAlign"},{"$ref":"#/definitions/RowCol<LayoutAlign>"}],"description":"The alignment to apply to grid rows and columns. The supported string values are `\\"all\\"`, `\\"each\\"`, and `\\"none\\"`.\\n\\n- For `\\"none\\"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\\n- For `\\"each\\"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\\n- For `\\"all\\"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\\n\\nAlternatively, an object value of the form `{\\"row\\": string, \\"column\\": string}` can be used to supply different alignments for rows and columns.\\n\\n__Default value:__ `\\"all\\"`."},"autosize":{"anyOf":[{"$ref":"#/definitions/AutosizeType"},{"$ref":"#/definitions/AutoSizeParams"}],"description":"How the visualization size should be determined. If a string, should be one of `\\"pad\\"`, `\\"fit\\"` or `\\"none\\"`. Object values can additionally specify parameters for content sizing and automatic resizing.\\n\\n__Default value__: `pad`"},"background":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/ExprRef"}],"description":"CSS color property to use as the background of the entire view.\\n\\n__Default value:__ `\\"white\\"`"},"bounds":{"description":"The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\\n\\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\\n\\n__Default value:__ `\\"full\\"`","enum":["full","flush"],"type":"string"},"center":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/RowCol<boolean>"}],"description":"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\\n\\nAn object value of the form `{\\"row\\": boolean, \\"column\\": boolean}` can be used to supply different centering values for rows and columns.\\n\\n__Default value:__ `false`"},"columns":{"description":"The number of columns to include in the view composition layout.\\n\\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\\n\\n__Note__:\\n\\n1) This property is only for:\\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\\n\\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).","type":"number"},"config":{"$ref":"#/definitions/Config","description":"Vega-Lite configuration object. This property can only be defined at the top-level of a specification."},"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"datasets":{"$ref":"#/definitions/Datasets","description":"A global data store for named datasets. This is a mapping from names to inline datasets. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"facet":{"anyOf":[{"$ref":"#/definitions/FacetFieldDef"},{"$ref":"#/definitions/FacetMapping"}],"description":"Definition for how to facet the data. One of: 1) [a field definition for faceting the plot by one field](https://vega.github.io/vega-lite/docs/facet.html#field-def) 2) [An object that maps `row` and `column` channels to their field definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)"},"name":{"description":"Name of the visualization for later reference.","type":"string"},"padding":{"anyOf":[{"$ref":"#/definitions/Padding"},{"$ref":"#/definitions/ExprRef"}],"description":"The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}` to specify padding for each side of the visualization.\\n\\n__Default value__: `5`"},"params":{"description":"Dynamic variables or selections that parameterize a visualization.","items":{"anyOf":[{"$ref":"#/definitions/VariableParameter"},{"$ref":"#/definitions/TopLevelSelectionParameter"}]},"type":"array"},"resolve":{"$ref":"#/definitions/Resolve","description":"Scale, axis, and legend resolutions for view composition specifications."},"spacing":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/RowCol<number>"}],"description":"The spacing in pixels between sub-views of the composition operator. An object of the form `{\\"row\\": number, \\"column\\": number}` can be used to set different spacing values for rows and columns.\\n\\n__Default value__: Depends on `\\"spacing\\"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)"},"spec":{"anyOf":[{"$ref":"#/definitions/LayerSpec"},{"$ref":"#/definitions/UnitSpecWithFrame"}],"description":"A specification of the view that gets faceted."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"},"usermeta":{"$ref":"#/definitions/Dict","description":"Optional metadata that will be passed to Vega. This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata."}},"required":["data","facet","spec"],"type":"object"},"TopLevelSelectionParameter":{"additionalProperties":false,"properties":{"bind":{"anyOf":[{"$ref":"#/definitions/Binding"},{"additionalProperties":{"$ref":"#/definitions/Binding"},"type":"object"},{"$ref":"#/definitions/LegendBinding"},{"const":"scales","type":"string"}],"description":"When set, a selection is populated by input elements (also known as dynamic query widgets) or by interacting with the corresponding legend. Direct manipulation interaction is disabled by default; to re-enable it, set the selection\'s [`on`](https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties) property.\\n\\nLegend bindings are restricted to selections that only specify a single field or encoding.\\n\\nQuery widget binding takes the form of Vega\'s [input element binding definition](https://vega.github.io/vega/docs/signals/#bind) or can be a mapping between projected field/encodings and binding definitions.\\n\\n__See also:__ [`bind`](https://vega.github.io/vega-lite/docs/bind.html) documentation."},"name":{"$ref":"#/definitions/ParameterName","description":"Required. A unique name for the selection parameter. Selection names should be valid JavaScript identifiers: they should contain only alphanumeric characters (or \\"$\\", or \\"_\\") and may not start with a digit. Reserved keywords that may not be used as parameter names are \\"datum\\", \\"event\\", \\"item\\", and \\"parent\\"."},"select":{"anyOf":[{"$ref":"#/definitions/SelectionType"},{"$ref":"#/definitions/PointSelectionConfig"},{"$ref":"#/definitions/IntervalSelectionConfig"}],"description":"Determines the default event processing and data query for the selection. Vega-Lite currently supports two selection types:\\n\\n- `\\"point\\"` -- to select multiple discrete data values; the first value is selected on `click` and additional values toggled on shift-click.\\n- `\\"interval\\"` -- to select a continuous range of data values on `drag`."},"value":{"anyOf":[{"$ref":"#/definitions/SelectionInit"},{"items":{"$ref":"#/definitions/SelectionInitMapping"},"type":"array"},{"$ref":"#/definitions/SelectionInitIntervalMapping"}],"description":"Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/selection.html#project) and initial values.\\n\\n__See also:__ [`init`](https://vega.github.io/vega-lite/docs/value.html) documentation."},"views":{"description":"By default, top-level selections are applied to every view in the visualization. If this property is specified, selections will only be applied to views with the given names.","items":{"anyOf":[{"type":"string"},{"items":{"type":"string"},"type":"array"}]},"type":"array"}},"required":["name","select"],"type":"object"},"TopLevelSpec":{"anyOf":[{"$ref":"#/definitions/TopLevelUnitSpec"},{"$ref":"#/definitions/TopLevelFacetSpec"},{"$ref":"#/definitions/TopLevelLayerSpec"},{"$ref":"#/definitions/TopLevelRepeatSpec"},{"$ref":"#/definitions/TopLevelConcatSpec"},{"$ref":"#/definitions/TopLevelVConcatSpec"},{"$ref":"#/definitions/TopLevelHConcatSpec"}],"description":"A Vega-Lite top-level specification. This is the root class for all Vega-Lite specifications. (The json schema is generated from this type.)"},"TopLevelUnitSpec":{"additionalProperties":false,"properties":{"$schema":{"description":"URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v5.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.","format":"uri","type":"string"},"align":{"anyOf":[{"$ref":"#/definitions/LayoutAlign"},{"$ref":"#/definitions/RowCol<LayoutAlign>"}],"description":"The alignment to apply to grid rows and columns. The supported string values are `\\"all\\"`, `\\"each\\"`, and `\\"none\\"`.\\n\\n- For `\\"none\\"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\\n- For `\\"each\\"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\\n- For `\\"all\\"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\\n\\nAlternatively, an object value of the form `{\\"row\\": string, \\"column\\": string}` can be used to supply different alignments for rows and columns.\\n\\n__Default value:__ `\\"all\\"`."},"autosize":{"anyOf":[{"$ref":"#/definitions/AutosizeType"},{"$ref":"#/definitions/AutoSizeParams"}],"description":"How the visualization size should be determined. If a string, should be one of `\\"pad\\"`, `\\"fit\\"` or `\\"none\\"`. Object values can additionally specify parameters for content sizing and automatic resizing.\\n\\n__Default value__: `pad`"},"background":{"anyOf":[{"$ref":"#/definitions/Color"},{"$ref":"#/definitions/ExprRef"}],"description":"CSS color property to use as the background of the entire view.\\n\\n__Default value:__ `\\"white\\"`"},"bounds":{"description":"The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\\n\\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\\n\\n__Default value:__ `\\"full\\"`","enum":["full","flush"],"type":"string"},"center":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/RowCol<boolean>"}],"description":"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\\n\\nAn object value of the form `{\\"row\\": boolean, \\"column\\": boolean}` can be used to supply different centering values for rows and columns.\\n\\n__Default value:__ `false`"},"config":{"$ref":"#/definitions/Config","description":"Vega-Lite configuration object. This property can only be defined at the top-level of a specification."},"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"datasets":{"$ref":"#/definitions/Datasets","description":"A global data store for named datasets. This is a mapping from names to inline datasets. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"encoding":{"$ref":"#/definitions/FacetedEncoding","description":"A key-value mapping between encoding channels and definition of fields."},"height":{"anyOf":[{"type":"number"},{"const":"container","type":"string"},{"$ref":"#/definitions/Step"}],"description":"The height of a visualization.\\n\\n- For a plot with a continuous y-field, height should be a number.\\n- For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)\\n- To enable responsive sizing on height, it should be set to `\\"container\\"`.\\n\\n__Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous y-field and `config.view.discreteHeight` otherwise.\\n\\n__Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the `\\"container\\"` option cannot be used.\\n\\n__See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation."},"mark":{"$ref":"#/definitions/AnyMark","description":"A string describing the mark type (one of `\\"bar\\"`, `\\"circle\\"`, `\\"square\\"`, `\\"tick\\"`, `\\"line\\"`, `\\"area\\"`, `\\"point\\"`, `\\"rule\\"`, `\\"geoshape\\"`, and `\\"text\\"`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def)."},"name":{"description":"Name of the visualization for later reference.","type":"string"},"padding":{"anyOf":[{"$ref":"#/definitions/Padding"},{"$ref":"#/definitions/ExprRef"}],"description":"The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{\\"left\\": 5, \\"top\\": 5, \\"right\\": 5, \\"bottom\\": 5}` to specify padding for each side of the visualization.\\n\\n__Default value__: `5`"},"params":{"description":"An array of parameters that may either be simple variables, or more complex selections that map user input to data queries.","items":{"anyOf":[{"$ref":"#/definitions/VariableParameter"},{"$ref":"#/definitions/SelectionParameter"}]},"type":"array"},"projection":{"$ref":"#/definitions/Projection","description":"An object defining properties of geographic projection, which will be applied to `shape` path for `\\"geoshape\\"` marks and to `latitude` and `\\"longitude\\"` channels for other marks."},"resolve":{"$ref":"#/definitions/Resolve","description":"Scale, axis, and legend resolutions for view composition specifications."},"spacing":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/RowCol<number>"}],"description":"The spacing in pixels between sub-views of the composition operator. An object of the form `{\\"row\\": number, \\"column\\": number}` can be used to set different spacing values for rows and columns.\\n\\n__Default value__: Depends on `\\"spacing\\"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)"},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"},"usermeta":{"$ref":"#/definitions/Dict","description":"Optional metadata that will be passed to Vega. This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata."},"view":{"$ref":"#/definitions/ViewBackground","description":"An object defining the view background\'s fill and stroke.\\n\\n__Default value:__ none (transparent)"},"width":{"anyOf":[{"type":"number"},{"const":"container","type":"string"},{"$ref":"#/definitions/Step"}],"description":"The width of a visualization.\\n\\n- For a plot with a continuous x-field, width should be a number.\\n- For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)\\n- To enable responsive sizing on width, it should be set to `\\"container\\"`.\\n\\n__Default value:__ Based on `config.view.continuousWidth` for a plot with a continuous x-field and `config.view.discreteWidth` otherwise.\\n\\n__Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the `\\"container\\"` option cannot be used.\\n\\n__See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation."}},"required":["data","mark"],"type":"object"},"TopoDataFormat":{"additionalProperties":false,"properties":{"feature":{"description":"The name of the TopoJSON object set to convert to a GeoJSON feature collection. For example, in a map of the world, there may be an object set named `\\"countries\\"`. Using the feature property, we can extract this set and generate a GeoJSON feature object for each country.","type":"string"},"mesh":{"description":"The name of the TopoJSON object set to convert to mesh. Similar to the `feature` option, `mesh` extracts a named TopoJSON object set.  Unlike the `feature` option, the corresponding geo data is returned as a single, unified mesh instance, not as individual GeoJSON features. Extracting a mesh is useful for more efficiently drawing borders or other geographic elements that you do not need to associate with specific regions such as individual countries, states or counties.","type":"string"},"parse":{"anyOf":[{"$ref":"#/definitions/Parse"},{"type":"null"}],"description":"If set to `null`, disable type inference based on the spec and only use type inference based on the data. Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `\\"number\\"`, `\\"boolean\\"`, `\\"date\\"`, or null (do not parse the field)). For example, `\\"parse\\": {\\"modified_on\\": \\"date\\"}` parses the `modified_on` field in each input record a Date value.\\n\\nFor `\\"date\\"`, we parse data based using JavaScript\'s [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse). For Specific date formats can be provided (e.g., `{foo: \\"date:\'%m%d%Y\'\\"}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: \\"utc:\'%m%d%Y\'\\"}`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)"},"type":{"const":"topojson","description":"Type of input data: `\\"json\\"`, `\\"csv\\"`, `\\"tsv\\"`, `\\"dsv\\"`.\\n\\n__Default value:__  The default format type is determined by the extension of the file URL. If no extension is detected, `\\"json\\"` will be used by default.","type":"string"}},"type":"object"},"Transform":{"anyOf":[{"$ref":"#/definitions/AggregateTransform"},{"$ref":"#/definitions/BinTransform"},{"$ref":"#/definitions/CalculateTransform"},{"$ref":"#/definitions/DensityTransform"},{"$ref":"#/definitions/FilterTransform"},{"$ref":"#/definitions/FlattenTransform"},{"$ref":"#/definitions/FoldTransform"},{"$ref":"#/definitions/ImputeTransform"},{"$ref":"#/definitions/JoinAggregateTransform"},{"$ref":"#/definitions/LoessTransform"},{"$ref":"#/definitions/LookupTransform"},{"$ref":"#/definitions/QuantileTransform"},{"$ref":"#/definitions/RegressionTransform"},{"$ref":"#/definitions/TimeUnitTransform"},{"$ref":"#/definitions/SampleTransform"},{"$ref":"#/definitions/StackTransform"},{"$ref":"#/definitions/WindowTransform"},{"$ref":"#/definitions/PivotTransform"}]},"Type":{"description":"Data type based on level of measurement","enum":["quantitative","ordinal","temporal","nominal","geojson"],"type":"string"},"TypeForShape":{"enum":["nominal","ordinal","geojson"],"type":"string"},"TypedFieldDef":{"additionalProperties":false,"description":"Definition object for a data field, its type and transformation of an encoding channel.","properties":{"aggregate":{"$ref":"#/definitions/Aggregate","description":"Aggregation function for the field (e.g., `\\"mean\\"`, `\\"sum\\"`, `\\"median\\"`, `\\"min\\"`, `\\"max\\"`, `\\"count\\"`).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation."},"bandPosition":{"description":"Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.","maximum":1,"minimum":0,"type":"number"},"bin":{"anyOf":[{"type":"boolean"},{"$ref":"#/definitions/BinParams"},{"const":"binned","type":"string"},{"type":"null"}],"description":"A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\\"binned\\"`).\\n\\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\\n\\n- If `\\"binned\\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\\n\\n__Default value:__ `false`\\n\\n__See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation."},"field":{"$ref":"#/definitions/Field","description":"__Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\\n\\n__See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\\n\\n__Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\\"field\\": \\"foo.bar\\"` and `\\"field\\": \\"foo[\'bar\']\\"`). If field names contain dots or brackets but are not nested, you can use `\\\\\\\\` to escape dots and brackets (e.g., `\\"a\\\\\\\\.b\\"` and `\\"a\\\\\\\\[0\\\\\\\\]\\"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`."},"timeUnit":{"anyOf":[{"$ref":"#/definitions/TimeUnit"},{"$ref":"#/definitions/TimeUnitParams"}],"description":"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\\n\\n__Default value:__ `undefined` (None)\\n\\n__See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"type":"null"}],"description":"A title for the field. If `null`, the title will be removed.\\n\\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `\\"Sum of Profit\\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\\"Profit (binned)\\"`, `\\"Transaction Date (year-month)\\"`). Otherwise, the title is simply the field name.\\n\\n__Notes__:\\n\\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/usage/compile.html#field-title).\\n\\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used."},"type":{"$ref":"#/definitions/StandardType","description":"The type of measurement (`\\"quantitative\\"`, `\\"temporal\\"`, `\\"ordinal\\"`, or `\\"nominal\\"`) for the encoded field or constant value (`datum`). It can also be a `\\"geojson\\"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\\n\\nVega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\\n\\n__Default value:__\\n\\n1) For a data `field`, `\\"nominal\\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\\n- `\\"quantitative\\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\\"argmin\\"` and `\\"argmax\\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\\n- `\\"temporal\\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\\n- `ordinal\\"\\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\\n\\n2) For a constant value in data domain (`datum`):\\n- `\\"quantitative\\"` if the datum is a number\\n- `\\"nominal\\"` if the datum is a string\\n- `\\"temporal\\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\\n\\n__Note:__\\n- Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\\n- Data values for a temporal field can be either a date-time string (e.g., `\\"2015-03-07 12:32:17\\"`, `\\"17:01\\"`, `\\"2015-03-16\\"`. `\\"2015\\"`) or a timestamp number (e.g., `1552199579097`).\\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\\"quantitative\\"` (for using a linear bin scale) or [`\\"ordinal\\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\\"temporal\\"` (default, for using a temporal scale) or [`\\"ordinal\\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\\"cat\\"` using `{\\"aggregate\\": \\"distinct\\", \\"field\\": \\"cat\\"}`. The `\\"type\\"` of the aggregate output is `\\"quantitative\\"`.\\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\\n\\n__See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation."}},"type":"object"},"URI":{"format":"uri-reference","type":"string"},"UnitSpec":{"$ref":"#/definitions/GenericUnitSpec<Encoding,AnyMark>","description":"A unit specification, which can contain either [primitive marks or composite marks](https://vega.github.io/vega-lite/docs/mark.html#types)."},"UnitSpecWithFrame":{"additionalProperties":false,"properties":{"data":{"anyOf":[{"$ref":"#/definitions/Data"},{"type":"null"}],"description":"An object describing the data source. Set to `null` to ignore the parent\'s data source. If no data is set, it is derived from the parent."},"description":{"description":"Description of this mark for commenting purpose.","type":"string"},"encoding":{"$ref":"#/definitions/Encoding","description":"A key-value mapping between encoding channels and definition of fields."},"height":{"anyOf":[{"type":"number"},{"const":"container","type":"string"},{"$ref":"#/definitions/Step"}],"description":"The height of a visualization.\\n\\n- For a plot with a continuous y-field, height should be a number.\\n- For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)\\n- To enable responsive sizing on height, it should be set to `\\"container\\"`.\\n\\n__Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous y-field and `config.view.discreteHeight` otherwise.\\n\\n__Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the `\\"container\\"` option cannot be used.\\n\\n__See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation."},"mark":{"$ref":"#/definitions/AnyMark","description":"A string describing the mark type (one of `\\"bar\\"`, `\\"circle\\"`, `\\"square\\"`, `\\"tick\\"`, `\\"line\\"`, `\\"area\\"`, `\\"point\\"`, `\\"rule\\"`, `\\"geoshape\\"`, and `\\"text\\"`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def)."},"name":{"description":"Name of the visualization for later reference.","type":"string"},"params":{"description":"An array of parameters that may either be simple variables, or more complex selections that map user input to data queries.","items":{"anyOf":[{"$ref":"#/definitions/VariableParameter"},{"$ref":"#/definitions/SelectionParameter"}]},"type":"array"},"projection":{"$ref":"#/definitions/Projection","description":"An object defining properties of geographic projection, which will be applied to `shape` path for `\\"geoshape\\"` marks and to `latitude` and `\\"longitude\\"` channels for other marks."},"title":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/TitleParams"}],"description":"Title for the plot."},"transform":{"description":"An array of data transformations such as filter and new field calculation.","items":{"$ref":"#/definitions/Transform"},"type":"array"},"view":{"$ref":"#/definitions/ViewBackground","description":"An object defining the view background\'s fill and stroke.\\n\\n__Default value:__ none (transparent)"},"width":{"anyOf":[{"type":"number"},{"const":"container","type":"string"},{"$ref":"#/definitions/Step"}],"description":"The width of a visualization.\\n\\n- For a plot with a continuous x-field, width should be a number.\\n- For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)\\n- To enable responsive sizing on width, it should be set to `\\"container\\"`.\\n\\n__Default value:__ Based on `config.view.continuousWidth` for a plot with a continuous x-field and `config.view.discreteWidth` otherwise.\\n\\n__Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the `\\"container\\"` option cannot be used.\\n\\n__See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation."}},"required":["mark"],"type":"object"},"UrlData":{"additionalProperties":false,"properties":{"format":{"$ref":"#/definitions/DataFormat","description":"An object that specifies the format for parsing the data."},"name":{"description":"Provide a placeholder name and bind data at runtime.","type":"string"},"url":{"description":"An URL from which to load the data set. Use the `format.type` property to ensure the loaded data is correctly parsed.","type":"string"}},"required":["url"],"type":"object"},"UtcMultiTimeUnit":{"enum":["utcyearquarter","utcyearquartermonth","utcyearmonth","utcyearmonthdate","utcyearmonthdatehours","utcyearmonthdatehoursminutes","utcyearmonthdatehoursminutesseconds","utcyearweek","utcyearweekday","utcyearweekdayhours","utcyearweekdayhoursminutes","utcyearweekdayhoursminutesseconds","utcyeardayofyear","utcquartermonth","utcmonthdate","utcmonthdatehours","utcmonthdatehoursminutes","utcmonthdatehoursminutesseconds","utcweekday","utcweeksdayhours","utcweekdayhoursminutes","utcweekdayhoursminutesseconds","utcdayhours","utcdayhoursminutes","utcdayhoursminutesseconds","utchoursminutes","utchoursminutesseconds","utcminutesseconds","utcsecondsmilliseconds"],"type":"string"},"UtcSingleTimeUnit":{"enum":["utcyear","utcquarter","utcmonth","utcweek","utcday","utcdayofyear","utcdate","utchours","utcminutes","utcseconds","utcmilliseconds"],"type":"string"},"ValueDef<(number|\\"width\\"|\\"height\\"|ExprRef)>":{"additionalProperties":false,"description":"Definition object for a constant value (primitive value or gradient definition) of an encoding channel.","properties":{"value":{"anyOf":[{"type":"number"},{"const":"width","type":"string"},{"const":"height","type":"string"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"required":["value"],"type":"object"},"ValueDef<number>":{"additionalProperties":false,"description":"Definition object for a constant value (primitive value or gradient definition) of an encoding channel.","properties":{"value":{"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).","type":"number"}},"required":["value"],"type":"object"},"ValueDefWithCondition<MarkPropFieldOrDatumDef,(Gradient|string|null)>":{"additionalProperties":false,"minProperties":1,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(Gradient|string|null|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."},"value":{"anyOf":[{"$ref":"#/definitions/Gradient"},{"type":"string"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"ValueDefWithCondition<MarkPropFieldOrDatumDef,(string|null)>":{"additionalProperties":false,"minProperties":1,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."},"value":{"anyOf":[{"type":"string"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"ValueDefWithCondition<MarkPropFieldOrDatumDef,number>":{"additionalProperties":false,"minProperties":1,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."},"value":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"ValueDefWithCondition<MarkPropFieldOrDatumDef,number[]>":{"additionalProperties":false,"minProperties":1,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef"},{"$ref":"#/definitions/ConditionalValueDef<(number[]|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(number[]|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."},"value":{"anyOf":[{"items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"ValueDefWithCondition<MarkPropFieldOrDatumDef<TypeForShape>,(string|null)>":{"additionalProperties":false,"minProperties":1,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalMarkPropFieldOrDatumDef<TypeForShape>"},{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(string|null|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."},"value":{"anyOf":[{"type":"string"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"ValueDefWithCondition<StringFieldDef,Text>":{"additionalProperties":false,"minProperties":1,"properties":{"condition":{"anyOf":[{"$ref":"#/definitions/ConditionalStringFieldDef"},{"$ref":"#/definitions/ConditionalValueDef<(Text|ExprRef)>"},{"items":{"$ref":"#/definitions/ConditionalValueDef<(Text|ExprRef)>"},"type":"array"}],"description":"A field definition or one or more value definition(s) with a parameter predicate."},"value":{"anyOf":[{"$ref":"#/definitions/Text"},{"$ref":"#/definitions/ExprRef"}],"description":"A constant value in visual domain (e.g., `\\"red\\"` / `\\"#0099ff\\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity)."}},"type":"object"},"VariableParameter":{"additionalProperties":false,"properties":{"bind":{"$ref":"#/definitions/Binding","description":"Binds the parameter to an external input element such as a slider, selection list or radio button group."},"expr":{"$ref":"#/definitions/Expr","description":"An expression for the value of the parameter. This expression may include other parameters, in which case the parameter will automatically update in response to upstream parameter changes."},"name":{"$ref":"#/definitions/ParameterName","description":"A unique name for the variable parameter. Parameter names should be valid JavaScript identifiers: they should contain only alphanumeric characters (or \\"$\\", or \\"_\\") and may not start with a digit. Reserved keywords that may not be used as parameter names are \\"datum\\", \\"event\\", \\"item\\", and \\"parent\\"."},"value":{"description":"The [initial value](http://vega.github.io/vega-lite/docs/value.html) of the parameter.\\n\\n__Default value:__ `undefined`"}},"required":["name"],"type":"object"},"Vector10<string>":{"items":{"type":"string"},"maxItems":10,"minItems":10,"type":"array"},"Vector12<string>":{"items":{"type":"string"},"maxItems":12,"minItems":12,"type":"array"},"Vector2<DateTime>":{"items":{"$ref":"#/definitions/DateTime"},"maxItems":2,"minItems":2,"type":"array"},"Vector2<Vector2<number>>":{"items":{"$ref":"#/definitions/Vector2<number>"},"maxItems":2,"minItems":2,"type":"array"},"Vector2<boolean>":{"items":{"type":"boolean"},"maxItems":2,"minItems":2,"type":"array"},"Vector2<number>":{"items":{"type":"number"},"maxItems":2,"minItems":2,"type":"array"},"Vector2<string>":{"items":{"type":"string"},"maxItems":2,"minItems":2,"type":"array"},"Vector3<number>":{"items":{"type":"number"},"maxItems":3,"minItems":3,"type":"array"},"Vector7<string>":{"items":{"type":"string"},"maxItems":7,"minItems":7,"type":"array"},"ViewBackground":{"additionalProperties":false,"properties":{"cornerRadius":{"anyOf":[{"description":"The radius in pixels of rounded rectangles or arcs\' corners.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cursor":{"$ref":"#/definitions/Cursor","description":"The mouse cursor used over the view. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},"fill":{"anyOf":[{"$ref":"#/definitions/Color"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"The fill color.\\n\\n__Default value:__ `undefined`"},"fillOpacity":{"anyOf":[{"description":"The fill opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"opacity":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The overall opacity (value between [0,1]).\\n\\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.","maximum":1,"minimum":0},"stroke":{"anyOf":[{"$ref":"#/definitions/Color"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"The stroke color.\\n\\n__Default value:__ `\\"#ddd\\"`"},"strokeCap":{"anyOf":[{"$ref":"#/definitions/StrokeCap","description":"The stroke cap for line ending style. One of `\\"butt\\"`, `\\"round\\"`, or `\\"square\\"`.\\n\\n__Default value:__ `\\"butt\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeDash":{"anyOf":[{"description":"An array of alternating stroke, space lengths for creating dashed or dotted lines.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"strokeDashOffset":{"anyOf":[{"description":"The offset (in pixels) into which to begin drawing with the stroke dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeJoin":{"anyOf":[{"$ref":"#/definitions/StrokeJoin","description":"The stroke line join method. One of `\\"miter\\"`, `\\"round\\"` or `\\"bevel\\"`.\\n\\n__Default value:__ `\\"miter\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeMiterLimit":{"anyOf":[{"description":"The miter limit at which to bevel a line join.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOpacity":{"anyOf":[{"description":"The stroke opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeWidth":{"anyOf":[{"description":"The stroke width, in pixels.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"style":{"anyOf":[{"type":"string"},{"items":{"type":"string"},"type":"array"}],"description":"A string or array of strings indicating the name of custom styles to apply to the view background. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles.\\n\\n__Default value:__ `\\"cell\\"` __Note:__ Any specified view background properties will augment the default style."}},"type":"object"},"ViewConfig":{"additionalProperties":false,"properties":{"clip":{"description":"Whether the view should be clipped.","type":"boolean"},"continuousHeight":{"description":"The default height when the plot has a continuous y-field for x or latitude, or has arc marks.\\n\\n__Default value:__ `200`","type":"number"},"continuousWidth":{"description":"The default width when the plot has a continuous field for x or longitude, or has arc marks.\\n\\n__Default value:__ `200`","type":"number"},"cornerRadius":{"anyOf":[{"description":"The radius in pixels of rounded rectangles or arcs\' corners.\\n\\n__Default value:__ `0`","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"cursor":{"$ref":"#/definitions/Cursor","description":"The mouse cursor used over the view. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},"discreteHeight":{"anyOf":[{"type":"number"},{"additionalProperties":false,"properties":{"step":{"type":"number"}},"required":["step"],"type":"object"}],"description":"The default height when the plot has non arc marks and either a discrete y-field or no y-field. The height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step.\\n\\n__Default value:__ a step size based on `config.view.step`."},"discreteWidth":{"anyOf":[{"type":"number"},{"additionalProperties":false,"properties":{"step":{"type":"number"}},"required":["step"],"type":"object"}],"description":"The default width when the plot has non-arc marks and either a discrete x-field or no x-field. The width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step.\\n\\n__Default value:__ a step size based on `config.view.step`."},"fill":{"anyOf":[{"$ref":"#/definitions/Color"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"The fill color.\\n\\n__Default value:__ `undefined`"},"fillOpacity":{"anyOf":[{"description":"The fill opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"opacity":{"anyOf":[{"type":"number"},{"$ref":"#/definitions/ExprRef"}],"description":"The overall opacity (value between [0,1]).\\n\\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.","maximum":1,"minimum":0},"step":{"description":"Default step size for x-/y- discrete fields.","type":"number"},"stroke":{"anyOf":[{"$ref":"#/definitions/Color"},{"type":"null"},{"$ref":"#/definitions/ExprRef"}],"description":"The stroke color.\\n\\n__Default value:__ `\\"#ddd\\"`"},"strokeCap":{"anyOf":[{"$ref":"#/definitions/StrokeCap","description":"The stroke cap for line ending style. One of `\\"butt\\"`, `\\"round\\"`, or `\\"square\\"`.\\n\\n__Default value:__ `\\"butt\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeDash":{"anyOf":[{"description":"An array of alternating stroke, space lengths for creating dashed or dotted lines.","items":{"type":"number"},"type":"array"},{"$ref":"#/definitions/ExprRef"}]},"strokeDashOffset":{"anyOf":[{"description":"The offset (in pixels) into which to begin drawing with the stroke dash array.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeJoin":{"anyOf":[{"$ref":"#/definitions/StrokeJoin","description":"The stroke line join method. One of `\\"miter\\"`, `\\"round\\"` or `\\"bevel\\"`.\\n\\n__Default value:__ `\\"miter\\"`"},{"$ref":"#/definitions/ExprRef"}]},"strokeMiterLimit":{"anyOf":[{"description":"The miter limit at which to bevel a line join.","type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeOpacity":{"anyOf":[{"description":"The stroke opacity (value between [0,1]).\\n\\n__Default value:__ `1`","maximum":1,"minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]},"strokeWidth":{"anyOf":[{"description":"The stroke width, in pixels.","minimum":0,"type":"number"},{"$ref":"#/definitions/ExprRef"}]}},"type":"object"},"WindowEventType":{"anyOf":[{"$ref":"#/definitions/EventType"},{"type":"string"}]},"WindowFieldDef":{"additionalProperties":false,"properties":{"as":{"$ref":"#/definitions/FieldName","description":"The output name for the window operation."},"field":{"$ref":"#/definitions/FieldName","description":"The data field for which to compute the aggregate or window function. This can be omitted for window functions that do not operate over a field such as `\\"count\\"`, `\\"rank\\"`, `\\"dense_rank\\"`."},"op":{"anyOf":[{"$ref":"#/definitions/AggregateOp"},{"$ref":"#/definitions/WindowOnlyOp"}],"description":"The window or aggregation operation to apply within a window (e.g., `\\"rank\\"`, `\\"lead\\"`, `\\"sum\\"`, `\\"average\\"` or `\\"count\\"`). See the list of all supported operations [here](https://vega.github.io/vega-lite/docs/window.html#ops)."},"param":{"description":"Parameter values for the window functions. Parameter values can be omitted for operations that do not accept a parameter.\\n\\nSee the list of all supported operations and their parameters [here](https://vega.github.io/vega-lite/docs/transforms/window.html).","type":"number"}},"required":["op","as"],"type":"object"},"WindowOnlyOp":{"enum":["row_number","rank","dense_rank","percent_rank","cume_dist","ntile","lag","lead","first_value","last_value","nth_value"],"type":"string"},"WindowTransform":{"additionalProperties":false,"properties":{"frame":{"description":"A frame specification as a two-element array indicating how the sliding window should proceed. The array entries should either be a number indicating the offset from the current data object, or null to indicate unbounded rows preceding or following the current data object. The default value is `[null, 0]`, indicating that the sliding window includes the current object and all preceding objects. The value `[-5, 5]` indicates that the window should include five objects preceding and five objects following the current object. Finally, `[null, null]` indicates that the window frame should always include all data objects. If you this frame and want to assign the same value to add objects, you can use the simpler [join aggregate transform](https://vega.github.io/vega-lite/docs/joinaggregate.html). The only operators affected are the aggregation operations and the `first_value`, `last_value`, and `nth_value` window operations. The other window operations are not affected by this.\\n\\n__Default value:__:  `[null, 0]` (includes the current object and all preceding objects)","items":{"type":["null","number"]},"type":"array"},"groupby":{"description":"The data fields for partitioning the data objects into separate windows. If unspecified, all data points will be in a single window.","items":{"$ref":"#/definitions/FieldName"},"type":"array"},"ignorePeers":{"description":"Indicates if the sliding window frame should ignore peer values (data that are considered identical by the sort criteria). The default is false, causing the window frame to expand to include all peer values. If set to true, the window frame will be defined by offset values only. This setting only affects those operations that depend on the window frame, namely aggregation operations and the first_value, last_value, and nth_value window operations.\\n\\n__Default value:__ `false`","type":"boolean"},"sort":{"description":"A sort field definition for sorting data objects within a window. If two data objects are considered equal by the comparator, they are considered \\"peer\\" values of equal rank. If sort is not specified, the order is undefined: data objects are processed in the order they are observed and none are considered peers (the ignorePeers parameter is ignored and treated as if set to `true`).","items":{"$ref":"#/definitions/SortField"},"type":"array"},"window":{"description":"The definition of the fields in the window, and what calculations to use.","items":{"$ref":"#/definitions/WindowFieldDef"},"type":"array"}},"required":["window"],"type":"object"}}}')},10057:e=>{"use strict";e.exports=JSON.parse('{"Single-View Plots":{"Bar Charts":[{"name":"bar","title":"Simple Bar Chart","description":"A bar chart encodes quantitative values as the extent of rectangular bars.","style":"background-size: auto 105%; background-position: center center !important;"},{"name":"bar_size_responsive","title":"Responsive Bar Chart","description":"The bar gets automatically resized based on container size. To see how the bar gets automatically resized try this in [the editor](https://vega.github.io/editor/#/examples/vega-lite/bar_size_responsive)."},{"name":"bar_aggregate","title":"Aggregate Bar Chart"},{"name":"bar_aggregate_sort_by_encoding","title":"Aggregate Bar Chart (Sorted)"},{"name":"bar_grouped","title":"Grouped Bar Chart"},{"name":"stacked_bar_weather","title":"Stacked Bar Chart"},{"name":"stacked_bar_count_corner_radius_mark","title":"Stacked Bar Chart with Rounded Corners"},{"name":"stacked_bar_h","title":"Horizontal Stacked Bar Chart"},{"name":"stacked_bar_normalize","title":"Normalized (Percentage) Stacked Bar Chart"},{"name":"bar_gantt","title":"Gantt Chart (Ranged Bar Marks)","style":"background-size: auto 75%; background-position-y: center !important;"},{"name":"bar_color_disabled_scale","title":"A Bar Chart Encoding Color Names in the Data"},{"name":"bar_layered_transparent","title":"Layered Bar Chart"},{"name":"bar_diverging_stack_population_pyramid","title":"Diverging Stacked Bar Chart (Population Pyramid)"},{"name":"bar_diverging_stack_transform","title":"Diverging Stacked Bar Chart (with Neutral Parts)"},{"name":"layer_bar_labels","title":"Bar Chart with Labels","style":"background-size: auto 70%; background-position-y: center;"},{"name":"layer_bar_labels_grey","title":"Bar Chart with Label Overlays"},{"name":"bar_month_temporal_initial","title":"Bar Chart showing Initials of Month Names"},{"name":"bar_negative","title":"Bar Chart with Negative Values and a Zero-Baseline"},{"name":"bar_negative_horizontal_label","title":"Horizontal Bar Chart with Negative Values and Labels"},{"name":"bar_axis_space_saving","title":"Bar Chart with a Spacing-Saving Y-Axis"}],"Histograms, Density Plots, and Dot Plots":[{"name":"histogram","title":"Histogram","style":"background-size: auto 105%; background-position: center center !important;"},{"name":"bar_binned_data","title":"Histogram (from Binned Data)","style":"background-size: auto 105%; background-position: center center !important;"},{"name":"histogram_log","title":"Log-scaled Histogram"},{"name":"histogram_rel_freq","title":"Relative Frequency Histogram"},{"name":"area_density","title":"Density Plot"},{"name":"area_density_stacked","title":"Stacked Density Estimates"},{"name":"circle_binned","title":"2D Histogram Scatterplot"},{"name":"rect_binned_heatmap","title":"2D Histogram Heatmap"},{"name":"area_cumulative_freq","title":"Cumulative Frequency Distribution","style":"background-size: auto 105%; background-position: center center !important;","png":true},{"name":"layer_cumulative_histogram","title":"Layered Histogram and Cumulative Histogram","style":"background-size: auto 105%; background-position: center center !important;"},{"name":"circle_wilkinson_dotplot","title":"Wilkinson Dot Plot"},{"name":"isotype_bar_chart","title":"Isotype Dot Plot","description":"Inspired by this [Only An Ocean Between, 1943](http://www.thomwhite.co.uk/?p=1303). Population Live Stock, p.13. This example was created by [@jwoLondon](https://github.com/jwoLondon)."},{"name":"isotype_bar_chart_emoji","title":"Isotype Dot Plot with Emoji","description":"This example was inspired by [@jakevdp](https://github.com/jakevdp) and Isotype Bar Chart by [@jwoLondon](https://github.com/jwoLondon)."}],"Scatter & Strip Plots":[{"name":"point_2d","title":"Scatterplot","style":"background-size: auto 105%; background-position: center center !important;"},{"name":"tick_dot","title":"1D Strip Plot","style":"background-size: auto 50%; background-position-y: center !important;"},{"name":"tick_strip","title":"Strip Plot","style":"background-size: auto 85%; background-position-y: center !important;"},{"name":"point_color_with_shape","title":"Colored Scatterplot"},{"name":"circle_binned","title":"2D Histogram Scatterplot"},{"name":"point_bubble","title":"Bubble Plot"},{"name":"point_invalid_color","png":true,"title":"Scatterplot with Null Values in Grey"},{"name":"circle","title":"Scatterplot with Filled Circles","style":"background-size: auto 105%; background-position: center center !important;"},{"name":"circle_bubble_health_income","title":"Bubble Plot (Gapminder)"},{"name":"circle_natural_disasters","description":"Visualization of global deaths from natural disasters. Copy of chart from [Our World in Data](https://ourworldindata.org/natural-catastrophes).","title":"Bubble Plot (Natural Disasters)","png":true},{"name":"text_scatterplot_colored","title":"Scatter Plot with Text Marks"},{"name":"scatter_image","title":"Image-based Scatter Plot"},{"name":"circle_custom_tick_labels","description":"After using the numerical values to calculate the average rating, they are replaced by string labels.","title":"Strip plot with custom axis tick labels"}],"Line Charts":[{"name":"line","title":"Line Chart","style":"background-size: auto 105%; background-position: center center !important;"},{"name":"line_overlay","title":"Line Chart with Point Markers","style":"background-size: auto 105%; background-position: center center !important;","description":"By setting the `point` property of the line mark definition to an object defining a property of the overlaying point marks, we can overlay point markers on top of line. \\n\\n Notes&#58; (1) This is equivalent to adding another layer of point marks. \\n (2) While `\\"point\\"` marks are normally semi-transparent, the overlay point marker has `opacity` = 1 by default."},{"name":"line_overlay_stroked","title":"Line Chart with Stroked Point Markers","style":"background-size: auto 105%; background-position: center center !important;","description":"By setting the `point` property of the line mark definition to an object defining a property of the overlaying point marks, we can overlay point markers on top of line. Here we create stroked points by setting their `\\"filled\\"` to `false` and their `fill` to `\\"white\\"`. \\n\\n Notes&#58; (1) This is equivalent to adding another layer of point marks. \\n (2) While `\\"point\\"` marks are normally semi-transparent, the overlay point marker has `opacity` = 1 by default."},{"name":"line_color","title":"Multi Series Line Chart"},{"name":"repeat_layer","title":"Multi Series Line Chart with Repeat Operator"},{"name":"line_color_halo","title":"Multi Series Line Chart with Halo Stroke"},{"name":"line_slope","title":"Slope Graph","style":"background-size: auto 105%; background-position: center center !important;"},{"name":"line_step","title":"Step Chart","style":"background-size: auto 105%; background-position: center center !important;"},{"name":"line_monotone","title":"Line Chart with Monotone Interpolation","style":"background-size: auto 105%; background-position: center center !important;"},{"name":"line_conditional_axis","title":"Line Chart with Conditional Axis Properties","style":"background-size: auto 105%"},{"name":"connected_scatterplot","title":"Connected Scatterplot (Lines with Custom Paths)","description":"A connected scatterplot can be created by customizing line `order` and adding `point` overlay in the line mark definition.","style":"background-size: auto 105%; background-position: center center !important;"},{"name":"line_bump","title":"Bump Chart"},{"name":"trail_color","title":"Line Chart with Varying Size (using the trail mark)"},{"name":"trail_comet","title":"A comet chart showing changes between between two states"},{"name":"line_skip_invalid_mid_overlay","title":"Line Chart with Markers and Invalid Values","style":"background-size: auto 105%; background-position: center center !important;"},{"name":"layer_line_co2_concentration","title":"Carbon Dioxide in the Atmosphere","description":"This example was inspired by [Gregor Aisch](https://github.com/gka)\'s [Carbon Dioxide Concentration By Decade](https://www.datawrapper.de/_/OHgEm/)."},{"name":"window_rank","title":"Line Charts Showing Ranks Over Time"},{"name":"sequence_line_fold","title":"Drawing Sine and Cosine Curves with the Sequence Generator"},{"name":"line_strokedash","title":"Line chart with varying stroke dash"},{"name":"line_dashed_part","title":"Line chart with a dashed part"}],"Area Charts & Streamgraphs":[{"name":"area","title":"Area Chart"},{"name":"area_gradient","title":"Area Chart with Gradient"},{"name":"area_overlay","title":"Area Chart with Overlaying Lines and Point Markers"},{"name":"stacked_area","title":"Stacked Area Chart"},{"name":"stacked_area_normalize","title":"Normalized Stacked Area Chart"},{"name":"stacked_area_stream","title":"Streamgraph"},{"name":"area_horizon","title":"Horizon Graph","style":"background-size: auto 70%; background-position-y: center;"}],"Table-based Plots":[{"name":"rect_heatmap","title":"Table Heatmap","style":"background-size: auto"},{"name":"rect_heatmap_weather","title":"Annual Weather Heatmap"},{"name":"rect_binned_heatmap","title":"2D Histogram Heatmap"},{"name":"circle_github_punchcard","title":"Table Bubble Plot (Github Punch Card)"},{"name":"layer_text_heatmap","title":"Heatmap with Labels","style":"background-size: auto 55%; background-position-y: center !important;"},{"name":"rect_lasagna","title":"Lasagna Plot (Dense Time-Series Heatmap)"},{"name":"rect_mosaic_labelled_with_offset","title":"Mosaic Chart with Labels"},{"name":"point_angle_windvector","title":"Wind Vector Map"}],"Circular Plots":[{"name":"arc_pie","title":"Pie Chart","description":"A pie chart encodes proportional differences among a set of numeric values as the angular extent and area of a circular slice."},{"name":"arc_donut","title":"Donut Chart","description":"A donut chart encodes proportional differences among a set of numeric values using angular extents."},{"name":"layer_arc_label","title":"Pie Chart with Labels","description":"Layering text over arc marks to label pie charts. For now, [you need to add `stack: true`](https://github.com/vega/vega-lite/issues/5078) to theta to force the text to apply the same polar stacking layout."},{"name":"arc_radial","title":"Radial Plot","description":"This radial plot uses both angular and radial extent to convey multiple dimensions of data. However, this approach is not perceptually effective, as viewers will most likely be drawn to the total area of the shape, conflating the two dimensions. This example also demonstrates a way to add labels to circular plots."},{"name":"arc_pie_pyramid","title":"Pyramid Pie Chart"}],"Advanced Calculations":[{"name":"window_percent_of_total","title":"Calculate Percentage of Total"},{"name":"joinaggregate_mean_difference","title":"Calculate Difference from Average"},{"name":"joinaggregate_mean_difference_by_year","title":"Calculate Difference from Annual Average"},{"name":"joinaggregate_residual_graph","title":"Calculate Residuals","style":"background-size: auto 105%; background-position: center center !important;","png":true},{"name":"window_rank","title":"Line Charts Showing Ranks Over Time"},{"name":"waterfall_chart","title":"Waterfall Chart of Monthly Profit and Loss"},{"name":"window_top_k","title":"Filtering Top-K Items","description":"Here we use window transform to derive the total number of students along with the rank of the current student to determine the top K students and display their score.","style":"background-size: 110%"},{"name":"window_top_k_others","title":"Top-K Plot with \\"Others\\"","description":"By @manzt, adapted from https://observablehq.com/@manzt/top-k-plot-with-others-vega-lite-example.","style":"background-size: 110%"},{"name":"lookup","title":"Using the lookup transform to combine data","style":"background-size: 75%; background-position-x: center;"},{"name":"area_cumulative_freq","title":"Cumulative Frequency Distribution","style":"background-size: auto 105%; background-position: center center !important;","png":true},{"name":"layer_cumulative_histogram","title":"Layered Histogram and Cumulative Histogram","style":"background-size: auto 105%; background-position: center center !important;"},{"name":"parallel_coordinate","title":"Parallel Coordinate Plot","style":"background-size: auto 105%; background-position: center center !important;"},{"name":"bar_argmax","title":"Bar Chart Showing Argmax Value"},{"name":"layer_line_mean_point_raw","title":"Layering Averages over Raw Values"},{"name":"layer_line_rolling_mean_point_raw","title":"Layering Rolling Averages over Raw Values"},{"name":"layer_line_window","title":"Line Chart to Show Benchmarking Results"},{"name":"point_quantile_quantile","title":"Quantile-Quantile Plot (QQ Plot)"},{"name":"layer_point_line_regression","title":"Linear Regression"},{"name":"layer_point_line_loess","title":"Loess Regression"}]},"Composite Marks":{"Error Bars & Error Bands":[{"name":"layer_point_errorbar_ci","title":"Error Bars Showing Confidence Interval"},{"name":"layer_point_errorbar_stdev","title":"Error Bars Showing Standard Deviation"},{"name":"layer_line_errorband_ci","title":"Line Chart with Confidence Interval Band"},{"name":"layer_scatter_errorband_1D_stdev_global_mean","title":"Scatterplot with Mean and Standard Deviation Overlay"}],"Box Plots":[{"name":"boxplot_minmax_2D_vertical","title":"Box Plot with Min/Max Whiskers"},{"name":"boxplot_2D_vertical","title":"Tukey Box Plot (1.5 IQR)"},{"name":"boxplot_preaggregated","title":"Box Plot with Pre-Calculated Summaries"}]},"Layered Plots":{"Labeling & Annotation":[{"name":"layer_bar_labels","title":"Simple Bar Chart with Labels","style":"background-size: auto 70%; background-position-y: center;"},{"name":"layer_bar_fruit","title":"Simple Bar Chart with Labels and Emojis"},{"name":"layer_text_heatmap","title":"Layering text over heatmap","style":"background-size: auto 55%; background-position-y: center !important;"},{"name":"layer_line_co2_concentration","title":"Carbon Dioxide in the Atmosphere","description":"This example was inspired by [Gregor Aisch](https://github.com/gka)\'s [Carbon Dioxide Concentration By Decade](https://www.datawrapper.de/_/OHgEm/)."},{"name":"layer_bar_annotations","title":"Bar Chart Highlighting Values beyond a Threshold","description":"To create a bar chart that highlights values beyond a threshold, we use two `layer`s of `bar` marks. The lower layer shows all the bars while the upper layer shows bar with values above the threshold in red (`#e45755`).  We then `layer` a `rule` mark and a `text` mark over the bars to annotate the threshold value."},{"name":"layer_precipitation_mean","title":"Mean overlay over precipitation chart"},{"name":"layer_histogram_global_mean","title":"Histogram with a Global Mean Overlay","style":"background-size: auto 105%; background-position: center center !important;"},{"name":"layer_falkensee","title":"Line Chart with Highlighted Rectangles","style":"background-size: auto 90%; background-position-y: center !important;"},{"name":"layer_line_mean_point_raw","title":"Layering Averages over Raw Values"},{"name":"layer_line_rolling_mean_point_raw","title":"Layering Rolling Averages over Raw Values"},{"name":"layer_likert","title":"Distributions and Medians of Likert Scale Ratings","description":"Distributions and Medians of Likert Scale Ratings. (Figure 9 from @jhoffswell and @zcliu\'s \'Interactive Repair of Tables Extracted from PDF Documents on Mobile Devices\' -- http://idl.cs.washington.edu/files/2019-InteractiveTableRepair-CHI.pdf)."},{"name":"concat_layer_voyager_result","title":"Comparative Likert Scale Ratings","description":"Comparing Likert scale ratings between two conditions. (Figure 10. from @kanitw et al.\'s \\"Voyager 2: Augmenting Visual Analysis with Partial View Specifications\\" -- http://idl.cs.washington.edu/files/2017-Voyager2-CHI.pdf)."}],"Other Layered Plots":[{"name":"layer_candlestick","title":"Candlestick Chart"},{"name":"layer_ranged_dot","title":"Ranged Dot Plot","style":"background-size: auto 70%; background-position-y: center;"},{"name":"facet_bullet","title":"Bullet Chart"},{"name":"layer_dual_axis","title":"Layered Plot with Dual-Axis","style":"background-size: 100% auto; background-position-y: center;"},{"name":"area_horizon","title":"Horizon Graph","style":"background-size: auto 70%; background-position-y: center;"},{"name":"bar_layered_weather","title":"Weekly Weather Plot","description":"Inspired by <a href=\'https://vega.github.io/vega-editor/?mode=vega&spec=weather\'>this Vega example</a>. Weekly weather data plot representing high/low ranges of record temperatures (light grey), average temperatures (dark grey), and both predicted and observed temperatures (black) for the given week. The first five days have high/low ranges of observed temperatures, and the last five days have ranges of predicted temperatures, where the upper barbell represents the range of high temperature predictions and the lower barbell represents the range of low temperature predictions. Created by @melissatdiamond."},{"name":"wheat_wages","title":"Wheat and Wages Example","description":"A recreation of William Playfair’s classic chart visualizing the price of wheat, the wages of a mechanic, and the reigning British monarch. Based on a chart by @manzt."}]},"Multi-View Displays":{"Faceting (Trellis Plot / Small Multiples)":[{"name":"trellis_bar","title":"Trellis Bar Chart"},{"name":"trellis_stacked_bar","title":"Trellis Stacked Bar Chart"},{"name":"trellis_scatter","title":"Trellis Scatter Plot (wrapped)","png":true},{"name":"trellis_bar_histogram","title":"Trellis Histograms"},{"name":"trellis_anscombe","title":"Trellis Scatter Plot Showing Anscombe\'s Quartet"},{"name":"trellis_barley","title":"Becker\'s Barley Trellis Plot"},{"name":"trellis_area","title":"Trellis Area"},{"name":"trellis_area_seattle","title":"Trellis Area Plot Showing Annual Temperatures in Seattle"},{"name":"area_density_facet","title":"Faceted Density Plot"},{"name":"facet_grid_bar","title":"Compact Trellis Grid of Bar Charts"}],"Repeat & Concatenation":[{"name":"repeat_layer","title":"Repeat and Layer to Show Different Movie Measures"},{"name":"vconcat_weather","title":"Vertical Concatenation","description":"Two vertically concatenated charts"},{"name":"repeat_histogram","title":"Horizontally Repeated Charts","description":"Horizontally repeated charts that show the histograms of different parameters of cars in different countries."},{"name":"interactive_splom","png":true,"title":"Interactive Scatterplot Matrix"},{"name":"concat_marginal_histograms","title":"Marginal Histograms","description":"Marginal histograms show the counts along the x and y dimension."},{"name":"concat_bar_scales_discretize","title":"Discretizing scales","description":"Horizontally concatenated charts that show different types of discretizing scales."},{"name":"nested_concat_align","title":"Nested View Concatenation Aligned with Axis `minExtent`"},{"name":"concat_population_pyramid","title":"Population Pyramid"}]},"Maps (Geographic Displays)":{"":[{"name":"geo_choropleth","png":true,"title":"Choropleth of Unemployment Rate per County"},{"name":"geo_circle","png":true,"title":"One Dot per Zipcode in the U.S."},{"name":"geo_layer","png":true,"title":"One Dot per Airport in the U.S. Overlayed on Geoshape"},{"name":"geo_rule","png":true,"title":"Rules (line segments) Connecting SEA to every Airport Reachable via Direct Flights"},{"name":"geo_repeat","png":true,"title":"Three Choropleths Representing Disjoint Data from the Same Table"},{"name":"geo_text","png":true,"title":"U.S. State Capitals Overlayed on a Map of U.S."},{"name":"geo_line","png":true,"title":"Line between Airports in the U.S."},{"name":"geo_trellis","png":true,"title":"Income in the U.S. by State, Faceted over Income Brackets"},{"name":"geo_layer_line_london","title":"London Tube Lines","description":"This example was created by @jwoLondon.","png":true},{"name":"geo_params_projections","title":"Projection explorer","description":"Compare different projections.","png":true}]},"Interactive":{"Interactive Charts":[{"name":"interactive_bar_select_highlight","title":"Bar Chart with Highlighting on Hover and Selection on Click"},{"name":"interactive_legend","title":"Interactive Legend"},{"name":"point_href","title":"Scatterplot with External Links and Tooltips"},{"name":"interactive_brush","title":"Rectangular Brush"},{"name":"interactive_area_brush","title":"Area Chart with Rectangular Brush","descripton":"In this example, we apply an `interval` selection to select subset of data in an area chart. The selected data is highlighted in gold by the second layer of an area mark that `filter`s its data by the `brush` selection."},{"name":"interactive_paintbrush","title":"Paintbrush Highlight","png":true},{"name":"selection_translate_scatterplot_drag","title":"Scatterplot Pan & Zoom"},{"name":"interactive_query_widgets","title":"Query Widgets"},{"name":"selection_layer_bar_month","title":"Interactive Average","description":"The plot below uses an interval selection, which causes the chart to include an interactive brush (shown in grey). The brush selection parameterizes the red guideline, which visualizes the average value within the selected interval."},{"name":"interactive_line_hover","title":"Multi Series Line Chart with Interactive Highlight","description":"The plot below uses argmax to position text labels at the end of line.  It also applies single selection to highlight a hovered line.  Note that we can hidden thick lines to make it easier to hover."},{"name":"interactive_multi_line_label","title":"Multi Series Line Chart with Labels","description":"The plot displays labels for all stock prices of the hovered time. The example is forked/modified from [@jakevdp\'s block](https://bl.ocks.org/jakevdp/a414950f61e4b224765f2439dd1f09b9).","png":true},{"name":"interactive_multi_line_pivot_tooltip","title":"Multi Series Line Chart with Tooltip","description":"The plot displays labels for all stock prices of the hovered time. This example uses a pivot transform to compute the data for the tooltip.","png":true},{"name":"interactive_multi_line_tooltip","title":"Multi Series Line Chart with Tooltip","description":"This plot requires the data to have different series in different fields.  See [#1274](https://github.com/vega/vega-lite/issues/1274) and [#1552](https://github.com/vega/vega-lite/issues/1552) for relevant future syntax improvements.","png":true},{"name":"isotype_grid","title":"Isotype Grid","description":"Inspired by this [D3 example by Alan Smith](http://bl.ocks.org/alansmithy/d832fc03f6e6a91e99f4). Drag region to select. This example was created by @jwoLondon.","png":true},{"name":"brush_table","title":"Brushing Scatter Plot to show data on a table"},{"name":"selection_heatmap","title":"Selectable Heatmap"},{"name":"bar_count_minimap","title":"Bar Chart with a Minimap"},{"name":"interactive_index_chart","title":"Interactive Index Chart"},{"name":"interactive_bin_extent","title":"Focus + Context - Smooth Histogram Zooming"}],"Interactive Multi-View Displays":[{"name":"interactive_overview_detail","title":"Overview and Detail"},{"name":"interactive_layered_crossfilter","title":"Crossfilter"},{"name":"interactive_splom","png":true,"title":"Interactive Scatterplot Matrix"},{"name":"interactive_concat_layer","title":"Interactive Dashboard with Cross Highlight"},{"name":"interactive_seattle_weather","title":"Seattle Weather Exploration","description":"This graph shows an interactive view of Seattle\'s weather, including maximum temperature, amount of precipitation, and type of weather. By clicking and dragging on the scatter plot, you can see the proportion of days in that range that have sun, rain, fog, snow, etc. Created by @jakevdp.","png":true},{"name":"airport_connections","png":true,"title":"Connections among Major U.S. Airports."},{"name":"interactive_global_development","title":"An interactive scatter plot of global health statistics by country and year.","description":"Similar to the Vega version at https://vega.github.io/vega/examples/global-development/.","png":true}]}}')}}]);
//# sourceMappingURL=vega-lite.js.map